'object' != typeof globalThis && (globalThis = window),
    (this.webpackJsonp = this.webpackJsonp || []).push([
        [18],
        {
            '+eUS': function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return _;
                });
                var i = s('jDHv'),
                    n = s('+ExH'),
                    r = s('YEoC'),
                    a = s('oRsZ'),
                    o = s('IpiK'),
                    d = s('d04y'),
                    l = s('pRxM'),
                    c = s('b3Jv'),
                    h = s('4IGy'),
                    u = s('xS/Y'),
                    g = s('rdC+'),
                    m = s('pP8i'),
                    p = s('75G/');
                const f = (e, t) => {
                    if (t === r.a.IDB)
                        switch (e) {
                            case 'Core':
                                return a.a.useIdb;
                            case 'MsgInfo':
                                return o.a.useIdb;
                            case 'Qos':
                                return d.a.useIdb;
                            case 'Reaction':
                                return l.a.useIdb;
                            case 'Search':
                                return c.a.useIdb;
                            case 'Storage':
                                return h.a.useIdb;
                            case 'Res':
                                return u.a.useIdb;
                            case 'SecureLocalstorage':
                                return g.a.useIdb;
                            case 'ZLog':
                                return m.a.useIdb;
                            case 'Media':
                                return p.a.useIdb;
                            default:
                                return;
                        }
                    if (t === r.a.SQLite)
                        switch (e) {
                            case 'Core':
                                return a.a.useSqlite;
                            case 'MsgInfo':
                                return o.a.useSqlite;
                            case 'Qos':
                                return d.a.useSqlite;
                            case 'Reaction':
                                return l.a.useSqlite;
                            case 'Search':
                                return c.a.useSqlite;
                            case 'Storage':
                                return h.a.useSqlite;
                            case 'Res':
                                return u.a.useSqlite;
                            case 'SecureLocalstorage':
                                return g.a.useSqlite;
                            case 'ZLog':
                                return m.a.useSqlite;
                            case 'Media':
                                return p.a.useSqlite;
                            default:
                                return;
                        }
                };
                var v = s('kFM4'),
                    b = s('teaq'),
                    y = s('PhBv'),
                    I = s('1UUk');
                function _(e) {
                    Object(v.a)('RunMode', e),
                        e !== r.e.Unknown &&
                            (i.ModuleContainer.resolve(I.b).install(),
                            e !== r.e.Background &&
                                (setTimeout(() => {
                                    const e = i.ModuleContainer.resolve(y.b);
                                    e.install(n.a), e.start();
                                }, 1),
                                i.ModuleContainer.resolve(b.b).install(f)));
                }
            },
            '0rWR': function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('Mgpg'),
                    a = s('YEoC'),
                    o = s('PmZf'),
                    d = s('x9oK'),
                    l = s('UJ0r');
                let c =
                    n.ModuleContainer.injectable()(
                        (i =
                            (function (e, t) {
                                return n.ModuleContainer.inject(r.ZLoggerFactory)(e, void 0, 0);
                            })(
                                (i =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (i =
                                            Reflect.metadata('design:paramtypes', [
                                                void 0 === r.ZLoggerFactory ? Object : r.ZLoggerFactory,
                                            ])(
                                                (i = class extends l.a {
                                                    constructor(e) {
                                                        super(),
                                                            (this.logger = void 0),
                                                            (this.dbSchema = null),
                                                            (this.logger = e.createZLogger('db', ['adapter-manager']));
                                                    }
                                                    async getDatabaseAdapter(e, t) {
                                                        const s = { database: e, version: t.version, type: t.type };
                                                        this.logger.zsymb(0, 10285, 3e4, () => ['creating', s]);
                                                        const i = this.getAdapterFactoryToken(t.type),
                                                            r = n.ModuleContainer.resolve(i),
                                                            a = await r.createAdapter(e, t);
                                                        return (
                                                            this.logger.zsymb(0, 10285, 30001, () => [
                                                                'create success',
                                                                s,
                                                            ]),
                                                            a.addEventListener(o.a.UnexpectedError, (e) => {
                                                                this.dispatchEvent(new o.d(e.error));
                                                            }),
                                                            a
                                                        );
                                                    }
                                                    canUse(e) {
                                                        return e !== a.a.SQLite || this.canIUseSQLite();
                                                    }
                                                    canIUseSQLite() {
                                                        return !1;
                                                    }
                                                    getAdapterFactoryToken(e) {
                                                        return e === a.a.IDB ? d.b : d.c;
                                                    }
                                                    getExistedPartitionKeys(e, t) {
                                                        const s = this.getAdapterFactoryToken(t);
                                                        return n.ModuleContainer.resolve(s).getExistedPartitionKeys(e);
                                                    }
                                                })
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                n.ModuleContainer.registerSingleton(l.b, c);
            },
            27: function (e, t) {},
            '5yGw': function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('Mgpg'),
                    a = s('DI/x'),
                    o = s('PmZf'),
                    d = s('1UUk'),
                    l = s('d/or'),
                    c = s('teaq');
                let h =
                    n.ModuleContainer.injectable()(
                        (i =
                            (function (e, t) {
                                return n.ModuleContainer.inject(l.a)(e, void 0, 0);
                            })(
                                (i =
                                    (function (e, t) {
                                        return n.ModuleContainer.inject(r.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (i =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (i =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === l.a ? Object : l.a,
                                                        void 0 === r.ZLoggerFactory ? Object : r.ZLoggerFactory,
                                                    ])(
                                                        (i = class {
                                                            constructor(e, t) {
                                                                (this.settingsManager = e),
                                                                    (this.configFactory = void 0),
                                                                    (this.configCache = void 0),
                                                                    (this.logger = void 0),
                                                                    (this.logger = t.createZLogger('db', ['config'])),
                                                                    (this.configCache = new Map());
                                                            }
                                                            install(e) {
                                                                this.configFactory = e;
                                                                n.ModuleContainer.resolve(d.b).addEventListener(
                                                                    o.a.SessionChange,
                                                                    () => {
                                                                        this.clearCache();
                                                                    }
                                                                );
                                                            }
                                                            getDatabaseConfigs(e) {
                                                                const t = this.configCache.get(e);
                                                                return t || this.createConfigCache(e);
                                                            }
                                                            clearCache() {
                                                                const e = this.configCache.values();
                                                                let t = e.next();
                                                                for (; !t.done; ) {
                                                                    t.value.forEach((e) => e.clearCache()),
                                                                        (t = e.next());
                                                                }
                                                                this.configCache.clear();
                                                            }
                                                            createConfigCache(e) {
                                                                const t = [],
                                                                    s = this.getCurrentConfig(e);
                                                                if (s) {
                                                                    t.push(s);
                                                                    const i = this.getConfigForMigrate(e, s.type);
                                                                    i && t.push(i);
                                                                }
                                                                return this.configCache.set(e, t), t;
                                                            }
                                                            getConfigForMigrate(e, t) {
                                                                const s = this.settingsManager;
                                                                let i,
                                                                    n = s.getPreferredAdapter(e);
                                                                if (n !== t) {
                                                                    if (
                                                                        (n && (i = this.configFactory(e, n)), !n || !i)
                                                                    ) {
                                                                        const t = s.preferAdapters;
                                                                        for (
                                                                            let s = 0;
                                                                            s < t.length &&
                                                                            ((n = t[s]),
                                                                            (i = this.configFactory(e, n)),
                                                                            !i);
                                                                            s++
                                                                        );
                                                                    }
                                                                    return i && t !== n ? i : void 0;
                                                                }
                                                            }
                                                            getCurrentConfig(e) {
                                                                const t = this.settingsManager.getCurrentAdapterType(e);
                                                                if ('number' != typeof t)
                                                                    throw new a.g(
                                                                        `${t} is not a valid AdapterType value!`
                                                                    );
                                                                return this.configFactory(e, t);
                                                            }
                                                        })
                                                    ) || i)
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                n.ModuleContainer.registerSingleton(c.b, h);
            },
            BtX6: function (e, t, s) {
                s('E2g8').polyfill();
            },
            HPcM: function (e, t, s) {
                'use strict';
                s.d(t, 'b', function () {
                    return n;
                }),
                    s.d(t, 'a', function () {
                        return r;
                    });
                var i = s('jDHv');
                const n = Object(i.define)('zlog-sentry-bucket'),
                    r = Object(i.define)('zlog-regular-bucket');
            },
            K8kB: function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return n;
                });
                var i = s('jDHv');
                const n = Object(i.define)('zlog-write-scheduler');
            },
            KdAX: function (e, t, s) {
                'use strict';
                var i = s('jDHv'),
                    n = s('W8fB'),
                    r = s('UJDs'),
                    a = s('7FSS'),
                    o = (s('j6JD'), s('VTBJ'));
                const d = s('4JQ2'),
                    l = {
                        intro: (e) => l.eol(e),
                        info: (e) => e,
                        debug: (e) => e,
                        warning: (e) => e,
                        error: (e) => e,
                        placeholder: (e) => e,
                        tick: (e) => e,
                        header: (e) => d.green(e),
                        sourcemap: (e) => d.gray(e),
                        level: (e) => e,
                        bold: (e) => d.bold(e),
                        eol: (e) => e + '\n\n',
                    },
                    c =
                        (Object(o.a)(
                            Object(o.a)({}, l),
                            {},
                            {
                                intro: (e) => l.eol(d.bgWhite.black(e)),
                                info: (e) => d.white(e),
                                debug: (e) => d.blue(e),
                                warning: (e) => d.yellow(e),
                                error: (e) => d.red(e),
                                tick: (e) => d.black.bgWhite.bold(` ${e} `),
                                header: (e) => e,
                            }
                        ),
                        l);
                s('CDcE');
                const h = { display: !0, style: 'font-size: 11px; color: gray' },
                    u = { display: !1, style: 'font-size: 11px; color: gray; margin-bottom: 8px' };
                function g(e) {
                    let { lineMeta: t, template: s, args: i } = e;
                    if ('number' == typeof s)
                        return 'Error: expected template as string. Got number?! [' + t.id1 + ':' + t.id2 + ']';
                    const n = [t.module, t.features.join('/')].map((e) => e || '?').join('|');
                    let r = i.map((e) =>
                        (function (e) {
                            let t = e;
                            if ('function' == typeof e)
                                try {
                                    t = e();
                                } catch (s) {
                                    a.a.error(
                                        'ZLogSanitizer: failed to exec func. Please make sure your func executable' + s
                                    ),
                                        (t = e.toString());
                                }
                            return t;
                        })(e)
                    );
                    1 === r.length && 1 === i.length && 'function' == typeof i[0] && Array.isArray(r[0]) && (r = r[0]);
                    const o = (function (e, t) {
                            if (null === e) return '';
                            const s = '{}';
                            let i = 0;
                            for (; -1 !== e.search(s) && i < t.length; )
                                switch (typeof t[i++]) {
                                    case 'number':
                                        e = e.replace(s, '%d');
                                        break;
                                    case 'string':
                                    default:
                                        e = e.replace(s, '%s');
                                        break;
                                    case 'object':
                                        e = e.replace(s, '%o');
                                }
                            return e;
                        })(s, r).trim(),
                        d = (t.id1.toString().substring(t.id1.toString().indexOf('src')), t.id2, ''),
                        l = [];
                    return (
                        h.display && n.trim() && l.push(c.sourcemap(n.trim()) + '\n'),
                        u.display && d.trim() && l.push(c.sourcemap(d) + '\n'),
                        o.trim() && l.push(o.trim()),
                        r.length > 0 ? (r.unshift(l.join(' ')), r) : [l.join(' ')]
                    );
                }
                var m;
                let p =
                    Object(i.injectable)()(
                        (m = class {
                            write(e) {
                                const t = g(e);
                                switch (e.lineMeta.level) {
                                    case r.b.info:
                                        a.a.log.apply(null, t);
                                        break;
                                    case r.b.warn:
                                        a.a.warn.apply(null, t);
                                        break;
                                    case r.b.debug:
                                        a.a.debug.apply(null, t);
                                        break;
                                    case r.b.error:
                                        a.a.error.apply(null, t);
                                        break;
                                    default:
                                        a.a.log.apply(null, t);
                                }
                            }
                        })
                    ) || m;
                i.ModuleContainer.registerSingleton(n.a, p);
            },
            Lq8m: function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('Uzj0'),
                    a = s('Mgpg'),
                    o = s('zpw2'),
                    d = s('SGbk'),
                    l = s('pjo1');
                let c =
                    n.ModuleContainer.injectable()(
                        (i =
                            (function (e, t) {
                                return n.ModuleContainer.inject(a.ZLoggerFactory)(e, void 0, 0);
                            })(
                                (i =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (i =
                                            Reflect.metadata('design:paramtypes', [
                                                void 0 === a.ZLoggerFactory ? Object : a.ZLoggerFactory,
                                            ])(
                                                (i = class {
                                                    constructor(e) {
                                                        (this.loggerFactory = e),
                                                            (this.logger = void 0),
                                                            (this.logger = this.loggerFactory.createZLogger('db', [
                                                                'client',
                                                            ]));
                                                    }
                                                    createQueryBuilder(e) {
                                                        const t = r.c.map(e, (e, t) => this.createBuilder(e, t)),
                                                            s = Object.keys(e);
                                                        return (
                                                            (t.deleteAllDatabases = Object(d.a)(async () => {
                                                                const e = s.map((e) => t[e].deleteThisDatabase());
                                                                await Promise.all(e);
                                                            })),
                                                            (t.closeAllDatabases = Object(d.a)(async () => {
                                                                const e = s.map((e) => t[e].closeThisDatabase());
                                                                await Promise.all(e);
                                                            })),
                                                            t
                                                        );
                                                    }
                                                    createBuilder(e, t, s) {
                                                        return new o.a(e, t, s);
                                                    }
                                                })
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                n.ModuleContainer.registerSingleton(l.a, c);
            },
            SGbk: function (e, t, s) {
                'use strict';
                function i(e) {
                    let t = {};
                    return async function () {
                        for (var s = arguments.length, i = new Array(s), n = 0; n < s; n++) i[n] = arguments[n];
                        const r = i.length ? i.join('-') : '';
                        if (!t[r]) return (t[r] = !0), e(...i);
                    };
                }
                s.d(t, 'a', function () {
                    return i;
                });
            },
            UJDs: function (e, t, s) {
                'use strict';
                let i;
                s.d(t, 'b', function () {
                    return i;
                }),
                    s.d(t, 'a', function () {
                        return n;
                    }),
                    (function (e) {
                        (e[(e.info = 0)] = 'info'),
                            (e[(e.error = 1)] = 'error'),
                            (e[(e.warn = 2)] = 'warn'),
                            (e[(e.debug = 3)] = 'debug'),
                            (e[(e.critical = 4)] = 'critical');
                    })(i || (i = {}));
                const n = {
                    [i.info]: 'info',
                    [i.error]: 'error',
                    [i.warn]: 'warn',
                    [i.debug]: 'debug',
                    [i.critical]: 'critical',
                };
            },
            W8fB: function (e, t, s) {
                'use strict';
                s.d(t, 'b', function () {
                    return n;
                }),
                    s.d(t, 'a', function () {
                        return r;
                    }),
                    s.d(t, 'c', function () {
                        return a;
                    });
                var i = s('jDHv');
                const n = Object(i.define)('sen-log-writer'),
                    r = Object(i.define)('console-log-writer'),
                    a = Object(i.define)('zlog-writer');
            },
            XuBa: function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return n;
                });
                const i = s('NFKh');
                class n {
                    static encrypt(e) {
                        return (
                            i.AES.encrypt(e, '5dbe084b7eedNWjRref04e2rDxs01lwH', {
                                iv: '7eb5dbe084b7eedeef04e2622d46ba00',
                                mode: i.mode.ECB,
                                padding: i.pad.Pkcs7,
                            }) + ''
                        );
                    }
                    static decrypt(e) {
                        return i.AES.decrypt(e, '5dbe084b7eedNWjRref04e2rDxs01lwH', {
                            keySize: 16,
                            iv: '7eb5dbe084b7eedeef04e2622d46ba00',
                            mode: i.mode.ECB,
                            padding: i.pad.Pkcs7,
                        }).toString(i.enc.Utf8);
                    }
                }
            },
            Y41u: function (e, t, s) {
                'use strict';
                let i;
                s.d(t, 'c', function () {
                    return i;
                }),
                    s.d(t, 'b', function () {
                        return n;
                    }),
                    s.d(t, 'a', function () {
                        return r;
                    }),
                    (function (e) {
                        (e.RegLogBucketStatus = 'RegLogBucketStatus'),
                            (e.SentryLogBucketStatus = 'SentryLogBucketStatus'),
                            (e.WriteSchedulerRequestFlush = 'WriteSchedulerRequestFlush'),
                            (e.WriterStatus = 'WriterStatus'),
                            (e.LogBucketRequestFlush = 'LogBucketRequestFlush');
                    })(i || (i = {}));
                class n {
                    constructor(e, t) {
                        (this.type = e), (this.payload = t);
                    }
                }
                class r {
                    constructor(e) {
                        this.type = e;
                    }
                }
            },
            cF85: function (e, t, s) {
                'use strict';
                var i = s('jDHv'),
                    n = s('x9oK'),
                    r = s('rkiK'),
                    a = s('YEoC'),
                    o = s('PmZf'),
                    d = s('LzQZ'),
                    l = s('rvru'),
                    c = s('AH6j');
                let h;
                !(function (e) {
                    e.AbnormallyClose = 'abnormally-closed';
                })(h || (h = {}));
                class u extends c.a {
                    constructor() {
                        super(h.AbnormallyClose);
                    }
                }
                var g = s('xpEm'),
                    m = s('DI/x');
                function p(e) {
                    return new Promise((t, s) => {
                        (e.onerror = () => s(e.error)), (e.onsuccess = () => t(e.result));
                    });
                }
                function f(e, t, s) {
                    return `Invalid filter value for this method: '${e}' - Expected type: '${t}' - Actual type: '${s}'`;
                }
                function v(e, t) {
                    const s = Object(g.m)(t, {
                        operations: {
                            AND: g.a,
                            OR: g.k,
                            NOT: g.j,
                            gt: g.c,
                            gte: g.d,
                            lt: g.f,
                            lte: g.g,
                            in: g.e,
                            notIn: g.i,
                            eq: g.b,
                            notEq: g.h,
                            contains(e, t, s) {
                                if ('string' != typeof e) {
                                    const t = f('contains', 'string', typeof e);
                                    throw new m.l(t);
                                }
                                return Object(g.l)((t) => 'string' == typeof t && t.includes(e), t, s);
                            },
                            startsWith(e, t, s) {
                                if ('string' != typeof e) {
                                    const t = f('startsWith', 'string', typeof e);
                                    throw new m.l(t);
                                }
                                return Object(g.l)((t) => 'string' == typeof t && t.startsWith(e), t, s);
                            },
                            endsWith(e, t, s) {
                                if ('string' != typeof e) {
                                    const t = f('endsWith', 'string', typeof e);
                                    throw new m.l(t);
                                }
                                return Object(g.l)((t) => 'string' == typeof t && t.endsWith(e), t, s);
                            },
                        },
                    });
                    return s(e);
                }
                class b extends c.b {
                    constructor(e) {
                        super(),
                            (this.connectionFactory = e),
                            (this.connection = null),
                            (this.isManuallyClose = !1),
                            (this.onAbnormallyCloseListeners = []);
                    }
                    get hasActiveConnection() {
                        return null !== this.connection;
                    }
                    async getName() {
                        return (await this.getConnection()).name;
                    }
                    async getObjectStoreNames() {
                        return (await this.getConnection()).objectStoreNames;
                    }
                    async getVersion() {
                        return (await this.getConnection()).version;
                    }
                    async getConnection(e) {
                        void 0 === e && (e = !1);
                        const t = async () => {
                            let e = null;
                            try {
                                e = await this.connectionFactory();
                            } catch (t) {
                                let e = t;
                                throw (
                                    ('VersionError' === t.name && (e = new m.k(t.message)),
                                    this.dispatchEvent(new o.d(e)),
                                    t)
                                );
                            }
                            return (
                                (e.onclose = () => {
                                    this.dispatchEvent(new u());
                                }),
                                e
                            );
                        };
                        if (this.connection) {
                            if (e) {
                                if (this.isManuallyClose)
                                    throw new m.d('The database connection has manually been closed!', ['idb']);
                                const e = this.connection;
                                this.onAbnormallyCloseListeners.forEach((t) => {
                                    e.removeEventListener('close', t);
                                }),
                                    (this.connection = await t());
                            }
                        } else this.connection = await t();
                        return this.connection;
                    }
                    async getTransaction(e, t) {
                        let s = await this.getConnection(),
                            i = null;
                        try {
                            i = s.transaction(e, t);
                        } catch (n) {
                            if (!n || ('InvalidStateError' !== n.name && 11 !== n.code)) throw n;
                            (s = await this.getConnection(!0)), (i = s.transaction(e, t));
                        }
                        return i;
                    }
                    close() {
                        this.connection &&
                            !this.isManuallyClose &&
                            (this.connection.close(), (this.connection = null), (this.isManuallyClose = !0));
                    }
                }
                var y = s('bSii'),
                    I = s('3wcW');
                class _ extends I.a {
                    constructor(e, t, s) {
                        super(e, t, !1), (this._transaction = s), (this.allowMissingTable = !1);
                    }
                    async delete() {}
                    async close() {
                        this.instance && this.instance.close();
                    }
                    async _getTables() {
                        return Array.from(this.instance.objectStoreNames);
                    }
                    async _createTable(e) {
                        const t = this.instance;
                        let s = {};
                        if (e.isNonFieldlikeEntity) s = { autoIncrement: !0 };
                        else {
                            const t = e.primaryIndex;
                            s = { keyPath: Object(y.a)(t.getRealFields()), autoIncrement: t.autoIncrement };
                        }
                        if (t.objectStoreNames.contains(e.tableName)) return;
                        const i = t.createObjectStore(e.tableName, s);
                        Object.values(e.indices).map((e) => {
                            if ('primary' === e.name) return;
                            const t = e.fields.map((e) =>
                                'object' != typeof e
                                    ? e
                                    : 'length' === e.type
                                    ? `${e.field.toString()}.length`
                                    : e.field
                            );
                            i.createIndex(e.name, Object(y.a)(t), { unique: e.unique });
                        });
                    }
                    async _createIndex(e, t) {
                        const s = this._transaction;
                        if (!s) throw new m.u(`Can't create '${t}' due to unavailable IDBTransaction transaction!`);
                        const i = s.objectStore(e.tableName),
                            n = e.getIndex(t),
                            r = n.fields.map((e) =>
                                'object' != typeof e
                                    ? e
                                    : 'length' === e.type
                                    ? `${e.field.toString()}.length`
                                    : e.field
                            );
                        var a;
                        i.createIndex(t, 1 === (a = r).length ? a[0] : a, { unique: n.unique });
                    }
                    _addColumns(e, t) {
                        return Promise.resolve();
                    }
                }
                var M = s('VTBJ'),
                    C = s('X2RP');
                class T extends C.a {
                    constructor(e, t) {
                        super(), (this.instance = e), (this.transactionManager = t);
                    }
                    getExecutorName() {
                        return 'idb';
                    }
                    async clear(e) {
                        let { transaction: t, meta: s } = e;
                        const i = s.tableConfig;
                        return p((await this.getStore(t, i, a.f.READWRITE)).clear());
                    }
                    async get(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = i.index,
                            r = i.key,
                            a = s.tableConfig,
                            o = await this.getStoreOrIndex(t, a, n),
                            d = this.validateKey(a, n, r),
                            l = o.get(d);
                        return this.getResult(a, l);
                    }
                    async getMulti(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = i.index,
                            r = i.keys,
                            a = s.tableConfig,
                            o = await this.getStoreOrIndex(t, a, n),
                            d = r.map((e) => {
                                const t = this.validateKey(a, n, e),
                                    s = o.get(t);
                                return this.getResult(a, s);
                            });
                        return Promise.all(d);
                    }
                    getAll(e) {
                        return e.params.direction === a.b.PREV ||
                            e.params.direction === a.b.PREV_UNIQUE ||
                            e.params.filter ||
                            e.params.predicate ||
                            e.params.aborted ||
                            e.params.onProgress ||
                            e.params.onValue
                            ? this.getAllByCursor(e)
                            : this.getAllWithoutFilter(e);
                    }
                    async getAllKeyByCursor(e) {
                        let { meta: t, params: s, transaction: i } = e;
                        const n = t.tableConfig,
                            r = s.range && this.toIDBKeyRange(s.range),
                            a = (await this.getStoreOrIndex(i, n, s.index)).openKeyCursor(r, s.direction);
                        return null === a
                            ? []
                            : new Promise((e, t) => {
                                  const i = [];
                                  (a.onsuccess = () => {
                                      const t = a.result;
                                      if (null === t || null === t.primaryKey) return void e(i);
                                      const n = t.primaryKey;
                                      i.push(n);
                                      i.length >= s.limit ? e(i) : t.continue();
                                  }),
                                      (a.onerror = () => {
                                          t(a.error);
                                      });
                              });
                    }
                    async getAllKey(e) {
                        if (e.params.direction === a.b.PREV || e.params.direction === a.b.PREV_UNIQUE)
                            return this.getAllKeyByCursor(e);
                        {
                            const { meta: t, params: s, transaction: i } = e,
                                n = t.tableConfig,
                                r = s.range && this.toIDBKeyRange(s.range);
                            return p((await this.getStoreOrIndex(i, n, s.index)).getAllKeys(r, s.limit));
                        }
                    }
                    async getAndUpdate(e) {
                        const { transaction: t, params: s, meta: i } = e,
                            n = s.index,
                            r = s.updater,
                            o = s.key,
                            d = i.tableConfig,
                            l = await this.getStoreOrIndex(t, d, n),
                            c = this.validateKey(d, n, o),
                            h = l.get(c),
                            u = await this.getResult(d, h);
                        if (void 0 === u) return;
                        const g = await this.getStore(t, d, a.f.READWRITE),
                            f = await r(u || {});
                        if (!f && !1 !== s.ignoreNotFound) throw new m.f('Update undefined document');
                        const v = this.toDB(d, f),
                            b = g.put(v);
                        return await p(b), f;
                    }
                    insert(e) {
                        return e.params.replace ? this._insertOrReplace(e) : this._insertIfNotExist(e);
                    }
                    insertMulti(e) {
                        return e.params.replace ? this.insertOrReplaceMulti(e) : this.insertIfNotExistMulti(e);
                    }
                    async update(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getStore(t, n, a.f.READWRITE);
                        return this._update(
                            r,
                            this.validateKey(n, 'primary', i.key),
                            i.attributes,
                            this.toDB(n, i.value, !1),
                            i.ignoreNotFound
                        ).then((t) => (t ? this.fromDB(e.meta.tableConfig, t) : t));
                    }
                    async updateMulti(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getStore(t, n, a.f.READWRITE),
                            o = [],
                            d = [],
                            l = i.patches.map((t) =>
                                this._update(
                                    r,
                                    this.validateKey(n, 'primary', t.key),
                                    t.attributes,
                                    this.toDB(n, t.value, !1),
                                    i.ignoreNotFound
                                )
                                    .then((t) => (t ? this.fromDB(e.meta.tableConfig, t) : t))
                                    .then((e) => {
                                        e ? o.push(e) : d.push(e);
                                    })
                            );
                        return Promise.all(l).then(() => ({ success: o, fail: d }));
                    }
                    async delete(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = s.tableConfig,
                            r = (await this.getStore(t, n, a.f.READWRITE)).delete(
                                this.validateKey(n, 'primary', i.key)
                            );
                        return this.checkReqSuccessOrFail(r);
                    }
                    async deleteMulti(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = s.tableConfig,
                            r = await this.getStore(t, n, a.f.READWRITE),
                            o = { success: [], fail: [] },
                            d = i.keys.map((e) =>
                                this.checkReqSuccessOrFail(r.delete(e)).then((t) => {
                                    t ? o.success.push(e) : o.fail.push(e);
                                })
                            );
                        return await Promise.all(d), o;
                    }
                    async count(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = s.tableConfig,
                            r = this.toIDBKeyRange(i.range);
                        return p((await this.getStoreOrIndex(t, n, i.index)).count(r));
                    }
                    async findAndDelete(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = s.tableConfig,
                            { filter: r } = i,
                            o = r ? (e) => v(e, r) : null,
                            d = this.toIDBKeyRange(i.range),
                            l = (await this.getStore(t, n, a.f.READWRITE)).openCursor(d);
                        return null === l
                            ? 0
                            : new Promise((e, t) => {
                                  let s = 0,
                                      i = !1;
                                  (l.onsuccess = () => {
                                      if (i) return;
                                      const t = l.result;
                                      if (null === t || null === t.value) return (i = !0), void e(s);
                                      const r = this.fromDB(n, t.value);
                                      (o && !o(r)) || (t.delete(), (s += 1), !i) ? t.continue() : e(s);
                                  }),
                                      (l.onerror = () => {
                                          t(l.error);
                                      });
                              });
                    }
                    async getAllByCursor(e) {
                        let { transaction: t, meta: s, params: i, deferrer: n } = e;
                        const r = s.tableConfig,
                            { onProgress: a, advance: o, stepCount: d, onValue: l, predicate: c, filter: h } = i;
                        if (c && h) {
                            const e = new m.l("Query using both 'filter' and 'predicate' is not allowed!");
                            return void (null == n || n.reject(e));
                        }
                        let u = null;
                        (c || h) && (u = c || ((e) => v(e, h)));
                        const g = await this.getStoreOrIndex(t, r, i.index),
                            p = this.toIDBKeyRange(i.range),
                            f = g.openCursor(p, i.direction);
                        return null === f
                            ? []
                            : new Promise((e, t) => {
                                  const s = [];
                                  let n = !1,
                                      c = !!o;
                                  (f.onsuccess = () => {
                                      if (n) return;
                                      const t = f.result;
                                      if (null === t || null === t.value) return (n = !0), void e(s);
                                      if (c && o) return (c = !1), void t.advance(o);
                                      const h = this.fromDB(r, t.value);
                                      l && l(h),
                                          (u && !u(h)) ||
                                          (s.push(h),
                                          a && a(s, h),
                                          (n = s.length >= i.limit),
                                          n || (n = !!i.aborted && i.aborted(s, h)),
                                          !n)
                                              ? (d && t.advance(d), t.continue())
                                              : e(s);
                                  }),
                                      (f.onerror = () => {
                                          t(f.error);
                                      });
                              });
                    }
                    async getAllWithoutFilter(e) {
                        let { transaction: t, meta: s, params: i } = e;
                        const n = s.tableConfig,
                            r = this.toIDBKeyRange(i.range),
                            a = (await this.getStoreOrIndex(t, n, i.index)).getAll(r, i.limit);
                        return this.getResult(n, a);
                    }
                    async getStoreOrIndex(e, t, s) {
                        const i = await this.getStore(e, t, a.f.READONLY);
                        if ('primary' === s) return i;
                        const n = t.getIndex(s);
                        if (!n) throw new m.o(s);
                        return i.index(n.name);
                    }
                    async _insertIfNotExist(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getTransaction(t, n, a.f.READWRITE),
                            o = r.objectStore(n.tableName);
                        let d = null;
                        if (!n.isNonFieldlikeEntity) {
                            const e = n.primaryIndex;
                            if (!e.autoIncrement) {
                                const t = Object(y.a)(e.createKey(i.value)),
                                    s = o.get(t);
                                d = await new Promise((e) => {
                                    (s.onsuccess = () => {
                                        const t = this.fromDB(n, s.result);
                                        e(t);
                                    }),
                                        (s.onerror = () => {
                                            e(null);
                                        });
                                });
                            }
                        }
                        if (d) return Promise.resolve(d);
                        {
                            const e = o.add(this.toDB(n, i.value));
                            return t
                                ? p(e).then(() => i.value)
                                : new Promise((t, s) => {
                                      (r.oncomplete = () => {
                                          t(i.value);
                                      }),
                                          (r.onerror = () => {
                                              var n;
                                              0 === (null === (n = e.error) || void 0 === n ? void 0 : n.code)
                                                  ? t(i.value)
                                                  : s(e.error);
                                          });
                                  });
                        }
                    }
                    async _insertOrReplace(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getTransaction(t, n, a.f.READWRITE),
                            o = r.objectStore(n.tableName).put(this.toDB(n, i.value));
                        return t
                            ? p(o).then(() => i.value)
                            : new Promise((e, t) => {
                                  (r.oncomplete = () => {
                                      e(i.value);
                                  }),
                                      (r.onerror = () => {
                                          t(o.error);
                                      });
                              });
                    }
                    async insertIfNotExistMulti(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getTransaction(t, n, a.f.READWRITE),
                            o = r.objectStore(n.tableName),
                            d = [],
                            l = [],
                            c = i.values.map(async (e) => {
                                let t = !1;
                                if (!n.isNonFieldlikeEntity) {
                                    const s = n.primaryIndex;
                                    if (!s.autoIncrement) {
                                        const i = Object(y.a)(s.createKey(e)),
                                            r = o.get(i);
                                        t = await new Promise((e) => {
                                            (r.onsuccess = () => {
                                                const t = this.fromDB(n, r.result);
                                                let s = !1;
                                                void 0 !== t && (d.push(t), (s = !0)), e(s);
                                            }),
                                                (r.onerror = () => {
                                                    e(!1);
                                                });
                                        });
                                    }
                                }
                                if (t) return;
                                const s = o.add(this.toDB(n, e));
                                return this.checkReqSuccessOrFail(s)
                                    .then((t) => {
                                        if (t) {
                                            let t = e;
                                            if (!n.isNonFieldlikeEntity) {
                                                const { primaryIndex: e } = n,
                                                    i = e.fields[0].field;
                                                Object.prototype.hasOwnProperty.call(t, i) || (t[i] = s.result);
                                            }
                                            d.push(t);
                                        } else l.push(e);
                                    })
                                    .catch(() => {
                                        l.push(e);
                                    });
                            });
                        return t
                            ? Promise.all(c).then(() => ({ success: d, fail: l }))
                            : new Promise((e) => {
                                  (r.oncomplete = () => {
                                      e({ success: d, fail: l });
                                  }),
                                      (r.onerror = () => {
                                          e({ success: d, fail: l });
                                      });
                              });
                    }
                    async insertOrReplaceMulti(e) {
                        const { transaction: t, meta: s, params: i } = e,
                            n = s.tableConfig,
                            r = await this.getTransaction(t, n, a.f.READWRITE),
                            o = r.objectStore(n.tableName),
                            d = [],
                            l = [],
                            c = i.values.map((e) => {
                                const t = o.put(this.toDB(n, e));
                                return this.checkReqSuccessOrFail(t)
                                    .then(() => {
                                        let s = e;
                                        if (!n.isNonFieldlikeEntity) {
                                            const { primaryIndex: e } = n,
                                                i = e.fields[0].field;
                                            Object.prototype.hasOwnProperty.call(s, i) || (s[i] = t.result);
                                        }
                                        d.push(s);
                                    })
                                    .catch(() => {
                                        l.push(e);
                                    });
                            });
                        return t
                            ? Promise.all(c).then(() => ({ success: d, fail: l }))
                            : new Promise((e, t) => {
                                  (r.oncomplete = () => e({ success: d, fail: l })),
                                      (r.onerror = () => e({ success: d, fail: l }));
                              });
                    }
                    async _update(e, t, s, i, n) {
                        const r = await p(e.get(t));
                        if (!r) {
                            if (n) return;
                            throw new m.f('Update undefined document!');
                        }
                        return await p(e.put(s.reduce((e, t) => ((e[t] = i[t]), e), r))), r;
                    }
                    checkReqSuccessOrFail(e) {
                        return p(e)
                            .then(() => !0)
                            .catch(() => !1);
                    }
                    getTransaction(e, t, s) {
                        const i = t.tableName;
                        if (e > 0) {
                            const t = this.transactionManager.get(e);
                            return Promise.resolve(t.instance);
                        }
                        return this.instance.getTransaction([i], s);
                    }
                    async getStore(e, t, s) {
                        return (await this.getTransaction(e, t, s)).objectStore(t.tableName);
                    }
                    toIDBKeyRange(e) {
                        if (e) {
                            if (e.from && e.to)
                                try {
                                    return IDBKeyRange.bound(e.from, e.to, e.excludeFrom, e.excludeTo);
                                } catch (t) {
                                    throw t;
                                }
                            return e.from
                                ? IDBKeyRange.lowerBound(e.from, e.excludeFrom)
                                : e.to
                                ? IDBKeyRange.upperBound(e.to, e.excludeTo)
                                : void 0;
                        }
                    }
                    getResult(e, t) {
                        return p(t).then((t) => this.fromDB(e, t));
                    }
                    toDB(e, t, s) {
                        void 0 === s && (s = !0);
                        try {
                            e.validate(t, s);
                        } catch (r) {
                            this.logger.zsymb(
                                21,
                                10311,
                                3e4,
                                '{}: {} (database={}, table={})',
                                r.name,
                                r.message,
                                e.dbName,
                                e.name
                            );
                        }
                        const { isNonFieldlikeEntity: i } = e,
                            n = e.getTransformConfigs(a.a.IDB);
                        return (function (e) {
                            if (0 === n.length) return e;
                            const t = (e) => {
                                if (i) return n.reduce((e, t) => t.toDB(e), e);
                                {
                                    const t = Object(M.a)({}, e);
                                    return (
                                        n.forEach((e) => {
                                            e.toDB(t);
                                        }),
                                        t
                                    );
                                }
                            };
                            return Array.isArray(e) ? e.map(t) : t(e);
                        })((t = e.prepareValue(t, s, i)));
                    }
                    fromDB(e, t) {
                        const s = e.getTransformConfigs(a.a.IDB);
                        if (0 === s.length) return t;
                        const i = (e) => (
                            s.forEach((t) => {
                                t.fromDB(e);
                            }),
                            e
                        );
                        return Array.isArray(t) ? t.map(i) : i(t);
                    }
                    validateKey(e, t, s) {
                        if (!e.getIndex(t).validateKey(s)) throw new m.l('The query key is invalid!');
                        return s;
                    }
                }
                class O {
                    constructor(e, t) {
                        (this.partition = e), (this.instance = t);
                    }
                    async beginTransaction(e) {
                        try {
                            const t = e.params.tables.map((e) => this.partition.getTableConfig(e).tableName),
                                s = e.params.mode,
                                i = await this.instance.getTransaction(t, s),
                                n = e.transaction;
                            e.deferrer.resolve(new E(n, i));
                        } catch (t) {
                            e.deferrer.reject(t);
                        }
                    }
                }
                class E {
                    constructor(e, t) {
                        (this.id = e),
                            (this.instance = t),
                            (this.error = null),
                            (this.closed = void 0),
                            (this.onCloseListeners = []),
                            (this.closed = !1);
                        const s = (e) => {
                            (this.closed = !0), (this.error = e), this.onCloseListeners.forEach((t) => t(e));
                        };
                        t.addEventListener('complete', () => s(t.error)),
                            t.addEventListener('abort', () => s(t.error)),
                            t.addEventListener('error', () => s(t.error));
                    }
                    execute(e) {
                        return e().catch((e) => {
                            throw (this.instance.abort(), e);
                        });
                    }
                    onClose(e) {
                        this.onCloseListeners.push(e), this.closed && e(this.error);
                    }
                }
                class S extends n.a {
                    constructor(e, t, s, i, n, r) {
                        super(e, t, s, i, n, r, {}),
                            this.instance.addEventListener(o.a.UnexpectedError, (e) => {
                                this.dispatchEvent(new o.d(e.error));
                            }),
                            this.instance.addEventListener(h.AbnormallyClose, () => {
                                this.logger.zsymb(6, 10306, 3e4, 'The database connection has abnormally closed!');
                            });
                    }
                    async doesDatabaseExist(e) {
                        try {
                            return (
                                (
                                    await (function (e) {
                                        const t = globalThis.indexedDB.open(e);
                                        return new Promise((s, i) => {
                                            (t.onupgradeneeded = function () {
                                                var s;
                                                null === (s = t.transaction) || void 0 === s || s.abort(),
                                                    i(new D(`No database whose name is ${e} exists`));
                                            }),
                                                (t.onsuccess = function () {
                                                    s(t.result);
                                                }),
                                                (t.onerror = function () {
                                                    i(t.error);
                                                });
                                        });
                                    })(e)
                                ).close(),
                                !0
                            );
                        } catch (t) {
                            if (t.name === w) return !1;
                            throw t;
                        }
                    }
                    async deleteThisDatabase() {
                        if (!(await this.doesDatabaseExist(this.fullName)))
                            return void this.logger.zsymb(
                                6,
                                10306,
                                30001,
                                `Skip db deletion due to non-existence: '${this.fullName}'`
                            );
                        this.instance.close();
                        const e = indexedDB.deleteDatabase(this.fullName),
                            t = this.instance,
                            s = this.fullName,
                            i = this.logger;
                        return (
                            i.zsymb(
                                6,
                                10306,
                                30002,
                                `The database connection is manually closed due to database deletion: '${s}'`
                            ),
                            new Promise((n, r) => {
                                (e.onsuccess = function () {
                                    i.zsymb(0, 10306, 30003, `Delete database sucessfully: '${s}'`), n();
                                }),
                                    (e.onblocked = function () {
                                        t.close();
                                    }),
                                    (e.onerror = function () {
                                        const t = e.error;
                                        i.zsymb(0, 10306, 30004, `Failed to delete database: '${s}' - Error: ${t}`),
                                            r(t);
                                    });
                            })
                        );
                    }
                    closeThisDatabase() {
                        return this.instance.hasActiveConnection
                            ? (this.instance.close(),
                              this.logger.zsymb(
                                  6,
                                  10306,
                                  30005,
                                  `The database connection is manually closed due to manual database closing: '${this.fullName}'`
                              ),
                              new Promise((e) => {
                                  setTimeout(() => {
                                      e();
                                  }, 1e4);
                              }))
                            : Promise.resolve();
                    }
                    static async factory(e, t) {
                        const s = new b(async function () {
                                const s = indexedDB.open(e, t.version);
                                s.onupgradeneeded = async (e) => {
                                    if (null !== e.newVersion)
                                        try {
                                            const i = new _(t, s.result, s.transaction);
                                            await i.upgrade(e.oldVersion, e.newVersion), await i.validate();
                                        } catch (i) {
                                            throw (s.transaction.abort(), i);
                                        }
                                };
                                const n = r.e.start(r.b.db_ready),
                                    a = Date.now(),
                                    o = i.ModuleContainer.resolve(l.a),
                                    d = setTimeout(() => {
                                        o.sendLongOpenRequestQos(e);
                                    }, 2e4),
                                    c = await p(s).catch((e) => {
                                        throw (clearTimeout(d), e);
                                    }),
                                    h = Date.now();
                                clearTimeout(d);
                                const u = h - a;
                                return (
                                    o.sendSuccessOpenDBDurationQos(e, a, u),
                                    n.end({ dbName: e }),
                                    (c.onversionchange = function (e) {
                                        if (null === e.newVersion) {
                                            e.target.close();
                                        }
                                    }),
                                    c
                                );
                            }),
                            n = i.ModuleContainer.resolve(d.a),
                            o = new O(t, s),
                            c = new T(s, n);
                        return (
                            t.tables.forEach((e) => e.getTransformConfigs(a.a.IDB).forEach((e) => e.init(t.cipherKey))),
                            new S(t, e, n, s, c, o)
                        );
                    }
                }
                const w = 'NonExistedDBError';
                class D extends Error {
                    constructor(e) {
                        super(e), (this.name = w);
                    }
                }
                var L;
                let F =
                    i.ModuleContainer.injectable()(
                        (L = class {
                            async createAdapter(e, t) {
                                return S.factory(e, t);
                            }
                            async getExistedPartitionKeys(e) {
                                return [];
                            }
                        })
                    ) || L;
                i.ModuleContainer.registerSingleton(n.b, F);
            },
            d951: function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return i;
                });
                class i {
                    constructor(e) {
                        (this.executor = e), (this.resolve = () => {}), (this.reject = () => {});
                    }
                    execute() {
                        this.executor().then(this.resolve).catch(this.reject);
                    }
                    getResult() {
                        return new Promise((e, t) => {
                            (this.resolve = e), (this.reject = t);
                        });
                    }
                }
            },
            ebA4: function (e, t, s) {
                'use strict';
                s.d(t, 'c', function () {
                    return l;
                }),
                    s.d(t, 'b', function () {
                        return c;
                    }),
                    s.d(t, 'a', function () {
                        return h;
                    });
                var i = s('UJDs'),
                    n = s('j6JD'),
                    r = s('CDcE'),
                    a = s('fsQs'),
                    o = s('XuBa');
                const d = new TextEncoder();
                function l(e) {
                    let t = e;
                    if (Object(r.c)(t)) return (t.asset = o.a.encrypt(t.asset)), t;
                    if (Object(r.b)(t)) return t.args;
                    if ('function' == typeof t)
                        try {
                            t = e();
                        } catch (s) {
                            t = t.toString();
                        }
                    return (
                        'object' == typeof t && (t = JSON.stringify(t, Object(r.a)())),
                        'string' == typeof t && (t = t.replace(/\r\n|\n|\t|\r/g, '').toString()),
                        t
                    );
                }
                function c(e, t) {
                    let { lineMeta: s, template: o, args: c } = e;
                    if ('number' == typeof o)
                        throw new Error(
                            'Error: expected template as string. Got number?! [' + s.id1 + ':' + s.id2 + ']'
                        );
                    const h = Object(n.a)(s.tick),
                        u = [s.module, s.features.join('/')].filter((e) => e).join('|'),
                        g = (function (e, t) {
                            let s = [],
                                i = -1;
                            if (
                                (t.forEach((e, t) => {
                                    (Object(r.b)(e) || Object(r.c)(e)) && (i = t), s.push(l(e));
                                }),
                                1 === s.length &&
                                    1 === t.length &&
                                    'function' == typeof t[0] &&
                                    Array.isArray(s[0]) &&
                                    (s = [...s[0]]),
                                !e)
                            )
                                return s.join(' ');
                            const n = '{}';
                            let a = e;
                            const o = [];
                            for (
                                s.forEach((e) => {
                                    -1 !== a.search(n) ? (a = a.replace(n, e)) : o.push(e);
                                });
                                -1 !== a.search(n);

                            )
                                a = a.replace(n, '');
                            return a.concat(' ').concat(o.join(' '));
                        })(o, c),
                        m = '[' + [s.id1, s.id2].join(':') + ']',
                        p = i.a[s.level].toUpperCase(),
                        f = [`${h}__${t ? `${t.ss}.${t.ss_ln}` : '?.?'}`, p, u, g, m].join('\t'),
                        v = d.encode(f.concat('\n'));
                    return v.byteLength > a.k.file_lim ? v.slice(0, a.k.file_lim) : v;
                }
                function h(e) {
                    const t = new ArrayBuffer(8),
                        s = new DataView(t),
                        i = 4294967295,
                        n = ~~(e / i),
                        r = (e % i) - n;
                    return s.setUint32(0, n), s.setUint32(4, r), t;
                }
            },
            ez9R: function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return n;
                });
                var i = s('jDHv');
                const n = Object(i.define)('zlog-bin-encoder');
            },
            ezdo: function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('HPcM'),
                    a = s('Y58e'),
                    o = s('AH6j'),
                    d = s('fsQs'),
                    l = s('Y41u'),
                    c = s('UJDs'),
                    h = s('PLj1'),
                    u = s('jGDt'),
                    g = s('KRcn'),
                    m = s('7FSS');
                const p = null === globalThis || void 0 === globalThis ? void 0 : globalThis.performance;
                let f =
                    Object(n.injectable)()(
                        (i =
                            (function (e, t) {
                                return Object(n.inject)(u.a)(e, void 0, 0);
                            })(
                                (i =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (i =
                                            Reflect.metadata('design:paramtypes', [void 0 === u.a ? Object : u.a])(
                                                (i = class extends o.b {
                                                    constructor(e) {
                                                        super(),
                                                            (this._session = e),
                                                            (this._data = []),
                                                            (this._lastPing = 0),
                                                            (this._isSessionLineReady = !1),
                                                            (this.add = (e) => {
                                                                this._data.push(e),
                                                                    p.now() - this._lastPing >= d.l &&
                                                                        ((this._lastPing = p.now()),
                                                                        this._broadcastEvent(
                                                                            l.c.LogBucketRequestFlush
                                                                        )),
                                                                    this._data.length > 5e4 &&
                                                                        m.a.error(
                                                                            `[ZLL]: bucket size high: ${this._data.length}`
                                                                        );
                                                            }),
                                                            (this._broadcastEvent = (e, t) => {
                                                                switch (e) {
                                                                    case l.c.LogBucketRequestFlush:
                                                                    case l.c.RegLogBucketStatus:
                                                                        this.dispatchEvent(new l.b(e, t));
                                                                }
                                                            }),
                                                            this.recordSession();
                                                    }
                                                    get(e) {
                                                        return (
                                                            void 0 === e && (e = d.i),
                                                            this._isSessionLineReady ||
                                                                m.a.error(
                                                                    '[ZLL]: session line not ready. get() returns 0 untils it is ready'
                                                                ),
                                                            this._isSessionLineReady ? this._data.slice(0, e) : []
                                                        );
                                                    }
                                                    removeFirst(e) {
                                                        void 0 === e && (e = 1), this._data.splice(0, e);
                                                    }
                                                    getAll() {
                                                        return this._isSessionLineReady ? this._data : [];
                                                    }
                                                    size() {
                                                        return this._data.length;
                                                    }
                                                    recordSession() {
                                                        const e = this._session.getSession();
                                                        const t = `zlgvers:${e.zlgv} ps:${e.process} build:${e.env}-${e.buildType} pversion:${e.pversion} avers:undefined bhash:${e.build}`,
                                                            s = {
                                                                lineMeta: {
                                                                    type: 'info',
                                                                    module: 'Session'.toUpperCase(),
                                                                    features: [''],
                                                                    level: c.b.info,
                                                                    id1: 0,
                                                                    id2: 0,
                                                                    tick: this._session.getProcessStartTime(),
                                                                },
                                                                template: '',
                                                                args: [t],
                                                            };
                                                        this._data.unshift(s), (this._isSessionLineReady = !0);
                                                    }
                                                })
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                var v;
                n.ModuleContainer.registerSingleton(r.a, f);
                let b =
                    Object(n.injectable)()(
                        (v = class extends o.b {
                            constructor() {
                                super(...arguments), (this._data = []);
                            }
                            removeFirst(e) {
                                void 0 === e && (e = 1), this._data.splice(0, e);
                            }
                            add(e) {
                                this._data.push(e), this._broadcastEvent(l.c.LogBucketRequestFlush);
                            }
                            get(e) {
                                const t = this._data.slice(0, e);
                                return (this._data = this._data.slice(e)), t;
                            }
                            getAll() {
                                return this._data;
                            }
                            size() {
                                return this._data.length;
                            }
                            _broadcastEvent(e, t) {
                                switch (e) {
                                    case l.c.LogBucketRequestFlush:
                                    case l.c.SentryLogBucketStatus:
                                        this.dispatchEvent(new l.b(e, t));
                                }
                            }
                        })
                    ) || v;
                n.ModuleContainer.registerSingleton(r.b, b);
                const y = Object(n.define)('zlogger-validator');
                var I;
                let _ =
                    Object(n.injectable)()(
                        (I =
                            (function (e, t) {
                                return Object(n.inject)(a.a)(e, void 0, 0);
                            })(
                                (I =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (I =
                                            Reflect.metadata('design:paramtypes', [void 0 === a.a ? Object : a.a])(
                                                (I = class {
                                                    constructor(e) {
                                                        (this.config = e),
                                                            (this.DevOrStagingLevelConfig = {
                                                                [c.b.info]: !0,
                                                                [c.b.error]: !0,
                                                                [c.b.warn]: !0,
                                                                [c.b.debug]: !0,
                                                                [c.b.critical]: !0,
                                                            }),
                                                            (this.ProdLevelConfig = {
                                                                [c.b.info]: !0,
                                                                [c.b.error]: !0,
                                                                [c.b.warn]: !0,
                                                                [c.b.debug]: !1,
                                                                [c.b.critical]: !0,
                                                            }),
                                                            (this.DevOrStagingTransConfig = {
                                                                [c.b.info]: { toFile: !0, toConsole: !0 },
                                                                [c.b.error]: { toFile: !0, toConsole: !0 },
                                                                [c.b.warn]: { toFile: !0, toConsole: !0 },
                                                                [c.b.debug]: { toFile: !0, toConsole: !0 },
                                                                [c.b.critical]: { toFile: !0, toConsole: !0 },
                                                            }),
                                                            (this.ProdTransConfig = {
                                                                [c.b.info]: { toFile: !0, toConsole: !0 },
                                                                [c.b.error]: { toFile: !0, toConsole: !0 },
                                                                [c.b.warn]: { toFile: !1, toConsole: !1 },
                                                                [c.b.debug]: { toFile: !1, toConsole: !1 },
                                                                [c.b.critical]: { toFile: !0, toConsole: !0 },
                                                            }),
                                                            (this._ProcessBlacklist = []),
                                                            d.n && m.a.log('zlogger validator init');
                                                    }
                                                    validateLog(e, t, s, i) {
                                                        if (this._isBlackedlisted(e)) return !1;
                                                        switch (e) {
                                                            case h.b.Main:
                                                                return this._validateNoConfig(t, s, i);
                                                            case h.b.Web:
                                                            case h.b.Login:
                                                            case h.b.Photo:
                                                            case h.b.SharedWorker:
                                                            case h.b.Render:
                                                                return this._validateUsingConfig(t, s, i);
                                                            default:
                                                                return this._validateNoConfig(t, s, i);
                                                        }
                                                    }
                                                    _validateUsingConfig(e, t, s) {
                                                        const i = !!this.config && this.config.get('stagingAccount'),
                                                            n = !!this.config && this.config.get('adminMode');
                                                        return (
                                                            (!0 !== (null == s ? void 0 : s.stagingOnly) ||
                                                                !1 !== i ||
                                                                !1 != !n) &&
                                                            (n || i
                                                                ? this.DevOrStagingLevelConfig[e] &&
                                                                  this.DevOrStagingTransConfig[e][t]
                                                                : this.ProdLevelConfig[e] && this.ProdTransConfig[e][t])
                                                        );
                                                    }
                                                    _validateNoConfig(e, t, s) {
                                                        return this.ProdLevelConfig[e] && this.ProdTransConfig[e][t];
                                                    }
                                                    _isBlackedlisted(e) {
                                                        var t;
                                                        return !!(
                                                            e === h.b.Embed ||
                                                            (this.config &&
                                                                !0 ===
                                                                    (null === (t = this.config) || void 0 === t
                                                                        ? void 0
                                                                        : t.get('adminConfig.offLog'))) ||
                                                            this._ProcessBlacklist.includes(e)
                                                        );
                                                    }
                                                })
                                            ) || I)
                                    ) || I)
                            ) || I)
                    ) || I;
                n.ModuleContainer.register(y, _);
                const M = Object(n.define)('zsentry-log-trans'),
                    C = Object(n.define)('zfile-log-trans'),
                    T = Object(n.define)('zconsole-log-trans');
                var O,
                    E,
                    S,
                    w = s('W8fB');
                let D =
                        Object(n.injectable)()(
                            (O =
                                (function (e, t) {
                                    return Object(n.inject)(r.b)(e, void 0, 0);
                                })(
                                    (O =
                                        Reflect.metadata(
                                            'design:type',
                                            Function
                                        )(
                                            (O =
                                                Reflect.metadata('design:paramtypes', [void 0 === r.b ? Object : r.b])(
                                                    (O = class {
                                                        constructor(e) {
                                                            this.sentryBucket = e;
                                                        }
                                                        transport(e) {
                                                            throw new Error('Method not implemented.');
                                                        }
                                                    })
                                                ) || O)
                                        ) || O)
                                ) || O)
                        ) || O,
                    L =
                        Object(n.injectable)()(
                            (E =
                                (function (e, t) {
                                    return Object(n.inject)(r.a)(e, void 0, 0);
                                })(
                                    (E =
                                        (function (e, t) {
                                            return Object(n.inject)(y)(e, void 0, 1);
                                        })(
                                            (E =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (E =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === r.a ? Object : r.a,
                                                            void 0 === y ? Object : y,
                                                        ])(
                                                            (E = class {
                                                                constructor(e, t) {
                                                                    (this.regularBucket = e),
                                                                        (this.validator = t),
                                                                        (this._currentProcess = void 0),
                                                                        (this._currentProcess = Object(g.a)());
                                                                }
                                                                transport(e) {
                                                                    this.validator.validateLog(
                                                                        this._currentProcess,
                                                                        e.lineMeta.level,
                                                                        'toFile',
                                                                        e.extras
                                                                    ) && this.regularBucket.add(e);
                                                                }
                                                            })
                                                        ) || E)
                                                ) || E)
                                        ) || E)
                                ) || E)
                        ) || E,
                    F =
                        Object(n.injectable)()(
                            (S =
                                (function (e, t) {
                                    return Object(n.inject)(y)(e, void 0, 0);
                                })(
                                    (S =
                                        (function (e, t) {
                                            return Object(n.inject)(w.a)(e, void 0, 1);
                                        })(
                                            (S =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (S =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === y ? Object : y,
                                                            void 0 === w.a ? Object : w.a,
                                                        ])(
                                                            (S = class {
                                                                constructor(e, t) {
                                                                    (this.validator = e),
                                                                        (this.consoleWriter = t),
                                                                        (this._currentProcess = void 0),
                                                                        (this._currentProcess = Object(g.a)());
                                                                }
                                                                transport(e) {
                                                                    this.validator.validateLog(
                                                                        this._currentProcess,
                                                                        e.lineMeta.level,
                                                                        'toConsole',
                                                                        e.extras
                                                                    ) && this.consoleWriter.write(e);
                                                                }
                                                            })
                                                        ) || S)
                                                ) || S)
                                        ) || S)
                                ) || S)
                        ) || S;
                n.ModuleContainer.registerSingleton(C, L),
                    n.ModuleContainer.registerSingleton(M, D),
                    n.ModuleContainer.registerSingleton(T, F);
                var R = s('XB6V');
                const A = ['info', 'warn', 'debug', 'error', 'critical'],
                    P = ['', 'F', 'C', 'T', 'FT', 'CT'];
                function N() {
                    let e = 0;
                    const t = {},
                        s = {};
                    return (
                        A.forEach((i) => {
                            P.forEach((n) => {
                                '' === n
                                    ? ((t[e] = `z${i}A`), (s[`z${i}A`] = e), (e += 1))
                                    : 'T' === n
                                    ? ((t[e] = `z${i}AT`), (s[`z${i}AT`] = e), (e += 1))
                                    : ((t[e] = `z${i}${n}`), (s[`z${i}${n}`] = e), (e += 1));
                            });
                        }),
                        { EnumeratedLevels: t, ReversedEnumeratedLevels: s }
                    );
                }
                Object.freeze(P), Object.freeze(A);
                const j = N().EnumeratedLevels,
                    U = N().ReversedEnumeratedLevels;
                Object.freeze(j), Object.freeze(U);
                var B,
                    k = s('h0S/');
                let G =
                    Object(n.injectable)()(
                        (B =
                            (function (e, t) {
                                return Object(n.inject)(C)(e, void 0, 0);
                            })(
                                (B =
                                    (function (e, t) {
                                        return Object(n.inject)(M)(e, void 0, 1);
                                    })(
                                        (B =
                                            (function (e, t) {
                                                return Object(n.inject)(T)(e, void 0, 2);
                                            })(
                                                (B =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (B =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === C ? Object : C,
                                                                void 0 === M ? Object : M,
                                                                void 0 === T ? Object : T,
                                                            ])(
                                                                (B = class extends class {} {
                                                                    constructor(e, t, s) {
                                                                        super(),
                                                                            (this.fileTransporter = e),
                                                                            (this.sentryTransporter = t),
                                                                            (this.consoleTransporter = s),
                                                                            (this._instanceMap = new Map());
                                                                    }
                                                                    createZLogger(e, t, s) {
                                                                        void 0 === t && (t = []);
                                                                        const i = `${e}:${t.join(':')}`,
                                                                            r = this._instanceMap.get(i);
                                                                        var a, o, d, l, h, g, p, f, v, b, y;
                                                                        if (
                                                                            r &&
                                                                            (null == s ? void 0 : s.trans) ===
                                                                                (null === (a = r.config) || void 0 === a
                                                                                    ? void 0
                                                                                    : a.trans) &&
                                                                            (null == s ||
                                                                            null === (o = s.trans) ||
                                                                            void 0 === o
                                                                                ? void 0
                                                                                : o.file) ===
                                                                                (null === (d = r.config) ||
                                                                                void 0 === d ||
                                                                                null === (l = d.trans) ||
                                                                                void 0 === l
                                                                                    ? void 0
                                                                                    : l.file) &&
                                                                            (null == s ||
                                                                            null === (h = s.trans) ||
                                                                            void 0 === h
                                                                                ? void 0
                                                                                : h.console) ===
                                                                                (null === (g = r.config) ||
                                                                                void 0 === g ||
                                                                                null === (p = g.trans) ||
                                                                                void 0 === p
                                                                                    ? void 0
                                                                                    : p.console) &&
                                                                            (null == s ||
                                                                            null === (f = s.trans) ||
                                                                            void 0 === f
                                                                                ? void 0
                                                                                : f.sentry) ===
                                                                                (null === (v = r.config) ||
                                                                                void 0 === v ||
                                                                                null === (b = v.trans) ||
                                                                                void 0 === b
                                                                                    ? void 0
                                                                                    : b.sentry) &&
                                                                            (null == s ? void 0 : s.stagingOnly) ===
                                                                                (null === (y = r.config) || void 0 === y
                                                                                    ? void 0
                                                                                    : y.stagingOnly)
                                                                        )
                                                                            return r.logger;
                                                                        let I, _, M;
                                                                        (void 0 === (null == s ? void 0 : s.trans) ||
                                                                            (null != s && s.trans.file)) &&
                                                                            (I = this.fileTransporter),
                                                                            (void 0 ===
                                                                                (null == s ? void 0 : s.trans) ||
                                                                                (null != s && s.trans.console)) &&
                                                                                (_ = this.consoleTransporter),
                                                                            (void 0 ===
                                                                                (null == s ? void 0 : s.trans) ||
                                                                                (null != s && s.trans.sentry)) &&
                                                                                (M = this.sentryTransporter);
                                                                        const C = class {
                                                                            constructor(e, t, s) {
                                                                                var i = this;
                                                                                (this.module = e),
                                                                                    (this.features = t),
                                                                                    (this.config = s),
                                                                                    (this.enabled = !0),
                                                                                    (this.Sentry = null),
                                                                                    (this.tempOffConfig = {
                                                                                        toConsole: !1,
                                                                                        toFile: !1,
                                                                                        toSentry: !1,
                                                                                    }),
                                                                                    (this.zsentry = function () {
                                                                                        if (i.Sentry) {
                                                                                            for (
                                                                                                var e =
                                                                                                        arguments.length,
                                                                                                    t = new Array(e),
                                                                                                    s = 0;
                                                                                                s < e;
                                                                                                s++
                                                                                            )
                                                                                                t[s] = arguments[s];
                                                                                            i.Sentry.captureException(
                                                                                                new Error(t.join(' '))
                                                                                            );
                                                                                        }
                                                                                    }),
                                                                                    (this.zfatal = function () {}),
                                                                                    (this.zsymb = function (e, t, s) {
                                                                                        if (!1 === i.enabled) return;
                                                                                        const n = j[e];
                                                                                        for (
                                                                                            var r = arguments.length,
                                                                                                a = new Array(
                                                                                                    r > 3 ? r - 3 : 0
                                                                                                ),
                                                                                                o = 3;
                                                                                            o < r;
                                                                                            o++
                                                                                        )
                                                                                            a[o - 3] = arguments[o];
                                                                                        if (n.includes('zcritical'))
                                                                                            return void (
                                                                                                i.Sentry &&
                                                                                                i.Sentry.captureException(
                                                                                                    new Error(
                                                                                                        a.join(' ')
                                                                                                    )
                                                                                                )
                                                                                            );
                                                                                        const d = i._getLevel(n);
                                                                                        if (n.endsWith('A'))
                                                                                            i._transport({
                                                                                                tick: Date.now(),
                                                                                                level: d,
                                                                                                id1: t,
                                                                                                id2: s,
                                                                                                templ: null,
                                                                                                args: a,
                                                                                                target: 'ConsoleFile',
                                                                                            });
                                                                                        else if (n.endsWith('AT')) {
                                                                                            const [e, ...n] = a;
                                                                                            i._transport({
                                                                                                tick: Date.now(),
                                                                                                level: d,
                                                                                                id1: t,
                                                                                                id2: s,
                                                                                                templ: e,
                                                                                                args: n,
                                                                                                target: 'ConsoleFile',
                                                                                            });
                                                                                        } else if (
                                                                                            n.endsWith('C') ||
                                                                                            n.endsWith('F')
                                                                                        )
                                                                                            i._transport({
                                                                                                tick: Date.now(),
                                                                                                level: d,
                                                                                                id1: t,
                                                                                                id2: s,
                                                                                                templ: null,
                                                                                                args: a,
                                                                                                target: n.endsWith('C')
                                                                                                    ? 'toConsole'
                                                                                                    : 'toFile',
                                                                                            });
                                                                                        else if (
                                                                                            n.endsWith('CT') ||
                                                                                            n.endsWith('FT')
                                                                                        ) {
                                                                                            const [e, ...r] = a;
                                                                                            i._transport({
                                                                                                tick: Date.now(),
                                                                                                level: d,
                                                                                                id1: t,
                                                                                                id2: s,
                                                                                                templ: e,
                                                                                                args: r,
                                                                                                target: n.endsWith('CT')
                                                                                                    ? 'toConsole'
                                                                                                    : 'toFile',
                                                                                            });
                                                                                        }
                                                                                    }),
                                                                                    (this._transport = (e) => {
                                                                                        let {
                                                                                            tick: t,
                                                                                            level: s,
                                                                                            id1: i,
                                                                                            id2: r,
                                                                                            templ: a,
                                                                                            args: o,
                                                                                            target: d,
                                                                                        } = e;
                                                                                        const l = () => ({
                                                                                                lineMeta: {
                                                                                                    type: 'normal',
                                                                                                    module: this.module,
                                                                                                    features:
                                                                                                        this.features,
                                                                                                    id1: i,
                                                                                                    id2: r,
                                                                                                    level: s,
                                                                                                    tick: t,
                                                                                                },
                                                                                                template: a,
                                                                                                args: o,
                                                                                                extras: {
                                                                                                    stagingOnly:
                                                                                                        this.config
                                                                                                            .stagingOnly,
                                                                                                },
                                                                                            }),
                                                                                            c =
                                                                                                n.ModuleContainer.resolve(
                                                                                                    u.a
                                                                                                );
                                                                                        var h, g;
                                                                                        if ('ConsoleFile' === d)
                                                                                            !1 ===
                                                                                                this.tempOffConfig
                                                                                                    .toConsole &&
                                                                                                c.isEnabledConsole() &&
                                                                                                (null ===
                                                                                                    (h =
                                                                                                        this.config
                                                                                                            .toConsole) ||
                                                                                                    void 0 === h ||
                                                                                                    h.transport(l())),
                                                                                                !1 ===
                                                                                                    this.tempOffConfig
                                                                                                        .toFile &&
                                                                                                    (null ===
                                                                                                        (g =
                                                                                                            this.config
                                                                                                                .toFile) ||
                                                                                                        void 0 === g ||
                                                                                                        g.transport(
                                                                                                            l()
                                                                                                        ));
                                                                                        else if (
                                                                                            !1 === this.tempOffConfig[d]
                                                                                        ) {
                                                                                            var m;
                                                                                            if (
                                                                                                'toConsole' === d &&
                                                                                                !c.isEnabledConsole()
                                                                                            )
                                                                                                return;
                                                                                            null ===
                                                                                                (m = this.config[d]) ||
                                                                                                void 0 === m ||
                                                                                                m.transport(l());
                                                                                        }
                                                                                    }),
                                                                                    (this._getLevel = (e) => {
                                                                                        let t = e;
                                                                                        e.endsWith('A')
                                                                                            ? (t = e.replace('A', ''))
                                                                                            : e.endsWith('AT')
                                                                                            ? (t = e.replace('AT', ''))
                                                                                            : e.endsWith('C')
                                                                                            ? (t = e.replace('C', ''))
                                                                                            : e.endsWith('CT')
                                                                                            ? (t = e.replace('CT', ''))
                                                                                            : e.endsWith('F')
                                                                                            ? (t = e.replace('F', ''))
                                                                                            : e.endsWith('FT') &&
                                                                                              (t = e.replace('FT', ''));
                                                                                        let s = c.b.info;
                                                                                        switch (t) {
                                                                                            case 'zinfo':
                                                                                                s = c.b.info;
                                                                                                break;
                                                                                            case 'zwarn':
                                                                                                s = c.b.warn;
                                                                                                break;
                                                                                            case 'zerror':
                                                                                                s = c.b.error;
                                                                                                break;
                                                                                            case 'zdebug':
                                                                                                s = c.b.debug;
                                                                                        }
                                                                                        return s;
                                                                                    }),
                                                                                    (this.zinfo = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zinfoC = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zinfoF = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zwarn = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zwarnC = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zwarnF = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zerror = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zerrorC = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zerrorF = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zdebug = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zdebugC = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.zdebugF = function () {
                                                                                        throw new Error(
                                                                                            'babel-plugin-transform-zlog failed: zlog malfunction'
                                                                                        );
                                                                                    }),
                                                                                    (this.enabled =
                                                                                        !0 ===
                                                                                        (function (e, t, s) {
                                                                                            if (
                                                                                                (void 0 === s &&
                                                                                                    (s = !1),
                                                                                                !k.a.includes(e) &&
                                                                                                    !1 === k.c[e])
                                                                                            )
                                                                                                return (
                                                                                                    m.a.error(
                                                                                                        'LogModeController:',
                                                                                                        [e, t],
                                                                                                        `module ${e} is not whitelisted`
                                                                                                    ),
                                                                                                    !1
                                                                                                );
                                                                                            let i = !1;
                                                                                            for (const n of t) {
                                                                                                const r =
                                                                                                    k.a.includes(n) ||
                                                                                                    !(!1 === k.c[e]);
                                                                                                if (
                                                                                                    (s && !r) ||
                                                                                                    (!r && !i)
                                                                                                )
                                                                                                    return !1;
                                                                                                if (r) {
                                                                                                    if (((i = !0), !s))
                                                                                                        return !0;
                                                                                                } else if (!i)
                                                                                                    return (
                                                                                                        m.a.error(
                                                                                                            'LogModeController:',
                                                                                                            [e, t],
                                                                                                            `feat ${n} is not whitelisted and requireAllFeatOn:${s}`
                                                                                                        ),
                                                                                                        !1
                                                                                                    );
                                                                                            }
                                                                                            return !0;
                                                                                        })(this.module, this.features));
                                                                            }
                                                                            disableFile() {
                                                                                this.tempOffConfig.toFile = !0;
                                                                            }
                                                                            enableFile() {
                                                                                this.tempOffConfig.toFile = !1;
                                                                            }
                                                                            disableConsole() {
                                                                                this.tempOffConfig.toConsole = !0;
                                                                            }
                                                                            enableConsole() {
                                                                                this.tempOffConfig.toConsole = !1;
                                                                            }
                                                                            static create(e, t, s) {
                                                                                return new this(e, t, s);
                                                                            }
                                                                            pause() {
                                                                                this.enabled = !0;
                                                                            }
                                                                            resume() {
                                                                                this.enabled = !1;
                                                                            }
                                                                            specialTransport(e) {
                                                                                this._transport(e);
                                                                            }
                                                                        }.create(e, t, {
                                                                            toFile: I,
                                                                            toConsole: _,
                                                                            toSentry: M,
                                                                            stagingOnly:
                                                                                null == s ? void 0 : s.stagingOnly,
                                                                        });
                                                                        return (
                                                                            this._instanceMap.set(i, {
                                                                                logger: C,
                                                                                config: s,
                                                                            }),
                                                                            C
                                                                        );
                                                                    }
                                                                    createZLoggerStaging(e, t, s) {
                                                                        return (
                                                                            t.push(k.b.staging),
                                                                            this.createZLogger(e, t, {
                                                                                trans: s,
                                                                                stagingOnly: !0,
                                                                            })
                                                                        );
                                                                    }
                                                                })
                                                            ) || B)
                                                    ) || B)
                                            ) || B)
                                    ) || B)
                            ) || B)
                    ) || B;
                n.ModuleContainer.register(R.a, G);
                var x = s('yBqK'),
                    z = s('ebA4');
                var V,
                    $ = s('CDcE');
                let W =
                    Object(n.injectable)()(
                        (V =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (V =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (V = class extends (
                                            class {
                                                constructor() {
                                                    this._TextEncoder = new TextEncoder();
                                                }
                                                encodeUi8(e, t, s) {
                                                    return e.setUint8(t, s), t + d.b.ui8;
                                                }
                                                encodeUi16(e, t, s) {
                                                    return e.setUint16(t, s), t + d.b.ui16;
                                                }
                                                encodeUi32(e, t, s) {
                                                    return e.setUint32(t, s), t + d.b.ui32;
                                                }
                                                encodeFloat32(e, t, s) {
                                                    return e.setFloat32(t, s), t + d.b.float32;
                                                }
                                                encodeFloat64(e, t, s) {
                                                    return e.setFloat64(t, s), t + d.b.float64;
                                                }
                                                encodeBigInt64(e, t, s) {
                                                    const i = Object(z.a)(s),
                                                        n = new Uint8Array(i);
                                                    for (let r = 0; r < n.byteLength; r++)
                                                        t = this.encodeUi8(e, t, n[r]);
                                                    return t;
                                                }
                                                encodeTotalSize(e, t, s) {
                                                    return this.encodeUi16(e, t, s);
                                                }
                                                encodeTotalSizeEnd(e, t) {
                                                    return this.encodeUi16(e, t, t + d.b.ui16);
                                                }
                                                encodeTick(e, t, s) {
                                                    const i = Object(z.a)(s),
                                                        n = new Uint8Array(i);
                                                    return this.copyCache(e, t, n);
                                                }
                                                encodeVers(e, t, s) {
                                                    if (s > 32767)
                                                        throw new Error(
                                                            '[BinEncoder] error: encoding verion is TOO BIG!'
                                                        );
                                                    return this.encodeUi16(e, t, s);
                                                }
                                                encodeEncoderVers(e, t, s) {
                                                    if (s > 255)
                                                        throw new Error(
                                                            '[BinEncoder] error: encoding level is TOO BIG!'
                                                        );
                                                    return this.encodeUi8(e, t, s);
                                                }
                                                encodeLevel(e, t, s) {
                                                    if (s > 255)
                                                        throw new Error(
                                                            '[BinEncoder] error: encoding level is TOO BIG!'
                                                        );
                                                    return this.encodeUi8(e, t, s);
                                                }
                                                encodeHeaderNum(e, t, s) {
                                                    if (s > 255)
                                                        throw new Error(
                                                            '[BinEncoder] error: encoding numOfHeader is TOO BIG!'
                                                        );
                                                    return this.encodeUi8(e, t, s);
                                                }
                                                encodeStringOnly(e, t, s) {
                                                    const i = this._TextEncoder.encode(s),
                                                        n = i.byteLength;
                                                    return (t = this.encodeUi8(e, t, n)), this.copyCache(e, t, i);
                                                }
                                                copyCache(e, t, s) {
                                                    for (let i = 0; i < s.byteLength; i++)
                                                        t = this.encodeUi8(e, t, s[i]);
                                                    return t;
                                                }
                                            }
                                        ) {
                                            constructor() {
                                                super(),
                                                    (this.MemoryLogBatch = void 0),
                                                    (this.dv = void 0),
                                                    (this._lastOffset = 0),
                                                    (this._lastTs = 0),
                                                    (this.MemoryLogBatch = new ArrayBuffer(d.d.mem_batch_lim)),
                                                    (this.dv = new DataView(this.MemoryLogBatch));
                                            }
                                            getLastBuffer() {
                                                return this.MemoryLogBatch.slice(0, this._lastOffset);
                                            }
                                            encode(e, t, s) {
                                                try {
                                                    const { lineMeta: i, args: n } = e;
                                                    let r = 0;
                                                    r += d.b.ui16;
                                                    let a = i.tick;
                                                    a <= this._lastTs && (a = this._lastTs + 1),
                                                        (this._lastTs = a),
                                                        (r = this.encodeTick(this.dv, r, a)),
                                                        (r = this.encodeEncoderVers(this.dv, r, d.o)),
                                                        (r = this.encodeLevel(this.dv, r, i.level)),
                                                        (r = this.encodeUi16(this.dv, r, s.ss)),
                                                        (r = this.encodeUi32(this.dv, r, s.ss_ln)),
                                                        (r = this.encodeStringOnly(this.dv, r, 'woQa04sK')),
                                                        (r = this.encodeUi32(this.dv, r, t)),
                                                        (r = this.encodeUi16(this.dv, r, i.id1)),
                                                        (r = this.encodeUi16(this.dv, r, i.id2)),
                                                        (r = this._encodeArgs(r, this.dv, n));
                                                    const o = r + d.b.ui16;
                                                    return (
                                                        this.encodeTotalSize(this.dv, 0, o),
                                                        (r = this.encodeTotalSize(this.dv, r, o)),
                                                        (this._lastOffset = r),
                                                        this.MemoryLogBatch.slice(0, o)
                                                    );
                                                } catch (i) {
                                                    throw (
                                                        (m.a.error('BinEncoderImpl.encode error:', i),
                                                        new Error('BinEncoderImpl.encode error'))
                                                    );
                                                }
                                            }
                                            _allowTruncate() {
                                                const e = n.ModuleContainer.resolve(a.a),
                                                    t = (null == e ? void 0 : e.get('adminMode')) || !1,
                                                    s = e.get('stagingAccount') || !1;
                                                return !(t || s);
                                            }
                                            _encodeArgs(e, t, s) {
                                                let i = !1;
                                                const n = [];
                                                if (s.length)
                                                    for (let a of s)
                                                        'object' == typeof a && (i = Object($.b)(a) || Object($.c)(a)),
                                                            n.push(Object(z.c)(a));
                                                let r;
                                                if (
                                                    ((r =
                                                        1 === n.length &&
                                                        1 === s.length &&
                                                        Array.isArray(n[0]) &&
                                                        'function' == typeof s[0]
                                                            ? x.encode([...n[0]])
                                                            : x.encode(n)),
                                                    r.byteLength > d.d.line_hard_lim)
                                                ) {
                                                    const e = JSON.stringify(n, Object($.a)()).slice(
                                                        0,
                                                        d.d.line_hard_lim
                                                    );
                                                    r = x.encode(e);
                                                } else if (
                                                    !i &&
                                                    r.byteLength > d.d.line_soft_lim &&
                                                    this._allowTruncate()
                                                ) {
                                                    const e = JSON.stringify(n, Object($.a)()).slice(
                                                        0,
                                                        d.d.line_soft_lim
                                                    );
                                                    r = x.encode(e);
                                                }
                                                for (let a = 0; a < r.byteLength; a++) e = this.encodeUi8(t, e, r[a]);
                                                return e;
                                            }
                                        })
                                    ) || V)
                            ) || V)
                    ) || V;
                var K = s('ez9R');
                n.ModuleContainer.registerSingleton(K.a, W);
                var q = s('K8kB');
                var H,
                    Q = class {
                        constructor(e, t) {
                            void 0 === e && (e = []), void 0 === t && (t = !0), (this.tasks = e), (this.alive = t);
                        }
                        do() {
                            return this.add(...arguments);
                        }
                        add() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            return (this.tasks = this.tasks.concat(t)), this;
                        }
                        once(e) {
                            return (
                                void 0 === e && (e = !1),
                                (this.alive = !1),
                                (e && (async (e) => this.async())()) || this.sync(),
                                this
                            );
                        }
                        every(e) {
                            return this.add(() => new Promise((t) => setTimeout(t, e))), this.forever(!0);
                        }
                        forever(e) {
                            return (
                                void 0 === e && (e = !1),
                                (this.alive = !0),
                                (e && (async (e) => this.async())()) || this.sync(),
                                this
                            );
                        }
                        cancel() {
                            return (this.alive = !1), this;
                        }
                        async async() {
                            for (let e of this.tasks) await e();
                            this.alive && this.async();
                        }
                        sync() {
                            for (let e of this.tasks) e();
                            this.alive && this.sync();
                        }
                    };
                let J =
                    Object(n.injectable)()(
                        (H =
                            (function (e, t) {
                                return Object(n.inject)(r.a)(e, void 0, 0);
                            })(
                                (H =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (H =
                                            Reflect.metadata('design:paramtypes', [void 0 === r.a ? Object : r.a])(
                                                (H = class extends o.b {
                                                    constructor(e) {
                                                        super(),
                                                            (this.bucket = e),
                                                            (this.task = void 0),
                                                            (this.start = () => {
                                                                var e;
                                                                if (null !== (e = this.task) && void 0 !== e && e.alive)
                                                                    return;
                                                                this.task || (this.task = new Q());
                                                                const t = h.c[Object(g.a)()] || d.e;
                                                                this.task
                                                                    .add(() =>
                                                                        this._broadcastEvent(
                                                                            l.c.WriteSchedulerRequestFlush
                                                                        )
                                                                    )
                                                                    .every(t),
                                                                    this._listenEvents();
                                                            }),
                                                            (this.stop = () => {
                                                                this.task && this.task.cancel(), (this.task = void 0);
                                                            }),
                                                            (this._listenEvents = () => {
                                                                this.bucket.addEventListener(
                                                                    l.c.LogBucketRequestFlush,
                                                                    this._handleFlushRequestFromBucket
                                                                );
                                                            }),
                                                            (this._handleFlushRequestFromBucket = () => {
                                                                var e;
                                                                (this.task && this.task.alive) ||
                                                                    (d.n &&
                                                                        m.a.log(
                                                                            'Oopsie! Scheduler is somehow not running. Restarting...'
                                                                        ),
                                                                    null === (e = this.task) ||
                                                                        void 0 === e ||
                                                                        e.cancel(),
                                                                    (this.task = void 0),
                                                                    this.start());
                                                            });
                                                    }
                                                    _broadcastEvent(e) {
                                                        if (e === l.c.WriteSchedulerRequestFlush)
                                                            this.dispatchEvent(new l.a(e));
                                                    }
                                                })
                                            ) || H)
                                    ) || H)
                            ) || H)
                    ) || H;
                n.ModuleContainer.registerSingleton(q.a, J);
            },
            gpNb: function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('UK4g'),
                    a = s('YEoC'),
                    o = s('PmZf'),
                    d = s('rvru'),
                    l = s('PhBv'),
                    c = s('tHMN');
                let h =
                    n.ModuleContainer.injectable()(
                        (i =
                            (function (e, t) {
                                return n.ModuleContainer.inject(l.b)(e, void 0, 0);
                            })(
                                (i =
                                    (function (e, t) {
                                        return n.ModuleContainer.inject(d.a)(e, void 0, 1);
                                    })(
                                        (i =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (i =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === l.a ? Object : l.a,
                                                        void 0 === d.a ? Object : d.a,
                                                    ])(
                                                        (i = class extends c.a {
                                                            constructor(e, t) {
                                                                super(),
                                                                    (this.queryPlanner = e),
                                                                    (this.dbQos = t),
                                                                    this.queryPlanner.addEventListener(
                                                                        o.a.QueryError,
                                                                        (e) => {
                                                                            this.dispatchEvent(new o.b(e.error)),
                                                                                this.dbQos.sendDBErrorQos(e.error);
                                                                        }
                                                                    ),
                                                                    this.queryPlanner.addEventListener(
                                                                        o.a.UnexpectedError,
                                                                        (e) => {
                                                                            this.dispatchEvent(new o.d(e.error)),
                                                                                this.dbQos.sendDBErrorQos(e.error);
                                                                        }
                                                                    );
                                                            }
                                                            do(e) {
                                                                return this.queryPlanner.do(e);
                                                            }
                                                            doImmediately(e) {
                                                                return (
                                                                    'Qos' === e.database && e.trace(),
                                                                    this.queryPlanner.doImmediately(e)
                                                                );
                                                            }
                                                            deleteDatabase(e) {
                                                                return this.doImmediately({
                                                                    trace: function () {},
                                                                    type: a.d.DeleteDB,
                                                                    database: e,
                                                                    table: '',
                                                                    transaction: 0,
                                                                    priority: a.c.BLOCKING,
                                                                    retry: r.i,
                                                                    timing: {},
                                                                    meta: { error: new Error(), dead: !1, step: -1 },
                                                                });
                                                            }
                                                            deleteAllDatabases() {
                                                                return this.doImmediately({
                                                                    trace: function () {},
                                                                    type: a.d.DeleteAllDBs,
                                                                    database: '',
                                                                    table: '',
                                                                    transaction: 0,
                                                                    priority: a.c.BLOCKING,
                                                                    retry: r.i,
                                                                    timing: {},
                                                                    meta: { error: new Error(), dead: !1, step: -1 },
                                                                });
                                                            }
                                                            closeDatabase(e) {
                                                                return this.doImmediately({
                                                                    trace: function () {},
                                                                    type: a.d.CloseDB,
                                                                    database: e,
                                                                    table: '',
                                                                    transaction: 0,
                                                                    priority: a.c.BLOCKING,
                                                                    retry: r.i,
                                                                    timing: {},
                                                                    meta: { error: new Error(), dead: !1, step: -1 },
                                                                });
                                                            }
                                                            closeAllDatabases() {
                                                                return this.doImmediately({
                                                                    trace: function () {},
                                                                    type: a.d.CloseAllDBs,
                                                                    database: '',
                                                                    table: '',
                                                                    transaction: 0,
                                                                    priority: a.c.BLOCKING,
                                                                    retry: r.i,
                                                                    timing: {},
                                                                    meta: { error: new Error(), dead: !1, step: -1 },
                                                                });
                                                            }
                                                        })
                                                    ) || i)
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                n.ModuleContainer.registerSingleton(c.b, h);
            },
            hRcX: function (e, t, s) {
                'use strict';
                var i = s('VTBJ'),
                    n = s('jDHv'),
                    r = s('Uzj0');
                const a = () => {},
                    o = (() => {
                        let e = 0;
                        return () => ++e;
                    })(),
                    d = { id: 0, retry: 0, success: a, error: a, execute: a };
                function l(e, t) {
                    const s = e.length;
                    e.push(t),
                        (function (e, t, s) {
                            let i = s;
                            for (;;) {
                                const s = (i - 1) >>> 1,
                                    n = e[s];
                                if (!(void 0 !== n && h(n, t) > 0)) return;
                                (e[s] = t), (e[i] = n), (i = s);
                            }
                        })(e, t, s);
                }
                function c(e) {
                    const t = e[0];
                    if (void 0 !== t) {
                        const s = e.pop();
                        return (
                            s !== t &&
                                ((e[0] = s),
                                (function (e, t, s) {
                                    let i = s;
                                    const n = e.length;
                                    for (; i < n; ) {
                                        const s = 2 * (i + 1) - 1,
                                            n = e[s],
                                            r = s + 1,
                                            a = e[r];
                                        if (void 0 !== n && h(n, t) < 0)
                                            void 0 !== a && h(a, n) < 0
                                                ? ((e[i] = a), (e[r] = t), (i = r))
                                                : ((e[i] = n), (e[s] = t), (i = s));
                                        else {
                                            if (!(void 0 !== a && h(a, t) < 0)) return;
                                            (e[i] = a), (e[r] = t), (i = r);
                                        }
                                    }
                                })(e, s, 0)),
                            t
                        );
                    }
                    return null;
                }
                function h(e, t) {
                    const s = e.sortIndex - t.sortIndex;
                    return 0 !== s ? s : e.id - t.id;
                }
                let u;
                !(function (e) {
                    (e[(e.BLOCKING = 50)] = 'BLOCKING'),
                        (e[(e.NON_BLOCKING = 250)] = 'NON_BLOCKING'),
                        (e[(e.IDLE = 500)] = 'IDLE'),
                        (e[(e.NEVER_TIMEOUT = 1e3)] = 'NEVER_TIMEOUT');
                })(u || (u = {}));
                const g = new (class {
                        push(e, t) {
                            const s = Object(i.a)(Object(i.a)(Object(i.a)({}, d), t), {}, { id: o() });
                            e.push(s);
                        }
                        getCandidate(e) {
                            return e.shift();
                        }
                    })(),
                    m = new (class {
                        push(e, t) {
                            l(
                                e,
                                Object(i.a)(
                                    Object(i.a)(Object(i.a)({}, d), t),
                                    {},
                                    { sortIndex: Date.now() + (t.deadline || u.NON_BLOCKING), id: o() }
                                )
                            );
                        }
                        getCandidate(e) {
                            return c(e);
                        }
                    })();
                class p {
                    constructor(e, t) {
                        void 0 === e && (e = g),
                            void 0 === t && (t = !0),
                            (this._queue = void 0),
                            (this._strategy = void 0),
                            (this._stopped = void 0),
                            (this._inactive = void 0),
                            (this._queue = []),
                            (this._strategy = e),
                            (this._stopped = !t),
                            (this._inactive = !0);
                    }
                    run(e) {
                        this._strategy.push(this._queue, e), this._inactive && this._run();
                    }
                    start() {
                        (this._stopped = !1),
                            setTimeout(() => {
                                this._run();
                            });
                    }
                    stop() {
                        (this._stopped = !0), (this._inactive = !0);
                    }
                    async _run() {
                        if (this._stopped) return void (this._inactive = !0);
                        const e = this._strategy.getCandidate(this._queue);
                        if (e)
                            try {
                                const s = await e.execute();
                                try {
                                    null == e || e.success(s);
                                } catch (t) {}
                                setTimeout(() => {
                                    this._run();
                                });
                            } catch (t) {
                                e.retry > 0 ? (e.retry--, this.run(e)) : null == e || e.error(t),
                                    setTimeout(() => {
                                        this._run();
                                    });
                            }
                        else this._inactive = !0;
                    }
                }
                new p(m);
                var f = s('Mgpg'),
                    v = s('YEoC'),
                    b = s('DI/x'),
                    y = s('PmZf'),
                    I = s('YZti'),
                    _ = s('1UUk'),
                    M = s('MRjZ'),
                    C = s('UJ0r'),
                    T = s('teaq'),
                    O = s('Abbu'),
                    E = s('PhBv'),
                    S = s('rkiK'),
                    w = s('wH4e');
                const D = new Set(['Qos']);
                var L;
                let F =
                    n.ModuleContainer.injectable()(
                        (L =
                            (function (e, t) {
                                return n.ModuleContainer.inject(C.b)(e, void 0, 0);
                            })(
                                (L =
                                    (function (e, t) {
                                        return n.ModuleContainer.inject(T.b)(e, void 0, 1);
                                    })(
                                        (L =
                                            (function (e, t) {
                                                return n.ModuleContainer.inject(f.ZLoggerFactory)(e, void 0, 2);
                                            })(
                                                (L =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (L =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === C.a ? Object : C.a,
                                                                void 0 === T.b ? Object : T.b,
                                                                void 0 === f.ZLoggerFactory ? Object : f.ZLoggerFactory,
                                                            ])(
                                                                (L = class extends E.a {
                                                                    constructor(e, t, s) {
                                                                        super(),
                                                                            (this.adapterManager = e),
                                                                            (this.configManager = t),
                                                                            (this.scheduler = void 0),
                                                                            (this.pendingQueries = []),
                                                                            (this.session = void 0),
                                                                            (this.logger = void 0),
                                                                            (this.adapterContainers = new Map()),
                                                                            (this.idCounter = 0),
                                                                            (this.dbSchema = void 0),
                                                                            (this.scheduler = new p(g, !1)),
                                                                            (this.logger = s.createZLogger('db', [
                                                                                'host',
                                                                                'planner',
                                                                            ])),
                                                                            this.adapterManager.addEventListener(
                                                                                y.a.UnexpectedError,
                                                                                (e) => {
                                                                                    this.dispatchEvent(
                                                                                        new y.d(e.error)
                                                                                    );
                                                                                }
                                                                            );
                                                                    }
                                                                    install(e) {
                                                                        this.dbSchema = e;
                                                                    }
                                                                    start() {
                                                                        this.scheduler.start();
                                                                        const e = n.ModuleContainer.resolve(_.b),
                                                                            t = (e) => {
                                                                                this.session = e;
                                                                                const t = this.pendingQueries;
                                                                                (this.pendingQueries = []),
                                                                                    t.forEach((e) => {
                                                                                        this.enqueue(e, {
                                                                                            immediately: !1,
                                                                                        });
                                                                                    });
                                                                            };
                                                                        e.session && t(e.session),
                                                                            e.addEventListener(
                                                                                y.a.SessionChange,
                                                                                (e) => {
                                                                                    t(e.session),
                                                                                        this.adapterContainers.clear();
                                                                                }
                                                                            );
                                                                    }
                                                                    stop() {
                                                                        this.scheduler.stop(),
                                                                            this.logger.zsymb(6, 10291, 3e4, 'Stop!');
                                                                    }
                                                                    do(e) {
                                                                        const t = (function (e) {
                                                                            if (D.has(e.database)) return;
                                                                            const t = S.e.start(
                                                                                    S.b.query_resolution_time
                                                                                ),
                                                                                s = {
                                                                                    method: w.QueryUtils.getTypeName(
                                                                                        e.type
                                                                                    ),
                                                                                    database: e.database,
                                                                                    table: e.table,
                                                                                    transaction: e.transaction,
                                                                                };
                                                                            return t.pushInfo(s), t;
                                                                        })(e);
                                                                        return new Promise((t, s) => {
                                                                            this.enqueue(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, e),
                                                                                    {},
                                                                                    {
                                                                                        deferrer: {
                                                                                            resolve: t,
                                                                                            reject: s,
                                                                                        },
                                                                                    }
                                                                                ),
                                                                                { immediately: O.a.isInTransaction(e) }
                                                                            );
                                                                        }).finally(() => {
                                                                            null == t || t.end();
                                                                        });
                                                                    }
                                                                    doImmediately(e) {
                                                                        return new Promise((t, s) => {
                                                                            this.enqueue(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, e),
                                                                                    {},
                                                                                    {
                                                                                        deferrer: {
                                                                                            resolve: t,
                                                                                            reject: s,
                                                                                        },
                                                                                    }
                                                                                ),
                                                                                { immediately: !0 }
                                                                            );
                                                                        });
                                                                    }
                                                                    enqueue(e, t) {
                                                                        (e.meta.step = 0),
                                                                            (e.meta.id = this.idCounter++),
                                                                            this.scheduler.run({
                                                                                immediately: t.immediately,
                                                                                execute: () => {
                                                                                    try {
                                                                                        return this.execute(e);
                                                                                    } catch (t) {
                                                                                        if (0 !== e.retry)
                                                                                            throw ((e.retry -= 1), t);
                                                                                        {
                                                                                            const s =
                                                                                                this.createErrorForQuery(
                                                                                                    e,
                                                                                                    t
                                                                                                );
                                                                                            this.logger.zsymb(
                                                                                                18,
                                                                                                10291,
                                                                                                30001,
                                                                                                () => [s]
                                                                                            ),
                                                                                                this.dispatchEvent(
                                                                                                    new y.d(
                                                                                                        new b.i(
                                                                                                            s.message
                                                                                                        )
                                                                                                    )
                                                                                                );
                                                                                        }
                                                                                    }
                                                                                },
                                                                                retry: e.retry,
                                                                            });
                                                                    }
                                                                    trapQueryError(e) {
                                                                        let t = null,
                                                                            s = () => {};
                                                                        this.shouldTrapTimeoutQuery(e) &&
                                                                            ((t = setTimeout(() => {
                                                                                var t, s;
                                                                                const i =
                                                                                        (null === (t = e.params) ||
                                                                                        void 0 === t ||
                                                                                        null === (s = t.values) ||
                                                                                        void 0 === s
                                                                                            ? void 0
                                                                                            : s.length) || void 0,
                                                                                    n = void 0 !== i ? [i] : [];
                                                                                e.deferrer.reject(new b.t(n));
                                                                            }, e.meta.timeout)),
                                                                            (e.meta.timer = t),
                                                                            (s = () => {
                                                                                clearTimeout(t);
                                                                            }));
                                                                        const i = e.deferrer;
                                                                        e.deferrer = {
                                                                            resolve: (e) => {
                                                                                s(), i.resolve(e);
                                                                            },
                                                                            reject: (t) => {
                                                                                s();
                                                                                const n = this.createErrorForQuery(
                                                                                    e,
                                                                                    t
                                                                                );
                                                                                this.dispatchEvent(new y.b(n)),
                                                                                    i.reject(n);
                                                                            },
                                                                        };
                                                                    }
                                                                    createErrorForQuery(e, t) {
                                                                        const s = {
                                                                                method: I.b.getTypeName(e.type),
                                                                                database: e.database,
                                                                                table: e.table,
                                                                                step: e.meta.step,
                                                                                partition: e.meta.partitionKey,
                                                                                trans: e.transaction,
                                                                                deadline: e.meta.timeout,
                                                                            },
                                                                            i = Object(M.a)(s);
                                                                        let n = null;
                                                                        const r = ((e) => {
                                                                            const t = e.stack;
                                                                            if (!t) return '';
                                                                            const s =
                                                                                `${e.name}` +
                                                                                (e.message ? `: ${e.message}` : '') +
                                                                                '\n';
                                                                            return t.startsWith(s)
                                                                                ? t.slice(s.length)
                                                                                : t;
                                                                        })(e.meta.error);
                                                                        if (t)
                                                                            if (t instanceof Error) {
                                                                                const s = t.message + ` (${i})`;
                                                                                t instanceof DOMException
                                                                                    ? ((n = new b.c(s, t.name, t.code)),
                                                                                      n.setStack(r))
                                                                                    : t instanceof b.e
                                                                                    ? ((n = t),
                                                                                      (n.message = s),
                                                                                      n.setStack(r))
                                                                                    : ((n = e.meta.error),
                                                                                      (n.message = s),
                                                                                      (n.name = t.name),
                                                                                      (n.stack = `${n.name}: ${n.message} ${r}`));
                                                                            } else {
                                                                                let e = t ? `${t}` : 'Unknown reason';
                                                                                (e += ` (${i})`),
                                                                                    (n = new b.i(e)),
                                                                                    n.setStack(r);
                                                                            }
                                                                        else {
                                                                            let e = `Unknown reason (${i})`;
                                                                            (n = new b.i(e)), n.setStack(r);
                                                                        }
                                                                        return n;
                                                                    }
                                                                    shouldTrapTimeoutQuery(e) {
                                                                        return !1;
                                                                    }
                                                                    execute(e) {
                                                                        (e.meta.step = 1),
                                                                            (e.meta.dead = !1),
                                                                            (e.meta.step = 2),
                                                                            (!e.meta.databaseConfig &&
                                                                                (this.computeDatabaseConfig(e),
                                                                                e.meta.dead)) ||
                                                                                ((e.meta.step = 3),
                                                                                this.isReadyForExecute(e) &&
                                                                                    (e.meta.shouldNotTrapQuery ||
                                                                                        this.trapQueryError(e),
                                                                                    (e.meta.step = 4),
                                                                                    (!e.meta.databaseName &&
                                                                                        (this.computeDatabaseName(e),
                                                                                        e.meta.dead)) ||
                                                                                        ((e.meta.step = 5),
                                                                                        (e.meta.step = 6),
                                                                                        (!e.meta.partitionConfig &&
                                                                                            (this.computePartitionConfig(
                                                                                                e
                                                                                            ),
                                                                                            e.meta.dead)) ||
                                                                                            ((e.meta.step = 7),
                                                                                            (!e.meta.tableConfig &&
                                                                                                (this.computeTableConfig(
                                                                                                    e
                                                                                                ),
                                                                                                e.meta.dead)) ||
                                                                                                ((e.meta.step = 8),
                                                                                                ('string' !=
                                                                                                    typeof e.meta
                                                                                                        .partitionKey &&
                                                                                                    (this.computePartitionKey(
                                                                                                        e
                                                                                                    ),
                                                                                                    e.meta.dead)) ||
                                                                                                    ((e.meta.step = 9),
                                                                                                    (!e.meta.executor &&
                                                                                                        (this.computeDatabaseAdapter(
                                                                                                            e
                                                                                                        ),
                                                                                                        e.meta.dead)) ||
                                                                                                        ((e.meta.step = 10),
                                                                                                        e.meta.executor())))))));
                                                                    }
                                                                    computeDatabaseAdapter(e) {
                                                                        const {
                                                                            databaseName: t,
                                                                            partitionConfig: s,
                                                                            partitionKey: i,
                                                                            databaseConfig: n,
                                                                            tableConfig: a,
                                                                        } = e.meta;
                                                                        let o = t;
                                                                        if (
                                                                            !O.a.isPartitionlessQuery(e) &&
                                                                            n.supportPartitionByField &&
                                                                            a.doesHavePartitionByField(s.type)
                                                                        ) {
                                                                            if ('' === i)
                                                                                return void this.rejectQuery(
                                                                                    e,
                                                                                    new b.q()
                                                                                );
                                                                            o = `${t}/${i}`;
                                                                        }
                                                                        const d = `${o}_${s.type}`;
                                                                        let l = this.adapterContainers.get(d);
                                                                        l ||
                                                                            ((l = new r.b.Container()),
                                                                            this.adapterContainers.set(d, l),
                                                                            this.adapterManager
                                                                                .getDatabaseAdapter(o, s)
                                                                                .then(l.resolve)
                                                                                .catch(l.reject)),
                                                                            l.value ||
                                                                                l.promise
                                                                                    .then(
                                                                                        () => (
                                                                                            (e.meta.shouldNotTrapQuery =
                                                                                                !0),
                                                                                            this.execute(e)
                                                                                        )
                                                                                    )
                                                                                    .catch((e) => {
                                                                                        const t = new b.b(d, e.message);
                                                                                        this.logger.zsymb(
                                                                                            18,
                                                                                            10291,
                                                                                            30003,
                                                                                            () => [t]
                                                                                        ),
                                                                                            this.dispatchEvent(
                                                                                                new y.d(t)
                                                                                            );
                                                                                    });
                                                                        const c = l.value;
                                                                        c
                                                                            ? ((e.meta.adapterName =
                                                                                  c.type === v.a.IDB
                                                                                      ? 'idb'
                                                                                      : 'sqlite'),
                                                                              (e.meta.executor = () => {
                                                                                  (e.meta.databaseName = o),
                                                                                      c.execute(e);
                                                                              }))
                                                                            : (e.meta.dead = !0);
                                                                    }
                                                                    replicate(e, t) {
                                                                        this.do(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, e),
                                                                                {},
                                                                                {
                                                                                    transaction: 0,
                                                                                    meta: Object(i.a)(
                                                                                        Object(i.a)({}, e.meta),
                                                                                        {},
                                                                                        {
                                                                                            databaseConfig: t,
                                                                                            error: new Error(),
                                                                                        }
                                                                                    ),
                                                                                    deferrer: void 0,
                                                                                }
                                                                            )
                                                                        );
                                                                    }
                                                                    isReadyForExecute(e) {
                                                                        return (
                                                                            !(
                                                                                e.meta.databaseConfig.session &&
                                                                                !this.session
                                                                            ) || (this.pendingQueries.push(e), !1)
                                                                        );
                                                                    }
                                                                    computeDatabaseConfig(e) {
                                                                        if (
                                                                            '' === e.database &&
                                                                            (O.a.isCloseAllDBsQuery(e) ||
                                                                                O.a.isDeleteAllDBsQuery(e))
                                                                        ) {
                                                                            e.meta.dead = !0;
                                                                            const t = this.getAllDBNames().map((t) =>
                                                                                this.doImmediately(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, e),
                                                                                        {},
                                                                                        {
                                                                                            type: O.a.isCloseAllDBsQuery(
                                                                                                e
                                                                                            )
                                                                                                ? v.d.CloseDB
                                                                                                : v.d.DeleteDB,
                                                                                            database: t,
                                                                                            meta: Object(i.a)(
                                                                                                Object(i.a)({}, e.meta),
                                                                                                {},
                                                                                                { error: new Error() }
                                                                                            ),
                                                                                            deferrer: void 0,
                                                                                        }
                                                                                    )
                                                                                )
                                                                            );
                                                                            return void Promise.all(t)
                                                                                .then(() => e.deferrer.resolve())
                                                                                .catch(e.deferrer.reject);
                                                                        }
                                                                        const t = this.configManager.getDatabaseConfigs(
                                                                            e.database
                                                                        );
                                                                        if (0 !== t.length) {
                                                                            if (t.length > 1 && this.shouldReplicate(e))
                                                                                for (let s = 1; s < t.length; s++)
                                                                                    this.replicate(e, t[s]);
                                                                            e.meta.databaseConfig = t[0];
                                                                        } else this.rejectQuery(e, new b.m(e.database));
                                                                    }
                                                                    getAllDBNames() {
                                                                        return Object.keys(this.dbSchema);
                                                                    }
                                                                    getTablesNameOfDB(e) {
                                                                        const t = this.dbSchema[e];
                                                                        if (!t) throw new b.n(e);
                                                                        return Object.values(t).map((e) => e.name);
                                                                    }
                                                                    computeDatabaseName(e) {
                                                                        var t, s;
                                                                        const { meta: n, table: r, database: a } = e;
                                                                        if (
                                                                            '' === r &&
                                                                            (O.a.isCloseDBQuery(e) ||
                                                                                O.a.isCloseAllDBsQuery(e) ||
                                                                                O.a.isDeleteDBQuery(e) ||
                                                                                O.a.isDeleteAllDBsQuery(e))
                                                                        ) {
                                                                            e.meta.dead = !0;
                                                                            const t = this.getTablesNameOfDB(a).map(
                                                                                (t) =>
                                                                                    this.doImmediately(
                                                                                        Object(i.a)(
                                                                                            Object(i.a)({}, e),
                                                                                            {},
                                                                                            {
                                                                                                table: t,
                                                                                                meta: Object(i.a)(
                                                                                                    Object(i.a)(
                                                                                                        {},
                                                                                                        e.meta
                                                                                                    ),
                                                                                                    {},
                                                                                                    {
                                                                                                        error: new Error(),
                                                                                                    }
                                                                                                ),
                                                                                                deferrer: void 0,
                                                                                            }
                                                                                        )
                                                                                    )
                                                                            );
                                                                            return void Promise.all(t)
                                                                                .then(() => e.deferrer.resolve())
                                                                                .catch(e.deferrer.reject);
                                                                        }
                                                                        const o =
                                                                                null !==
                                                                                    (t =
                                                                                        null === (s = this.session) ||
                                                                                        void 0 === s
                                                                                            ? void 0
                                                                                            : s.userId) && void 0 !== t
                                                                                    ? t
                                                                                    : '',
                                                                            d = n.databaseConfig.computeDatabaseName(
                                                                                o,
                                                                                r
                                                                            );
                                                                        n.databaseName = d;
                                                                    }
                                                                    computePartitionConfig(e) {
                                                                        const t = e.meta.databaseConfig.getPartition(
                                                                            e.table,
                                                                            this.session
                                                                        );
                                                                        t
                                                                            ? (e.meta.partitionConfig = t)
                                                                            : this.rejectQuery(
                                                                                  e,
                                                                                  new b.p(e.table, this.session)
                                                                              );
                                                                    }
                                                                    computeTableConfig(e) {
                                                                        const t = e.meta.partitionConfig.getTableConfig(
                                                                            e.table
                                                                        );
                                                                        t
                                                                            ? ((t.dbName = e.database),
                                                                              (e.meta.tableConfig = t))
                                                                            : this.rejectQuery(e, new b.r(e.table));
                                                                    }
                                                                    computePartitionKey(e) {
                                                                        const {
                                                                            databaseConfig: t,
                                                                            tableConfig: s,
                                                                            partitionConfig: i,
                                                                        } = e.meta;
                                                                        if (
                                                                            t.supportPartitionByField &&
                                                                            s.doesHavePartitionByField(i.type)
                                                                        )
                                                                            switch (e.type) {
                                                                                case v.d.BeginTransaction:
                                                                                    return void (e.meta.partitionKey =
                                                                                        '');
                                                                                case v.d.Clear:
                                                                                    return;
                                                                                case v.d.Insert:
                                                                                    return void this.computePartitionForInsertQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.InsertMulti:
                                                                                    return void this.computePartitionForInsertMultiQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.Get:
                                                                                case v.d.GetAndUpdate:
                                                                                case v.d.Update:
                                                                                case v.d.Delete:
                                                                                    return void this.computePartitionForIndexedQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.FindAndDelete:
                                                                                case v.d.GetAllKey:
                                                                                case v.d.GetAll:
                                                                                case v.d.Count:
                                                                                    return void this.computePartitionForRangedQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.DeleteMulti:
                                                                                case v.d.GetMulti:
                                                                                    return void this.computePartitionForGetMultiAndDeleteMultiQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.UpdateMulti:
                                                                                    return void this.computePartitionForUpdateMultiQuery(
                                                                                        e
                                                                                    );
                                                                                case v.d.CloseDB:
                                                                                case v.d.DeleteDB:
                                                                                    return void this.computePartitionForCloseDBAndDeleteDBQuery(
                                                                                        e
                                                                                    );
                                                                            }
                                                                        else e.meta.partitionKey = '';
                                                                    }
                                                                    computePartitionForInsertQuery(e) {
                                                                        const t =
                                                                            this.computePartitionKeyFromEntityValue(
                                                                                e.meta.tableConfig,
                                                                                e.params.value
                                                                            );
                                                                        void 0 !== t
                                                                            ? (e.meta.partitionKey = `${t}`)
                                                                            : this.rejectQuery(e, new b.q());
                                                                    }
                                                                    computePartitionForInsertMultiQuery(e) {
                                                                        const t = { groupByPartitions: {} };
                                                                        for (const i of e.params.values) {
                                                                            const s =
                                                                                this.computePartitionKeyFromEntityValue(
                                                                                    e.meta.tableConfig,
                                                                                    i
                                                                                );
                                                                            if (void 0 === s)
                                                                                return void this.rejectQuery(
                                                                                    e,
                                                                                    new b.q()
                                                                                );
                                                                            t.groupByPartitions[s] ||
                                                                                (t.groupByPartitions[s] = []),
                                                                                t.groupByPartitions[s].push(i);
                                                                        }
                                                                        let s;
                                                                        const n = Object.entries(t.groupByPartitions);
                                                                        if (1 === n.length)
                                                                            (s = n[0][0]),
                                                                                void 0 !== s
                                                                                    ? (e.meta.partitionKey = s)
                                                                                    : this.rejectQuery(e, new b.q());
                                                                        else {
                                                                            e.meta.dead = !0;
                                                                            const t = n.map((t) => {
                                                                                let [s, n] = t;
                                                                                const r = s;
                                                                                return this.doImmediately(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, e),
                                                                                        {},
                                                                                        {
                                                                                            meta: Object(i.a)(
                                                                                                Object(i.a)({}, e.meta),
                                                                                                {},
                                                                                                {
                                                                                                    partitionKey: r,
                                                                                                    error: new Error(),
                                                                                                }
                                                                                            ),
                                                                                            params: Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    e.params
                                                                                                ),
                                                                                                {},
                                                                                                { values: n }
                                                                                            ),
                                                                                            deferrer: void 0,
                                                                                        }
                                                                                    )
                                                                                );
                                                                            });
                                                                            Promise.all(t)
                                                                                .then((t) =>
                                                                                    e.deferrer.resolve(t.flat())
                                                                                )
                                                                                .catch(e.deferrer.reject);
                                                                        }
                                                                    }
                                                                    computePartitionForIndexedQuery(e) {
                                                                        const t = this.computePartitionKeyFromEntityKey(
                                                                            e.meta.tableConfig,
                                                                            e.params.key,
                                                                            e.params.index
                                                                        );
                                                                        void 0 !== t
                                                                            ? (e.meta.partitionKey = `${t}`)
                                                                            : this.rejectQuery(e, new b.q());
                                                                    }
                                                                    computePartitionForRangedQuery(e) {
                                                                        var t, s;
                                                                        if (!e.params.range) {
                                                                            const t = new b.s(
                                                                                'Get all data in partitioned table'
                                                                            );
                                                                            return void this.rejectQuery(e, t);
                                                                        }
                                                                        let i = '';
                                                                        i =
                                                                            e.type === v.d.FindAndDelete ||
                                                                            e.type === v.d.Count
                                                                                ? 'primary'
                                                                                : e.params.index;
                                                                        const { partitionConfig: n, tableConfig: r } =
                                                                            e.meta;
                                                                        if (
                                                                            -1 === r.getIndexPartitionField(n.type, i)
                                                                        ) {
                                                                            if (r.usePartitionTable) {
                                                                                const t = new b.s(
                                                                                    'Lookup partition from query range'
                                                                                );
                                                                                this.rejectQuery(e, t);
                                                                            } else {
                                                                                const t = new b.s(
                                                                                    'Get all data by index in partitioned table'
                                                                                );
                                                                                this.rejectQuery(e, t);
                                                                            }
                                                                            return;
                                                                        }
                                                                        if (
                                                                            null === (t = e.params.range) ||
                                                                            void 0 === t ||
                                                                            !t.from ||
                                                                            null === (s = e.params.range) ||
                                                                            void 0 === s ||
                                                                            !s.to
                                                                        ) {
                                                                            const t = new b.s(
                                                                                'Get data with open boundary in partition table'
                                                                            );
                                                                            return void this.rejectQuery(e, t);
                                                                        }
                                                                        const a = e.params.range.from,
                                                                            o = e.params.range.to,
                                                                            d = this.computePartitionKeyFromEntityKey(
                                                                                e.meta.tableConfig,
                                                                                a,
                                                                                i
                                                                            );
                                                                        if (
                                                                            d !==
                                                                            this.computePartitionKeyFromEntityKey(
                                                                                e.meta.tableConfig,
                                                                                o,
                                                                                i
                                                                            )
                                                                        ) {
                                                                            const t = new b.s(
                                                                                'Get data from multiple partition'
                                                                            );
                                                                            return void this.rejectQuery(e, t);
                                                                        }
                                                                        let l = d;
                                                                        void 0 !== l
                                                                            ? (e.meta.partitionKey = `${l}`)
                                                                            : this.rejectQuery(e, new b.q());
                                                                    }
                                                                    computePartitionForGetMultiAndDeleteMultiQuery(e) {
                                                                        let t = '';
                                                                        t =
                                                                            e.type === v.d.DeleteMulti
                                                                                ? 'primary'
                                                                                : e.params.index;
                                                                        const s = {};
                                                                        for (const i of e.params.keys) {
                                                                            const n =
                                                                                this.computePartitionKeyFromEntityKey(
                                                                                    e.meta.tableConfig,
                                                                                    i,
                                                                                    t
                                                                                );
                                                                            if (void 0 === n)
                                                                                return void this.rejectQuery(
                                                                                    e,
                                                                                    new b.q()
                                                                                );
                                                                            s[n] || (s[n] = []), s[n].push(i);
                                                                        }
                                                                        const n = Object.entries(s);
                                                                        let r;
                                                                        if (1 === n.length)
                                                                            (r = n[0][0]),
                                                                                void 0 !== r
                                                                                    ? (e.meta.partitionKey = `${r}`)
                                                                                    : this.rejectQuery(e, new b.q());
                                                                        else {
                                                                            e.meta.dead = !0;
                                                                            const t = n.map((t) => {
                                                                                let [s, n] = t;
                                                                                const r = s;
                                                                                return this.doImmediately(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, e),
                                                                                        {},
                                                                                        {
                                                                                            meta: Object(i.a)(
                                                                                                Object(i.a)({}, e.meta),
                                                                                                {},
                                                                                                {
                                                                                                    partitionKey: r,
                                                                                                    error: new Error(),
                                                                                                }
                                                                                            ),
                                                                                            params: Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    e.params
                                                                                                ),
                                                                                                {},
                                                                                                { keys: n }
                                                                                            ),
                                                                                            deferrer: void 0,
                                                                                        }
                                                                                    )
                                                                                );
                                                                            });
                                                                            Promise.all(t)
                                                                                .then((t) =>
                                                                                    e.deferrer.resolve(t.flat())
                                                                                )
                                                                                .catch(e.deferrer.reject);
                                                                        }
                                                                    }
                                                                    computePartitionForUpdateMultiQuery(e) {
                                                                        const { patches: t } = e.params,
                                                                            s = {};
                                                                        for (const i of t) {
                                                                            const { key: t } = i,
                                                                                n =
                                                                                    this.computePartitionKeyFromEntityKey(
                                                                                        e.meta.tableConfig,
                                                                                        t
                                                                                    );
                                                                            if (void 0 === n)
                                                                                return void this.rejectQuery(
                                                                                    e,
                                                                                    new b.q()
                                                                                );
                                                                            s[n] || (s[n] = []), s[n].push(i);
                                                                        }
                                                                        let n;
                                                                        const r = Object.entries(s);
                                                                        if (1 === r.length)
                                                                            (n = r[0][0]),
                                                                                void 0 !== n
                                                                                    ? (e.meta.partitionKey = n)
                                                                                    : this.rejectQuery(e, new b.q());
                                                                        else {
                                                                            const t = r.map((t) => {
                                                                                let [s, n] = t;
                                                                                const r = s;
                                                                                return this.doImmediately(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, e),
                                                                                        {},
                                                                                        {
                                                                                            meta: Object(i.a)(
                                                                                                Object(i.a)({}, e.meta),
                                                                                                {},
                                                                                                {
                                                                                                    partitionKey: r,
                                                                                                    error: new Error(),
                                                                                                }
                                                                                            ),
                                                                                            params: Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    e.params
                                                                                                ),
                                                                                                {},
                                                                                                { patches: n }
                                                                                            ),
                                                                                            deferrer: void 0,
                                                                                        }
                                                                                    )
                                                                                );
                                                                            });
                                                                            Promise.all(t)
                                                                                .then((t) =>
                                                                                    e.deferrer.resolve(t.flat())
                                                                                )
                                                                                .catch(e.deferrer.reject);
                                                                        }
                                                                    }
                                                                    async computePartitionForCloseDBAndDeleteDBQuery(
                                                                        e
                                                                    ) {
                                                                        e.meta.dead = !0;
                                                                        const { meta: t } = e,
                                                                            s = (
                                                                                await this.adapterManager.getExistedPartitionKeys(
                                                                                    t.databaseName,
                                                                                    t.databaseConfig.type
                                                                                )
                                                                            ).map((t) =>
                                                                                this.doImmediately(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, e),
                                                                                        {},
                                                                                        {
                                                                                            meta: Object(i.a)(
                                                                                                Object(i.a)({}, e.meta),
                                                                                                {},
                                                                                                {
                                                                                                    partitionKey: t,
                                                                                                    error: new Error(),
                                                                                                }
                                                                                            ),
                                                                                            deferrer: void 0,
                                                                                        }
                                                                                    )
                                                                                )
                                                                            );
                                                                        Promise.all(s)
                                                                            .then(() => e.deferrer.resolve())
                                                                            .catch(e.deferrer.reject);
                                                                    }
                                                                    computePartitionKeyFromEntityValue(e, t) {
                                                                        const s = e.partitionField;
                                                                        if (void 0 !== s) return t[s];
                                                                    }
                                                                    computePartitionKeyFromEntityKey(e, t, s) {
                                                                        void 0 === s && (s = 'primary');
                                                                        const i = e.partitionField;
                                                                        if (void 0 !== i)
                                                                            return e.getIndex(s).getValue(t, i);
                                                                    }
                                                                    shouldReplicate(e) {
                                                                        switch (e.type) {
                                                                            case v.d.Clear:
                                                                            case v.d.Delete:
                                                                            case v.d.DeleteMulti:
                                                                            case v.d.FindAndDelete:
                                                                            case v.d.Insert:
                                                                            case v.d.InsertMulti:
                                                                            case v.d.Update:
                                                                            case v.d.UpdateMulti:
                                                                            case v.d.GetAndUpdate:
                                                                            case v.d.CloseDB:
                                                                            case v.d.CloseAllDBs:
                                                                            case v.d.DeleteDB:
                                                                            case v.d.DeleteAllDBs:
                                                                                return !0;
                                                                            default:
                                                                                return !1;
                                                                        }
                                                                    }
                                                                    logQueryInfo(e) {
                                                                        O.a.isBeginTransaction(e)
                                                                            ? this.logger.zsymb(
                                                                                  12,
                                                                                  10291,
                                                                                  30004,
                                                                                  () => [
                                                                                      I.b.getTypeName(e.type),
                                                                                      {
                                                                                          database: e.meta.databaseName,
                                                                                          table: e.params.tables.join(
                                                                                              ','
                                                                                          ),
                                                                                          transaction: e.transaction,
                                                                                          adapter:
                                                                                              e.meta.databaseConfig
                                                                                                  .typeName,
                                                                                      },
                                                                                  ]
                                                                              )
                                                                            : this.logger.zsymb(
                                                                                  12,
                                                                                  10291,
                                                                                  30005,
                                                                                  () => [
                                                                                      I.b.getTypeName(e.type),
                                                                                      {
                                                                                          database: e.meta.databaseName,
                                                                                          table: e.table,
                                                                                          transaction: e.transaction,
                                                                                          adapter:
                                                                                              e.meta.databaseConfig
                                                                                                  .typeName,
                                                                                      },
                                                                                  ]
                                                                              );
                                                                    }
                                                                    rejectQuery(e, t) {
                                                                        (e.meta.dead = !0), e.deferrer.reject(t);
                                                                    }
                                                                })
                                                            ) || L)
                                                    ) || L)
                                            ) || L)
                                    ) || L)
                            ) || L)
                    ) || L;
                n.ModuleContainer.registerSingleton(E.b, F);
            },
            i15Q: function (e, t, s) {
                'use strict';
                s.d(t, 'a', function () {
                    return n;
                });
                var i = s('KRcn');
                class n {
                    constructor() {
                        (this._session = null),
                            (this._processStart = void 0),
                            (this._enableConsole = void 0),
                            (this.isReady = () => !!this._session),
                            (this.getSession = () => {
                                if (!this._session) throw new Error('session is not ready');
                                return this._session;
                            }),
                            (this.getProcessStartTime = () => this._processStart),
                            (this.setSession = (e) => {
                                this._session = e;
                            }),
                            (this._processStart = Date.now()),
                            (this._session = {
                                build: '0a3259aaae220fb07a3f001b08cc6f86c6850dc7',
                                zlgv: 'woQa04sK',
                                env: 'prod',
                                buildType: 'release',
                                pversion: s('kiQV').version,
                                process: Object(i.a)(),
                            }),
                            (this._enableConsole = !1);
                    }
                    enableConsole() {}
                    disableConsole() {}
                    isEnabledConsole() {
                        return this._enableConsole;
                    }
                }
            },
            j6JD: function (e, t, s) {
                'use strict';
                (function (e) {
                    function i(e, t) {
                        'string' == typeof e && (e = parseInt(e));
                        const s = new Date(e),
                            i = s.getDate(),
                            r = s.getMonth() + 1,
                            a = (s.getFullYear(), s.getHours()),
                            o = s.getMinutes(),
                            d = s.getSeconds();
                        return null != t && t.dayOnly
                            ? `${i}.${r}`
                            : null != t && t.timeOnly
                            ? `${n(a, 2)}:${n(o, 2)}:${n(d, 2)}`
                            : `${i}.${r} ${n(a, 2)}:${n(o, 2)}:${n(d, 2)}`;
                    }
                    function n(e, t) {
                        const s = e.toString();
                        return s.length < t ? '0'.repeat(t - s.length) + s : s;
                    }
                    s.d(t, 'a', function () {
                        return i;
                    });
                }).call(this, s('Q40w').Buffer);
            },
            jIg3: function (e, t, s) {
                'use strict';
                var i = s('1UUk');
                s.d(t, 'a', function () {
                    return i.a;
                }),
                    s.d(t, 'b', function () {
                        return i.b;
                    });
            },
            jw3m: function (e, t, s) {},
            kiQV: function (e) {
                e.exports = JSON.parse(
                    '{"name":"Zalo","homepage":"https://zalo.me/","version":"23.6.2","description":"Zalo - Nhắn gửi yêu thương","engines":{"npm":">=3"},"lint-staged":{"*.{js}":["node ./tools/prettier-include/index.js","eslint --quiet"],"*.{jsx,tsx,ts,scss,md,json,html,yml}":["node ./tools/prettier-include/index.js"]},"pre-commit":"check","main":"bootstrap.js","scripts":{"check":"lint-staged","preinstall":"node tools/nodeVersionCheck.js && git submodule init && git submodule update","postinstall":"npm run update-bundle-files-list && git config core.hooksPath .githooks","setup":"node tools/setup/setupMessage.js && npm install && node tools/setup/setup.js","remove-demo":"babel-node tools/removeDemo.js","start":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:web","start-zaloapp":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' WEB_DOMAIN=zaloapp zpc-cli run dev:web","open:src":"cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:web","open:dist":"cross-env BABEL_ENV=web babel-node tools/distServer.js","update-about":"babel-node tools/updateAbout.js","distwname":"babel-node tools/dist-with-name.js","send-zlog":"node ./tools/zlog/collect-zlog-templates.js","send-zlog-web":"node ./tools/zlog/collect-zlog-templates-web.js","init-zlog-vers":"node ./tools/init-zlog-vers.js","prep":"rimraf ./node_modules/.cache ./zlog-dist && npm run sass && npm run lang","update-call-hash":"babel-node tools/update-call-hash.js","update-zavi-hash":"babel-node tools/update-zavi-hash.js","lint":"esw src --color --parser babel-eslint","lint-strict":"eslint main/*.js","m-lint":"eslint src/utils/meta-info-msg/*.js src/database/base-db.js","lint:watch":"npm run lint -- --watch","clean-dist":"npm run remove-dist && mkdir dist","remove-dist":"rimraf ./dist","prebuild":"npm run clean-dist && npm run sass && npm run lang","prebuild-pc":"npm run lint-strict && rimraf ./pc-dist && mkdir pc-dist && npm run sass && npm run lang","build-dev":"cross-env WEB_ENV=dev npm run build","build-prod":"cross-env WEB_ENV=prod npm run build","build-zaloapp-prod":"cross-env WEB_ENV=prod WEB_DOMAIN=zaloapp npm run build","build-zalome-prod":"cross-env WEB_ENV=prod WEB_DOMAIN=zalome npm run build","build:local":"npm run init-zlog-vers && npm run cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' BUILD_TYPE=release zpc-cli run compile:web","build":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' BUILD_TYPE=release node ./tools/zpc-cli.js run compile:web","compile:main":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run compile:main","build-pc":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run compile:renderer","build-pc-appX":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run compile:renderer:appx","test:cover":"babel-node node_modules/isparta/bin/isparta cover --root src --report html node_modules/mocha/bin/_mocha -- --require ./tools/testSetup.js \\"src/**/*.spec.js\\" --reporter progress","test:cover:travis":"babel-node node_modules/isparta/bin/isparta cover --root src --report lcovonly _mocha -- --require ./tools/testSetup.js \\"src/**/*.spec.js\\" && cat ./coverage/lcov.info | node_modules/coveralls/bin/coveralls.js","test:watch":"npm run test -- --watch","open:cover":"npm run test:cover && open coverage/index.html","test:electron":"electron ./test/main/download.js","test":"for f in $(find src -name *.spec.js); do NODE_PATH=./src mocha tools/testSetup.js \\"$f\\" --reporter progress; done;","wintest":"for %f in (src/utils/*.spec.js) do mocha tools/testSetup.js \\"src/utils/%f\\" done;","jest:test":"cross-env NODE_PATH=./src __PLATFORM__=WEB NODE_ENV=development jest --forceExit","jest:emoji":"cross-env NODE_PATH=./src __PLATFORM__=WEB jest test/core/parse-emoji.test.js --forceExit","jest:conversation":"cross-env NODE_PATH=./src __PLATFORM__=WEB jest --watch --testPathPattern=src/logic/conversation --forceExit","jest:log:test":"cross-env NODE_PATH=./src jest --runInBand --forceExit","jest:update":"cross-env NODE_PATH=./src jest -u","test:single":"cross-env NODE_PATH=./src mocha tools/testSetup.js src/utils/message.spec.js","test:file":"node ./test/file/test.js","test:ibparser":"cross-env NODE_PATH=./src mocha tools/testSetup.js  src/utils/inputbox-parser.spec.js","test:compare":"cross-env NODE_PATH=./src mocha tools/testSetup.js  src/utils/third-party/compare.spec.js","test:zstructures":"cross-env NODE_PATH=./src mocha tools/testSetup.js  src/utils/third-party/zstructures.spec.js","test:common":"cross-env NODE_PATH=./src mocha tools/testSetup.js src/utils/common.spec.js","test:schema":"cross-env NODE_PATH=./src jest --config= database/zdb/row-items/schema/data-validator.test.js --forceExit --detectOpenHandles","presass":"mkdirp src/static/css && mkdirp pc/static/fonts/zalo && ncp src/static/fonts/zalo/ pc/static/fonts/zalo/ && mkdirp pc/static/fonts/main  && ncp src/static/fonts/main/ pc/static/fonts/main/ ","sass":"sass src/static/scss/layout.scss src/static/css/layout.css && sass pc/static/scss/login.scss pc/static/css/login.css  && sass pc/static/scss/photo.scss pc/static/css/photo.css  && sass pc/static/scss/videocall.scss pc/static/css/videocall.css && sass src/static/scss/base/color-v1.scss src/static/css/color-v1.css && sass src/static/scss/base/darkmode.scss src/static/css/darkmode.css && sass src/static/scss/base/color-vtest.scss src/static/css/color-vtest.css","preelectron-start-dev":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:main","electron-start-dev":"npm run init-zlog-vers && cross-env PC=1 BABEL_ENV=pc NODE_ENV=development electron .","predebug-main":"npm run init-zlog-vers && npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:main","debug-main":"npm run init-zlog-vers && cross-env PC=1 BABEL_ENV=pc NODE_ENV=development electron . --inspect=9230","pc-compile":"cross-env FORCE_COLOR=1 PC=1 BABEL_ENV=pc NODE_ENV=development npm run electron-start-dev","pc-compile-2":"cross-env PC=1 BABEL_ENV=pc CLONE=1 NODE_ENV=development npm run electron-start-dev","v1-start-dev":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:renderer","pc-start-dev":"npm run init-zlog-vers && cross-env NODE_OPTIONS=\'--max-old-space-size=8192\' zpc-cli run dev:renderer","start-pc":"npm run init-zlog-vers && npm-run-all -p pc-compile pc-start-dev","prepack":"npm run build-pc && npm run compile:main","prepack:win32":"npm run build-pc && npm run compile:main","prepack:winstaller":"npm run build-pc && npm run signtool && npm run compile:main","prewinstaller":"git submodule init && git submodule update","pack":"electron-builder --dir --config electron-builder.config.js","pack:win32":"cross-env BUILD_TYPE=release npm run pack:winstaller && node ./tools/afterpack.js ia32 && babel-node tools/genPartialUpdate.js ia32 -- ","pack:winstaller:no-build":"cross-env BUILD_TYPE=release ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true electron-builder --dir --ia32 --config electron-builder.config.js","pack:winstaller":"electron-builder --dir --ia32 --config electron-builder.config.js","pack:winstaller64":"electron-builder --dir --x64 --config electron-builder.config.js","postpack":"babel-node tools/genPartialUpdate.js","postpack:win32":"babel-node tools/genPartialUpdate.js ia32","predodist":"npm run build-pc && npm run signtool && npm run compile:main","predodist:win64":"npm run predodist","predodist:win32":"npm run predodist","predodist:mac":"node ./tools/predodistmac.js && npm run predodist","dodist":"electron-builder --config electron-builder.config.js","predodist:dir":"npm run build-pc && npm run signtool && npm run compile:main","dodist:mac":"electron-builder --mac --config electron-builder.config.js","dodist:dir":"electron-builder --dir --mac --config electron-builder.config.js","dodist:win":"electron-builder --win --config electron-builder.config.js","dodist:win32":"electron-builder --ia32 --config electron-builder.config.js","dodist:win64":"electron-builder --arch x64 --config electron-builder.config.js","pack:installer":"node ./tools/prebuild.js && npm run pack:winstaller && node ./tools/afterpack.js ia32 && electron-builder --prepackaged ./dist/win-ia32-unpacked/ --ia32 --config electron-builder.config.js && babel-node tools/genPartialUpdate.js ia32 -- ","pack:installer64":"node ./tools/prebuild.js && npm run pack:winstaller && node ./tools/afterpack.js x64 && electron-builder --prepackaged ./dist/win-unpacked/ --arch x64 --config electron-builder.config.js && babel-node tools/genPartialUpdate.js x64 -- ","pack:full":"node ./tools/prebuild.js && npm run pack:winstaller && node ./tools/afterpack.js ia32 && electron-builder --prepackaged ./dist/win-ia32-unpacked/ --ia32 --config electron-builder.config.js && babel-node tools/diffModule.js","dist:win32":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true NODE_OPTIONS=\'--max-old-space-size=4096\' BUILD_ENV=test npm run pack:installer","dist:win64":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true NODE_OPTIONS=\'--max-old-space-size=4096\' BUILD_ENV=test npm run pack:installer64","dist:win32release":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true NODE_OPTIONS=\'--max-old-space-size=4096\' BUILD_TYPE=release BUILD_ENV=test NEED_SIGN=1 npm run pack:installer","dist:win32fullpack":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true NODE_OPTIONS=\'--max-old-space-size=8096\' BUILD_TYPE=release BUILD_ENV=production NEED_SIGN=1 npm run pack:full","postpack:full":"","uploadsourcemapwin":"cross-env ZLOG_TYPE=PC sentry-cli releases files Zalo%npm_package_version% upload-sourcemaps pc-dist/ --url-prefix app:///pc-dist/ && sentry-cli releases files Zalo%npm_package_version% upload-sourcemaps main-dist/ --url-prefix app:///main-dist/ && npm run send-zlog","uploadsourcemapmac":"cross-env ZLOG_TYPE=PC sentry-cli releases files Zalo$npm_package_version upload-sourcemaps pc-dist/ --url-prefix app:///pc-dist/ && sentry-cli releases files Zalo$npm_package_version upload-sourcemaps main-dist/ --url-prefix app:///main-dist/ && npm run send-zlog","uploadsourcemapweb":"cross-env ZLOG_TYPE=WEB sentry-cli releases files Zalo$npm_package_version upload-sourcemaps dist/ --url-prefix ~/ && rm -r ./dist/sourcemaps && npm run send-zlog-web","dist:win32nobuild":"electron-builder --prepackaged ./dist/win-ia32-unpacked/ --ia32 --config electron-builder.config.js&& babel-node tools/genPartialUpdate.js ia32 -- ","dist:win":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true npm run dodist:win","dist:appX":"(npm run dodist:appX || true) && babel-node tools/rename-appx-64.js &&  npm run dodist:appX32","dist:mac":"cross-env ARCH=x64 ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true BUILD_ENV=test npm run dodist:mac","dist:macrelease":"cross-env ARCH=x64 NODE_OPTIONS=\'--max-old-space-size=4096\' ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true BUILD_TYPE=release NEED_SIGN=1 npm run dodist:mac","dist:mac:m1":"cross-env ARCH=arm64 ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true BUILD_ENV=test npm run dodist:mac","dist:macrelease:m1":"cross-env ARCH=arm64 NODE_OPTIONS=\'--max-old-space-size=4096\' ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true BUILD_TYPE=release NEED_SIGN=1 npm run dodist:mac","dist:macnobuild":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true electron-builder --mac --config electron-builder.config.js","dist":"cross-env NODE_OPTIONS=\'--max-old-space-size=2048\' ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true npm run dodist","predist:appX":"npm run build-pc-appX && npm run signtool && npm run compile:main","dodist:appX":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true electron-builder --win AppX --config electron-builder.config.js","dodist:appX32":"cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true electron-builder --win AppX --ia32  --config electron-builder.config.js","zip-pc":"babel-node tools/zipResource.js","db:clear":"babel-node tools/clearDb.js","icon:gen":"gulp icon","icon:check":"babel-node icon/checkIconsCli.js","icon":"babel-node icon/buildIcons.js && babel-node icon/createSVGFont.js && npm run sass","icon:full":"npm run icon:check && npm run icon && npm run sass ","lang":"mkdirp src/static/lang &&  cd ./InitLang && node ./run.js","signtool":"cross-env BABEL_ENV=node babel-node tools/sign-tool-win.js","install-native":"electron-builder install-app-deps","install-native-32":"electron-builder install-app-deps --arch=ia32","pack-module":"babel-node tools/genPartialUpdate.js ia32 -- ","update-bundle-files-list":"node ./tools/get-node-modules-glob.js","upload-native-symbol":"sentry-cli upload-dif -o vng -p zalopc --wait ./.symbols"},"author":{"name":"VNG Corp.","email":"feddback@zalo.me","url":"https://zalo.me/"},"license":"MIT","dependencies":{"@babel/plugin-transform-runtime":"7.11.0","@babel/preset-env":"7.11.0","@babel/preset-react":"7.10.4","@babel/runtime-corejs3":"7.11.2","@google-cloud/secret-manager":"4.0.0","@google-cloud/storage":"6.1.0","@reduxjs/toolkit":"1.5.1","@sentry/electron":"1.1.0","@sentry/react":"6.2.4","@tensorflow/tfjs":"0.15.3","@types/generic-pool":"3.1.9","adm-zip":"0.4.13","ajv":"5.2.2","archiver":"2.0.3","auto-launch":"^5.0.1","babel-plugin-module-resolver":"4.0.0","babel-plugin-transform-zlog":"1.17.1","big-integer":"1.6.23","bloom-filters":"1.3.8","broadcast-channel":"~4.10.0","cborg":"1.9.5","change-case":"4.1.2","chart.js":"2.7.2","check-disk-space":"2.1.0","clsx":"1.0.4","codemirror":"^5.59.0","core-js":"3.6.5","cron":"2.1.0","crypto-js":"3.1.8","decompress":"4.2.0","dompurify":"2.3.6","dropbox":"2.5.9","electron-log":"4.2.2","electron-store":"8.1.0","electron-updater":"4.0.0","es6-promise":"3.2.1","fast-memoize":"^2.5.2","file-saver":"1.3.3","file-type":"10.11.0","flatted":"3.2.5","fs-extra":"6.0.1","generic-pool":"3.7.2","glob":"7.1.2","google-libphonenumber":"3.1.15","immer":"7.0.5","jpeg-js":"0.4.1","js-yaml":"^3.8.4","jszip":"3.10.1","libphonenumber-js":"1.6.6","lodash.debounce":"4.0.8","lodash.toarray":"4.4.0","lottie-web":"^5.1.7","lowdb":"2.1.0","lz-string":"1.4.4","mediatr-ts":"0.3.0","microm":"0.2.4","mkdirp":"^0.5.1","moment":"^2.29.1","nanoid":"3.3.3","network":"0.5.0","node-fetch":"2.6.0","node-stream-zip":"1.8.0","node-wifi":"2.0.13","p-defer":"4.0.0","p-queue":"6.6.2","p-tap":"4.0.0","pako":"2.0.3","pdfjs-dist":"2.5.207","percentile":"1.6.0","progress-stream":"1.2.0","prop-types":"15.5.10","protobufjs":"6.11.2","quick-lru":"6.0.2","react":"16.14.0","react-codemirror2":"^7.2.1","react-custom-scrollbars":"^4.2.1","react-datetime":"file:native/zdate-time-picker","react-dom":"16.14.0","react-draggable":"^4.4.3","react-error-overlay":"6.0.7","react-input-range":"^1.3.0","react-intersection-observer":"8.25.2","react-measure":"2.0.2","react-motion":"0.5.2","react-redux":"7.2.4","react-refresh":"0.8.3","react-resizable":"^1.11.0","react-router-redux":"^4.0.8","react-simple-timefield":"3.2.5","react-transition-group":"4.4.1","react-virtualized":"9.9.0","recoil":"0.1.3","recompose":"0.30.0","redux":"4.0.5","redux-batched-subscribe":"0.1.6","redux-thunk":"2.3.0","reflect-metadata":"0.1.13","request":"2.88.0","reselect":"4.0.0","resize-observer-polyfill":"1.5.1","sift":"16.0.0","source-map-support":"0.5.19","spark-md5":"3.0.0","stackblur-canvas":"1.4.0","systeminformation":"5.6.12","tar-fs":"2.0.0","tmp":"0.0.31","tough-cookie":"^2.3.2","tsyringe":"4.6.0","unload":"git+https://zalogit2.zing.vn/zalo-pc/unload.git","unused-filename":"0.1.0","uuid":"3.1.0","workerpool":"6.1.0","xstate":"4.23.1"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@babel/eslint-parser":"7.12.1","@babel/node":"^7.0.0","@babel/plugin-proposal-class-properties":"7.12.1","@babel/preset-typescript":"7.12.7","@babel/register":"^7.0.0","@sentry/cli":"1.51.1","@types/async":"3.2.3","@types/codemirror":"0.0.98","@types/core-js":"2.5.4","@types/dompurify":"2.3.3","@types/gulp":"4.0.6","@types/jest":"26.0.23","@types/lodash.debounce":"4.0.6","@types/lodash.toarray":"4.4.6","@types/node":"17.0.35","@types/react":"^16.8.25","@types/react-custom-scrollbars":"4.0.8","@types/react-dom":"17.0.9","@types/react-resizable":"1.7.3","@types/react-transition-group":"4.4.0","@types/react-virtualized":"9.21.12","@types/rimraf":"3.0.2","@types/sqlite3":"3.1.8","@types/workerpool":"6.1.0","@typescript-eslint/parser":"4.22.0","babel-core":"^7.0.0-bridge.0","babel-eslint":"^9.0.0","babel-jest":"^23.4.2","babel-plugin-encrypt-src":"^1.0.3","capitalize":"2.0.4","chai":"3.5.0","chalk":"1.1.3","connect":"3.6.6","consola":"2.15.0","coveralls":"2.11.12","cross-env":"^2.0.0-beta","debug":"4.1.1","devtron":"1.4.0","electron":"20.3.12","electron-builder":"20.44.4","electron-devtools-installer":"3.1.1","electron-download":"4.1.1","electron-notarize":"0.2.1","electron-publish":"19.53.3","enzyme":"3.3.0","eslint":"5.4.0","eslint-import-resolver-babel-module":"5.1.0","eslint-import-resolver-webpack":"0.6.0","eslint-plugin-babel":"3.3.0","eslint-plugin-import":"2.16.0","eslint-plugin-jest":"21.22.0","eslint-plugin-jsx-a11y":"2.1.0","eslint-plugin-react":"7.11.1","eslint-plugin-react-hooks":"2.4.0","eslint-watch":"2.1.14","faker":"5.5.3","globby":"11.0.1","gulp":"4.0.2","gulp-consolidate":"0.2.0","gulp-iconfont":"11.0.0","isparta":"4.0.0","jest":"23.6.0","jsftp":"1.5.5","lint-staged":"10.5.4","md5":"2.2.1","md5-file":"4.0.0","micromatch":"4.0.2","mocha":"4.1.0","ncp":"^2.0.0","node-abi":"^2.0.2","node-pre-gyp":"^0.6.37","node-sass":"4.12.0","nodemon":"1.11.0","npm":"6.14.2","npm-run-all":"2.3.0","open":"0.0.5","pre-commit":"1.2.2","prettier":"2.4.1","prompt":"1.0.0","react-hook-form":"7.31.3","react-hook-form-auto":"1.3.13","react-test-renderer":"16.5.1","recoilize":"2.0.1","redux-logger":"3.0.6","redux-perf-middleware":"1.1.0","regenerator-runtime":"0.13.7","replace":"0.3.0","rimraf":"2.5.4","serve-static":"1.13.2","shelving-mock-indexeddb":"1.0.8","sinon":"1.17.5","sinon-chai":"2.8.0","terser-webpack-plugin-legacy":"1.2.3","ts-jest":"26.5.6","ts-node":"8.10.2","typescript":"3.9.6","uglify-es":"3.3.7","uglifyjs-webpack-plugin":"1.1.6","utility-types":"3.10.0","walkdir":"0.0.12","webpack":"3.10.0","webpack-chain":"6.5.1","webpack-dev-middleware":"^2.0.4","webpack-hot-middleware":"^2.21.0","webpack-md5-hash":"0.0.5","webpack-strip":"0.1.0","webpack-virtual-modules":"0.4.3","yargs":"15.4.1"},"externals":[]}'
                );
            },
            nUpV: function (e, t, s) {
                'use strict';
                var i = s('jDHv'),
                    n = s('YEoC'),
                    r = (s('bSii'), s('UJ0r')),
                    a = s('teaq');
                const o = n.a.IDB;
                var d,
                    l = s('d/or');
                let c =
                    i.ModuleContainer.injectable()(
                        (d =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (d =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (d = class e {
                                            constructor() {
                                                (this._preferAdapters = void 0),
                                                    (this._settings = void 0),
                                                    (this._preferAdapters = []),
                                                    (this._settings = new Map());
                                            }
                                            get preferAdapters() {
                                                return this._preferAdapters;
                                            }
                                            set preferAdapters(e) {
                                                (this._preferAdapters = e), this._settings.clear(), this.save();
                                                i.ModuleContainer.resolve(a.b).clearCache();
                                            }
                                            async load() {
                                                i.ModuleContainer.resolve(r.b);
                                                throw new Error(
                                                    "'zdb_setting' localStorage key is no longer in-use! Please remove it usage!"
                                                );
                                            }
                                            async save() {
                                                e.deserializePreferAdapter(this._preferAdapters),
                                                    e.deserializeDatabaseSettings(this._settings);
                                                throw new Error(
                                                    "'zdb_setting' localStorage key is no longer in-use! Please remove it usage!"
                                                );
                                            }
                                            getPreferredAdapter(e) {
                                                var t;
                                                return null === (t = this._settings.get(e)) || void 0 === t
                                                    ? void 0
                                                    : t.preferAdapter;
                                            }
                                            setPreferAdapter(e, t) {
                                                let s = this._settings.get(e);
                                                s
                                                    ? (s.preferAdapter = t)
                                                    : (s = { currentAdapter: t, preferAdapter: t }),
                                                    this._settings.set(e, s),
                                                    this.save();
                                            }
                                            getCurrentAdapterType(e) {
                                                let t = this._settings.get(e);
                                                return (
                                                    t || ((t = { currentAdapter: o }), this._settings.set(e, t)),
                                                    t.currentAdapter
                                                );
                                            }
                                            setCurrentAdapter(e, t) {
                                                let s = this._settings.get(e);
                                                s
                                                    ? (s.currentAdapter = t)
                                                    : (s = { currentAdapter: t, preferAdapter: t }),
                                                    this._settings.set(e, s);
                                            }
                                            getDatabaseState(e) {
                                                return this._settings.get(e);
                                            }
                                            static deserializePreferAdapter(e) {
                                                return e.map((e) => (e === n.a.IDB ? 'IDB' : 'SQLite'));
                                            }
                                            static serializePreferAdapter(e) {
                                                return e.adapter.map((e) => ('IDB' === e ? n.a.IDB : n.a.SQLite));
                                            }
                                            static deserializeDatabaseSettings(e) {
                                                return Array.from(e.entries());
                                            }
                                            static serializeDatabaseSettings(e) {
                                                return new Map(e.databases);
                                            }
                                        })
                                    ) || d)
                            ) || d)
                    ) || d;
                i.ModuleContainer.registerSingleton(l.a, c);
            },
            o0oJ: function (e, t, s) {
                (function (e) {
                    const t = {};
                    function s(e) {
                        return t[e] || (t[e] = 0), (t[e] += 1), 100 * e + t[e];
                    }
                    if (!e.perf) {
                        let t;
                        t = () => Date.now();
                        const i = {
                            STARTUP: s(1),
                            MIGRATION_DONE: s(2),
                            MAIN_SCRIPT: s(2),
                            LOADED_MAIN_SCRIPT: s(3),
                            MAIN_APP_READY: s(3),
                            LOADED_STARTUP_SCRIPT: s(2),
                            STARTUP_BEFORE_HEAVY: s(3),
                            CREATE_MAIN_WINDOW: s(3),
                            SHOW_MAIN_WINDOW: s(3),
                            MAIN_WINDOW_LOADING: s(3),
                            MAIN_WINDOW_LOADED: s(3),
                            APP_STARTUP: s(2),
                            LOAD_APP_SCRIPT: s(3),
                            APP_DID_MOUNT: s(3),
                            CHATBOX_DID_MOUNT: s(3),
                            SELECT_CONVERSATION: s(1),
                            SELECTED_CONVERSATION: s(2),
                        };
                        e.perf = {
                            ...i,
                            perfRecords: [],
                            record: (s) => {
                                s || (s = 0);
                                const i = [s, t()];
                                e.perf.perfRecords.push(i);
                            },
                        };
                    }
                }).call(this, s('kjmW'));
            },
            qLCR: function (e, t, s) {
                'use strict';
                s.r(t);
                s('cOPa'), s('mNvP'), s('BtX6');
                var i = s('VTBJ'),
                    n = s('mwIZ'),
                    r = s.n(n),
                    a = s('D1y2'),
                    o = s.n(a),
                    d = s('jDHv'),
                    l = s('Y58e');
                d.ModuleContainer.registerSingleton(
                    l.a,
                    class {
                        get(e) {
                            const t = s('NDmK').default;
                            return r()(t, e);
                        }
                        set(e, t) {
                            const n = s('NDmK').default,
                                a = Object(i.a)(Object(i.a)({}, r()(n, e)), t);
                            return o()(n, e, a);
                        }
                    }
                );
                var c,
                    h = s('jGDt'),
                    u = s('igA5'),
                    g = s('PLj1'),
                    m = s('KRcn'),
                    p = s('7FSS'),
                    f = s('i15Q'),
                    v = s('1pet');
                let b =
                    Object(d.injectable)()(
                        (c =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (c =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (c = class extends f.a {
                                            constructor() {
                                                super();
                                                const e = Object(m.a)();
                                                if (g.a.includes(e)) this._enableConsole = !1;
                                                else {
                                                    var t;
                                                    const e =
                                                        null === (t = u.a.getInstance()) || void 0 === t
                                                            ? void 0
                                                            : t.getItem(
                                                                  v.ZLoggerLocalStorageKeys.RENDERER_CONSOLE_MODE
                                                              );
                                                    this._enableConsole = 'true' === e || !1;
                                                }
                                                p.a.log(
                                                    '[ZLL]: Console logging 123',
                                                    this._enableConsole = 1
                                                );
                                                
                                            }
                                            enableConsole() {
                                                p.a.log('[ZLL]: Console logging enabled'), (this._enableConsole = !0);
                                                const e = Object(m.a)();
                                                var t;
                                                g.a.includes(e) ||
                                                    null === (t = u.a.getInstance()) ||
                                                    void 0 === t ||
                                                    t.setItem(v.ZLoggerLocalStorageKeys.RENDERER_CONSOLE_MODE, 'true');
                                            }
                                            disableConsole() {
                                                p.a.log('[ZLL]: Console logging disabled 123' + this._enableConsole), (this._enableConsole = !1);
                                                const e = Object(m.a)();
                                                var t;
                                                g.a.includes(e) ||
                                                    null === (t = u.a.getInstance()) ||
                                                    void 0 === t ||
                                                    t.setItem(v.ZLoggerLocalStorageKeys.RENDERER_CONSOLE_MODE, 'false');
                                            }
                                        })
                                    ) || c)
                            ) || c)
                    ) || c;
                d.ModuleContainer.registerSingleton(h.a, b);
                s('ezdo'), s('KdAX');
                var y = s('W8Xk');
                const I = Object(d.define)('kv-cache'),
                    _ = Object(d.define)('kv-cache-in-mem');
                var M;
                class C {
                    constructor(e) {
                        (this._prefix = void 0), (this._prefix = `${e}-kv-db`);
                    }
                    _buildKey(e) {
                        return `${this._prefix}-${e}`;
                    }
                    async setItem(e, t) {
                        const s = this._buildKey(e),
                            i = u.a.getInstance();
                        return await i.setItemAsync(s, y.b(t)), t;
                    }
                    async getItem(e) {
                        const t = this._buildKey(e),
                            s = u.a.getInstance(),
                            i = await s.getItemAsync(t);
                        return Promise.resolve(i ? y.a(i) : void 0);
                    }
                    async removeItem(e) {
                        const t = this._buildKey(e),
                            s = u.a.getInstance();
                        return await s.removeItemAsync(t), this;
                    }
                }
                Object(d.singleton)(I)(
                    (M = class {
                        createCache(e) {
                            return new C(`${e}`);
                        }
                    })
                );
                var T,
                    O = s('ndDP');
                class E {
                    constructor(e, t) {
                        (this._unused_name = e), (this._lru = void 0), (this._lru = new O.default(t));
                    }
                    setItem(e, t) {
                        return this._lru.set(e, t), Promise.resolve(t);
                    }
                    getItem(e) {
                        return Promise.resolve(this._lru.get(e));
                    }
                    removeItem(e) {
                        return this._lru.delete(e), Promise.resolve(this);
                    }
                }
                Object(d.singleton)(_)(
                    (T = class {
                        constructor() {
                            this._registry = {};
                        }
                        createCache(e, t) {
                            return this._registry[e] || (this._registry[e] = new E(e, t)), this._registry[e];
                        }
                    })
                );
                s('0rWR'), s('Lq8m'), s('nUpV'), s('5yGw'), s('hRcX'), s('gpNb'), s('rhBN'), s('cF85');
                var S = s('4prX'),
                    w = s('12Ui');
                d.ModuleContainer.registerSingleton(
                    w.a,
                    class {
                        increaseSuccess(e, t, s, i, n) {
                            S.default.increaseSuccess(e, t, s, i, n);
                        }
                        increaseFailed(e, t, s, i, n, r, a) {
                            S.default.increaseFailed(e, t, s, i, n, r, a);
                        }
                    }
                );
                var D,
                    L = s('8/YW'),
                    F = s('PmZf'),
                    R = s('tHMN'),
                    A = s('jIg3'),
                    P = s('fsN4'),
                    N = s('Mgpg');
                let j =
                    d.ModuleContainer.injectable()(
                        (D =
                            (function (e, t) {
                                return d.ModuleContainer.inject(R.b)(e, void 0, 0);
                            })(
                                (D =
                                    (function (e, t) {
                                        return d.ModuleContainer.inject(N.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (D =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (D =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === R.a ? Object : R.a,
                                                        void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                    ])(
                                                        (D = class extends A.a {
                                                            constructor(e, t) {
                                                                super(),
                                                                    (this.engine = e),
                                                                    (this.logger = void 0),
                                                                    (this.logger = t.createZLogger('db', ['browser'])),
                                                                    this.engine.addEventListener(
                                                                        F.a.UnexpectedError,
                                                                        (e) => {
                                                                            this.dispatchEvent(new F.d(e.error));
                                                                        }
                                                                    ),
                                                                    this.engine.addEventListener(
                                                                        F.a.QueryError,
                                                                        (e) => {
                                                                            this.dispatchEvent(new F.b(e.error));
                                                                        }
                                                                    );
                                                            }
                                                            install() {
                                                                const e = d.ModuleContainer.resolve(L.a);
                                                                e.addEventListener(L.b.Authenticated, (e) => {
                                                                    this.authenticate(e.getSession());
                                                                }),
                                                                    e.currentSession &&
                                                                        this.authenticate(e.currentSession),
                                                                    this.logger.zsymb(3, 10296, 3e4, 'installed');
                                                            }
                                                            areYouOk() {
                                                                return !0;
                                                            }
                                                            authenticate(e) {
                                                                e &&
                                                                    ((this.session = e),
                                                                    this.dispatchEvent(new F.c(e)),
                                                                    this.logger.zsymb(0, 10296, 30001, () => [
                                                                        'authenticated',
                                                                        `id: ${e.userId}`,
                                                                    ]));
                                                            }
                                                            async closeDBs(e) {
                                                                const t = P.a.getInstance();
                                                                let s = [];
                                                                e
                                                                    ? e.length &&
                                                                      (s = e.map((e) => t[e].closeThisDatabase()))
                                                                    : (s = [t.closeAllDatabases()]),
                                                                    await Promise.all(s);
                                                            }
                                                        })
                                                    ) || D)
                                            ) || D)
                                    ) || D)
                            ) || D)
                    ) || D;
                d.ModuleContainer.registerSingleton(A.b, j);
                var U,
                    B = s('W8fB');
                let k = Object(d.injectable)()((U = class {})) || U;
                d.ModuleContainer.registerSingleton(B.b, k);
                var G = s('AH6j'),
                    x = s('fsQs'),
                    z = s('HPcM');
                let V;
                !(function (e) {
                    (e.Binary = 'zlog'), (e.Text = 'log');
                })(V || (V = {}));
                V.Binary, V.Text;
                let $, W;
                !(function (e) {
                    (e.PhysicalTextWriter = 'PhysicalTextWriter'),
                        (e.PhysicalBinaryWriter = 'PhysicalBinaryWriter'),
                        (e.PhysicalMeta = 'PhysicalMeta');
                })($ || ($ = {})),
                    (function (e) {
                        (e.Init = 'Init'),
                            (e.Idle = 'Idle'),
                            (e.Busy = 'Busy'),
                            (e.Paused = 'Paused'),
                            (e.Disabled = 'Disabled');
                    })(W || (W = {}));
                const K = Object(d.define)('virtual-file-writer');
                var q;
                let H =
                    Object(d.injectable)()(
                        (q =
                            (function (e, t) {
                                return Object(d.inject)(z.a)(e, void 0, 0);
                            })(
                                (q =
                                    (function (e, t) {
                                        return Object(d.inject)(K)(e, void 0, 1);
                                    })(
                                        (q =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (q =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === z.a ? Object : z.a,
                                                        void 0 === K ? Object : K,
                                                    ])(
                                                        (q = class extends G.b {
                                                            constructor(e, t) {
                                                                super(),
                                                                    (this.bucket = e),
                                                                    (this.logWriter = t),
                                                                    (this._mode = void 0),
                                                                    (this.status = W.Init),
                                                                    (this._mode = V.Binary);
                                                            }
                                                            async init() {
                                                                x.n && p.a.log('DBLogWriterImpl.init()');
                                                                try {
                                                                    await this.logWriter.loadMeta(),
                                                                        this._mode === V.Binary &&
                                                                            (await this.logWriter.loadModule());
                                                                } catch (e) {
                                                                    p.a.debug(
                                                                        '[ZLL]: DBLogWriterImpl.init() failed',
                                                                        e
                                                                    );
                                                                }
                                                                (this.status = W.Idle),
                                                                    x.n &&
                                                                        p.a.log(
                                                                            '[ZLL]: DBLogWriterImpl init() DONE',
                                                                            W[this.status]
                                                                        );
                                                            }
                                                            async flush() {
                                                                if (this.status !== W.Idle) return;
                                                                let e = Date.now();
                                                                if (0 === this.bucket.size()) return;
                                                                x.n &&
                                                                    p.a.log(
                                                                        `FLUSHING: ${this.bucket.size()} logs => DB`
                                                                    ),
                                                                    (this.status = W.Busy);
                                                                const t = this.bucket.get(x.j),
                                                                    s = t.length;
                                                                (await this.logWriter.write(t))
                                                                    ? (await this.logWriter.flushMetas(),
                                                                      this.bucket.removeFirst(s - t.length))
                                                                    : t.length > 0 &&
                                                                      p.a.error(
                                                                          `[ZLL]: flush failed: ${
                                                                              s - t.length
                                                                          }/${s}. failed:${t.length}/${s}`
                                                                      ),
                                                                    this._mode === V.Binary &&
                                                                        (await this.logWriter.flushModules()),
                                                                    (this.status = W.Idle),
                                                                    x.n &&
                                                                        p.a.log(
                                                                            `FLUSHED: ${
                                                                                s - t.length
                                                                            }/${s} logs => DB. TOOK: ${
                                                                                Date.now() - e
                                                                            }ms`
                                                                        );
                                                            }
                                                        })
                                                    ) || q)
                                            ) || q)
                                    ) || q)
                            ) || q)
                    ) || q;
                var Q,
                    J = s('ebA4'),
                    Z = s('ez9R'),
                    X = s('XuBa'),
                    Y = s('j6JD');
                const ee = { id: 0, current: 0, currentPage: 0, startups: [], ss: -1, ss_ln: -1 };
                let te =
                    Object(d.injectable)()(
                        (Q =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (Q =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (Q = class {
                                            constructor() {
                                                (this._status = void 0),
                                                    (this.BinEncoder = null),
                                                    (this.DB = void 0),
                                                    (this.currentPage = void 0),
                                                    (this.module = new Map()),
                                                    (this.metas = { data: ee, updateRequired: !1 }),
                                                    (this._status = W.Idle),
                                                    (this.DB = P.a.getInstance().ZLog);
                                            }
                                            get status() {
                                                return this._status;
                                            }
                                            async write(e) {
                                                try {
                                                    return (
                                                        (this._status = W.Busy),
                                                        await this.encodeFit(e, this.metas),
                                                        (this._status = W.Idle),
                                                        !0
                                                    );
                                                } catch (t) {
                                                    return (
                                                        p.a.error(`[ZLL]: VirtualFileWriterImpl.write err ${t}`),
                                                        (this._status = W.Idle),
                                                        !1
                                                    );
                                                }
                                            }
                                            async collectAllLogs() {
                                                try {
                                                    const e = (await this.DB.Pages.getAll()).map((e) =>
                                                            e.data.slice(0, e.curoffs)
                                                        ),
                                                        t = new Blob(e);
                                                    return await t.arrayBuffer();
                                                } catch (e) {
                                                    return (
                                                        p.a.error(
                                                            `[ZLL]:VirtualFileWriterImpl.getAllPagesCombine err ${e}`
                                                        ),
                                                        new ArrayBuffer(0)
                                                    );
                                                }
                                            }
                                            async read(e) {
                                                try {
                                                    return await this.DB.Pages.get(e);
                                                } catch (t) {
                                                    return void p.a.error(
                                                        `[ZLL]: VirtualFileWriterImpl.reading ${e} err ${t}`
                                                    );
                                                }
                                            }
                                            async delete(e) {
                                                try {
                                                    return await this.DB.Pages.delete(e), !0;
                                                } catch (t) {
                                                    return (
                                                        p.a.error(`[ZLL]:VirtualFileWriterImpl.deleting ${e} err ${t}`),
                                                        !1
                                                    );
                                                }
                                            }
                                            async encodeFit(e, t) {
                                                var s;
                                                if (0 === e.length) return;
                                                const i = [],
                                                    n = x.d.page_limit;
                                                (this.currentPage && this.currentPage.id === t.data.currentPage) ||
                                                    ((this.currentPage = await this.DB.Pages.get(t.data.currentPage)),
                                                    this.currentPage && (this.currentPage.curoffs = 0));
                                                let r = 0;
                                                const a =
                                                    n -
                                                    ((null === (s = this.currentPage) || void 0 === s
                                                        ? void 0
                                                        : s.curoffs) || 0);
                                                let o = x.c.OK;
                                                for (; e.length; ) {
                                                    const t = await this.encodeBinary(e[0]);
                                                    if (r + t.byteLength > a) {
                                                        o = x.c.OVERSIZE_NEXTPAGE;
                                                        break;
                                                    }
                                                    i.push(new Uint8Array(t)), (r += t.byteLength), e.shift();
                                                }
                                                if (0 === i.length && o === x.c.OVERSIZE_NEXTPAGE) {
                                                    if (
                                                        this.currentPage &&
                                                        this.currentPage.curoffs < this.currentPage.data.size
                                                    ) {
                                                        const e = this.currentPage.data.slice(
                                                            0,
                                                            this.currentPage.curoffs
                                                        );
                                                        (this.currentPage.data = e),
                                                            await this.DB.Pages.insert(this.currentPage, {
                                                                replace: !0,
                                                            });
                                                    }
                                                    return (
                                                        this.nextPage(t),
                                                        void (await this.DB.Metas.insert(t.data, { replace: !0 }))
                                                    );
                                                }
                                                if (!i.length) return;
                                                const d = this.combineArrayBuffers(i);
                                                if (this.currentPage) {
                                                    if (d.byteLength) {
                                                        const e = this.currentPage.data.slice(
                                                                0,
                                                                this.currentPage.curoffs
                                                            ),
                                                            t = new Blob([e, d]);
                                                        (this.currentPage.data = t),
                                                            (this.currentPage.curoffs += d.byteLength),
                                                            (this.currentPage.max = x.d.page_limit),
                                                            (this.currentPage.mtime = Date.now());
                                                    }
                                                    o === x.c.OVERSIZE_NEXTPAGE
                                                        ? this.nextPage(t)
                                                        : (t.data.current = this.currentPage.curoffs),
                                                        d.byteLength &&
                                                            (await this.DB.Pages.insert(this.currentPage, {
                                                                replace: !0,
                                                            }));
                                                    try {
                                                        await this.DB.Metas.insert(t.data, { replace: !0 });
                                                    } catch (l) {
                                                        p.a.error('[ZLL]: VirtualFileWriterImpl.encodeFit err2', l);
                                                    }
                                                } else {
                                                    (this.currentPage = {
                                                        id: t.data.currentPage,
                                                        data: new Blob([d]),
                                                        curoffs: d.byteLength,
                                                        max: x.d.page_limit,
                                                        mtime: Date.now(),
                                                    }),
                                                        (t.data.current = d.byteLength);
                                                    try {
                                                        await this.DB.Pages.insert(this.currentPage, { replace: !0 }),
                                                            await this.DB.Metas.insert(t.data, { replace: !0 });
                                                    } catch (l) {
                                                        p.a.error('[ZLL]:VirtualFileWriterImpl.encodeFit err', l);
                                                    }
                                                }
                                            }
                                            combineArrayBuffers(e) {
                                                const t = e.reduce((e, t) => e + t.byteLength, 0),
                                                    s = new Uint8Array(t);
                                                let i = 0;
                                                for (const n of e) s.set(new Uint8Array(n), i), (i += n.byteLength);
                                                return s.buffer;
                                            }
                                            getSessionLineId() {
                                                let e = this.metas.data.ss;
                                                const t = (this.metas.data.ss_ln + 1) % x.m.SESSION_LINE_MAX;
                                                return (
                                                    0 === t && (e = (e + 1) % x.m.SESSION_MAX),
                                                    (this.metas.data.ss = e),
                                                    (this.metas.data.ss_ln = t),
                                                    { ss: e, ss_ln: t }
                                                );
                                            }
                                            encodeText(e) {
                                                const t = this.getSessionLineId();
                                                return Object(J.b)(e, t).buffer;
                                            }
                                            async encodeBinary(e) {
                                                this.BinEncoder || (this.BinEncoder = d.ModuleContainer.resolve(Z.a));
                                                const t = await this._getModule([
                                                        e.lineMeta.module,
                                                        e.lineMeta.features,
                                                    ]),
                                                    s = this.getSessionLineId();
                                                return this.BinEncoder.encode(e, t.data.id, s);
                                            }
                                            nextPage(e) {
                                                const t = x.d.page_limit,
                                                    s = x.d.file_lim,
                                                    i = Math.floor(s / t),
                                                    n = (e.data.currentPage + 1) % i;
                                                return (
                                                    (e.updateRequired = !0),
                                                    (e.data.currentPage = n),
                                                    (e.data.current = 0),
                                                    e
                                                );
                                            }
                                            async loadMeta() {
                                                try {
                                                    let e = await this.DB.Metas.get(0);
                                                    e || (e = ee),
                                                        e.startups.length > x.a &&
                                                            (e.startups = e.startups.slice(0, x.a)),
                                                        e.startups.unshift(Object(Y.a)(Date.now())),
                                                        (e.ss = void 0 !== e.ss ? e.ss : -1),
                                                        (e.ss_ln = -1),
                                                        (this.metas.data = e),
                                                        (this.metas.updateRequired = !1);
                                                } catch (e) {
                                                    p.a.error(`[ZLL]: VirtualFileWriterImpl.loadMeta err ${e}`);
                                                }
                                                return await this._loadCurrentPage(), this.metas;
                                            }
                                            async flushMetas() {
                                                this.metas.updateRequired &&
                                                    (await this.DB.Metas.insert(this.metas.data, {
                                                        replace: !0,
                                                        retry: 1,
                                                    }));
                                            }
                                            async loadModule() {
                                                try {
                                                    const e = await this.DB.Modules.getAll();
                                                    if (e) {
                                                        const t = e.map((e) => [
                                                            X.a.decrypt(e.hash),
                                                            { data: e, updateRequired: !1 },
                                                        ]);
                                                        this.module = new Map(t);
                                                    }
                                                } catch (e) {
                                                    p.a.error(`[ZLL]: VirtualFileWriterImpl.loadModule err ${e}`);
                                                }
                                                return this.module;
                                            }
                                            async flushModules() {
                                                const e = Array.from(this.module.values());
                                                for (const t of e)
                                                    t.updateRequired &&
                                                        (await this.DB.Modules.insert(t.data, { retry: 1 }),
                                                        (t.updateRequired = !1));
                                            }
                                            async _loadCurrentPage() {
                                                this.metas || (await this.loadMeta());
                                                const e = await this.DB.Pages.get(this.metas.data.currentPage);
                                                return (this.currentPage = e), e;
                                            }
                                            async _getModule(e) {
                                                const t = JSON.stringify(e),
                                                    s = this.module.get(t);
                                                if (s) return s;
                                                const i = X.a.encrypt(t),
                                                    n = { data: { id: this.module.size, hash: i }, updateRequired: !0 };
                                                return this.module.set(t, n), n;
                                            }
                                        })
                                    ) || Q)
                            ) || Q)
                    ) || Q;
                d.ModuleContainer.registerSingleton(K, te), d.ModuleContainer.registerSingleton(B.c, H);
                const se = Object(d.define)('zlog-writer-manager');
                var ie,
                    ne = s('Y41u'),
                    re = s('K8kB');
                let ae =
                    Object(d.injectable)()(
                        (ie =
                            (function (e, t) {
                                return Object(d.inject)(re.a)(e, void 0, 0);
                            })(
                                (ie =
                                    (function (e, t) {
                                        return Object(d.inject)(B.c)(e, void 0, 1);
                                    })(
                                        (ie =
                                            (function (e, t) {
                                                return Object(d.inject)(B.b)(e, void 0, 2);
                                            })(
                                                (ie =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (ie =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === re.a ? Object : re.a,
                                                                void 0 === B.c ? Object : B.c,
                                                                void 0 === B.b ? Object : B.b,
                                                            ])(
                                                                (ie = class {
                                                                    constructor(e, t, s) {
                                                                        (this._writeScheduler = e),
                                                                            (this.zlogWriter = t),
                                                                            (this.senWriter = s),
                                                                            (this._handleFlushRequest = () => {
                                                                                this.zlogWriter.flush();
                                                                            }),
                                                                            (this._handleWriterStatus = (e) => {});
                                                                    }
                                                                    setupWriters() {
                                                                        this.zlogWriter.init(),
                                                                            this._writeScheduler.start(),
                                                                            this._listenEvents();
                                                                    }
                                                                    _listenEvents() {
                                                                        this._writeScheduler.addEventListener(
                                                                            ne.c.WriteSchedulerRequestFlush,
                                                                            this._handleFlushRequest
                                                                        ),
                                                                            this.zlogWriter.addEventListener(
                                                                                ne.c.WriterStatus,
                                                                                this._handleWriterStatus
                                                                            );
                                                                    }
                                                                })
                                                            ) || ie)
                                                    ) || ie)
                                            ) || ie)
                                    ) || ie)
                            ) || ie)
                    ) || ie;
                d.ModuleContainer.registerSingleton(se, ae);
                var oe,
                    de = s('OMsT'),
                    le = s('XS0u');
                let ce =
                    Object(d.injectable)()(
                        (oe = class {
                            clientDeviceInfo() {
                                return navigator.userAgent;
                            }
                            prepareLogBlob(e) {
                                return new Promise((t, i) => {
                                    let n = e.viewerKey;
                                    if (!n) {
                                        n = le.default.getLastViewKey() || '';
                                        try {
                                            var r;
                                            n = null === (r = n) || void 0 === r ? void 0 : r.split('.')[0];
                                        } catch {}
                                    }
                                    const a = new (s('xOOu'))(),
                                        o = [this.collectLDBLogs(), this.collectLDBMetas(), this.collectLDBModules()];
                                    Promise.all(o).then((s) => {
                                        const [r, o, d] = s;
                                        {
                                            const e = `${Object(m.a)()}.zlog`;
                                            a.file(e, r);
                                        }
                                        {
                                            const e = `${Object(m.a)()}.meta`;
                                            a.file(e, o);
                                        }
                                        {
                                            const e = `${Object(m.a)()}.module`;
                                            a.file(e, d);
                                        }
                                        {
                                            const e = 'device.zinfo',
                                                t = new TextEncoder();
                                            a.file(e, t.encode(this.clientDeviceInfo()).buffer);
                                        }
                                        a.generateAsync({ type: 'arraybuffer', compression: 'DEFLATE' })
                                            .then((s) => {
                                                if (e.bareContent)
                                                    t({ name: `zlog_${n}_${Date.now()}.zip`, data: new Uint8Array(s) });
                                                else {
                                                    const e = new Blob([new Uint8Array(s)]);
                                                    (e.name = `zlog_${n}_${Date.now()}.zip`), t(e);
                                                }
                                            })
                                            .catch((e) => {
                                                i(e);
                                            });
                                    });
                                });
                            }
                            async collectLDBLogs() {
                                try {
                                    const e = P.a.getInstance().ZLog,
                                        t = (await e.Pages.getAll()).map((e) => e.data),
                                        s = new Blob(t);
                                    return await s.arrayBuffer();
                                } catch (e) {
                                    return (
                                        p.a.error(`VirtualFileWriterImpl.getAllPagesCombine err ${e}`),
                                        new ArrayBuffer(0)
                                    );
                                }
                            }
                            async collectLDBMetas() {
                                try {
                                    const e = P.a.getInstance().ZLog,
                                        t = await e.Metas.get(0);
                                    if (t) {
                                        const e = new Blob([
                                            JSON.stringify({
                                                current: t.current,
                                                currentPage: t.currentPage,
                                                startups: t.startups,
                                            }),
                                        ]);
                                        return await e.arrayBuffer();
                                    }
                                    return new ArrayBuffer(0);
                                } catch (e) {
                                    return (
                                        p.a.error(`VirtualFileWriterImpl.getAllPagesCombine err ${e}`),
                                        new ArrayBuffer(0)
                                    );
                                }
                            }
                            async collectLDBModules() {
                                try {
                                    const e = P.a.getInstance().ZLog,
                                        t = await e.Modules.getAll();
                                    if (t) {
                                        const e = { size: 0 };
                                        t.forEach((t) => {
                                            (e[t.hash] = t.id), e.size++;
                                        });
                                        const s = new Blob([JSON.stringify(e)]);
                                        return await s.arrayBuffer();
                                    }
                                    return new ArrayBuffer(0);
                                } catch (e) {
                                    return (
                                        p.a.error(`VirtualFileWriterImpl.getAllPagesCombine err ${e}`),
                                        new ArrayBuffer(0)
                                    );
                                }
                            }
                        })
                    ) || oe;
                d.ModuleContainer.registerSingleton(de.a, ce);
                s('jw3m');
                var he = s('q1tI'),
                    ue = s.n(he),
                    ge = s('i8i4'),
                    me = s.n(ge),
                    pe = s('Jcee');
                class fe extends pe.b {
                    constructor(e, t, s, i) {
                        super(e, t, s),
                            (this.container = void 0),
                            (this.component = void 0),
                            (this.container = i.container),
                            (this.component = i.component);
                    }
                    async start() {
                        await super.start(), this.render();
                    }
                    render() {
                        me.a.render(ue.a.createElement(this.component), this.container);
                    }
                }
                let ve, be;
                !(function (e) {
                    (e.Idle = 'Idle'), (e.Active = 'Active');
                })(ve || (ve = {})),
                    (function (e) {
                        (e[(e.idle = 0)] = 'idle'), (e[(e.active = 1)] = 'active');
                    })(be || (be = {}));
                class ye extends G.b {
                    constructor(e) {
                        super(),
                            (this.status = be.active),
                            (this.window = void 0),
                            (this.idleDelay = void 0),
                            (this.minimumIdlePeriod = void 0),
                            (this.lastIdleTime = void 0),
                            (this.focusStateChangeDebounceTimer = void 0),
                            (this.handleDocumentBlur = () => {
                                this.resetFocusStateChangeDebounceTimer(),
                                    (this.focusStateChangeDebounceTimer = setTimeout(() => {
                                        this.setStateToIdle();
                                    }, this.idleDelay));
                            }),
                            (this.handleDocumentFocus = () => {
                                this.resetFocusStateChangeDebounceTimer(), this.setStateToActive();
                            }),
                            (this.idleDelay = e.idleDelay),
                            (this.minimumIdlePeriod = e.minimumIdlePeriod),
                            (this.window = e.window || window),
                            (this.lastIdleTime = 0),
                            (this.focusStateChangeDebounceTimer = null);
                    }
                    start() {
                        this.window.addEventListener('blur', this.handleDocumentBlur),
                            this.window.addEventListener('focus', this.handleDocumentFocus);
                    }
                    stop() {
                        this.window.removeEventListener('blur', this.handleDocumentBlur),
                            this.window.removeEventListener('focus', this.handleDocumentFocus);
                    }
                    onIdle(e) {
                        return this.addEventListener(ve.Idle, e);
                    }
                    setStateToActive() {
                        this.status !== be.idle ||
                            ((this.status = be.active), this.dispatchEvent(new Event(ve.Active)));
                    }
                    setStateToIdle() {
                        if (this.status !== be.active) return;
                        this.isThrottlingIdleState() ||
                            ((this.lastIdleTime = Date.now()),
                            (this.status = be.idle),
                            this.dispatchEvent(new Event(ve.Idle)));
                    }
                    isThrottlingIdleState() {
                        return Date.now() - this.lastIdleTime < this.minimumIdlePeriod;
                    }
                    resetFocusStateChangeDebounceTimer() {
                        this.focusStateChangeDebounceTimer &&
                            (clearTimeout(this.focusStateChangeDebounceTimer),
                            (this.focusStateChangeDebounceTimer = null));
                    }
                }
                var Ie = s('/MKj'),
                    _e = s('FK2X'),
                    Me = s('emRR'),
                    Ce = s('xrk1'),
                    Te = s('ZBGy'),
                    Oe = s('T1Xd'),
                    Ee = s('uzdi');
                const Se = Object(Ee.a)();
                function we() {
                    const e = Se.useRecoilSnapshot();
                    return Se.setSnapShot(e), null;
                }
                var De = s('QVmZ'),
                    Le = s('72hn'),
                    Fe = s('ZlRg'),
                    Re = s('VaDh'),
                    Ae = s('CzFt'),
                    Pe = s('hI9i');
                const Ne = Object(Ie.b)(
                        function (e) {
                            return {
                                user: e.user,
                                popup: e.popup,
                                status: e.status,
                                profile: e.profile,
                                zaviState: e.zaviState,
                                chatview: e.chatview,
                            };
                        },
                        function (e) {
                            const t = Object(Te.d)(e);
                            return { emitter: Object(Te.c)(), dispatch: t };
                        }
                    )(_e.c),
                    je = () =>
                        ue.a.createElement(
                            Ie.a,
                            { store: Ae.a, context: Ae.b },
                            ue.a.createElement(
                                Ce.d,
                                null,
                                ue.a.createElement(
                                    Ie.a,
                                    { store: De.a, context: Le.a },
                                    ue.a.createElement(
                                        Ie.a,
                                        { store: Me.default },
                                        ue.a.createElement(
                                            Ie.a,
                                            { store: Pe.b, context: Pe.a },
                                            ue.a.createElement(
                                                Te.b,
                                                null,
                                                ue.a.createElement(
                                                    Oe.a,
                                                    null,
                                                    ue.a.createElement(
                                                        Ie.a,
                                                        { context: Re.a, store: Fe.a },
                                                        ue.a.createElement(we, null),
                                                        ue.a.createElement(Ne, null)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        );
                var Ue;
                let Be =
                    Object(d.injectable)()(
                        (Ue =
                            (function (e, t) {
                                return Object(d.inject)(l.a)(e, void 0, 0);
                            })(
                                (Ue =
                                    (function (e, t) {
                                        return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (Ue =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (Ue =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === l.a ? Object : l.a,
                                                        void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                    ])(
                                                        (Ue = class extends fe {
                                                            constructor(e, t) {
                                                                super('zalo', e, t, {
                                                                    component: je,
                                                                    container: document.getElementById('app'),
                                                                });
                                                            }
                                                            async start() {
                                                                this.setupIdleDetector(), await super.start();
                                                            }
                                                            setupIdleDetector() {
                                                                const e = this.config.get('idle_detector'),
                                                                    t = new ye(e);
                                                                t.addEventListener(ve.Idle, () => {
                                                                    this.setStateToIdle();
                                                                }),
                                                                    t.addEventListener(ve.Active, () =>
                                                                        this.setStateToActive()
                                                                    ),
                                                                    t.start(),
                                                                    this.disposables.add(() => t.stop()),
                                                                    document.hasFocus()
                                                                        ? this.setStateToActive()
                                                                        : this.setStateToIdle();
                                                            }
                                                        })
                                                    ) || Ue)
                                            ) || Ue)
                                    ) || Ue)
                            ) || Ue)
                    ) || Ue;
                d.ModuleContainer.registerSingleton(L.a, Be);
                var ke = s('sxU/'),
                    Ge = s('SZ0g');
                d.ModuleContainer.registerValue(
                    Ge.a,
                    new (class {
                        constructor() {
                            (this._emitter = void 0), (this._emitter = ke.a.instance);
                        }
                        emit(e) {
                            return this._emitter.emit(e.topic, e), Promise.resolve();
                        }
                        on(e, t) {
                            return this._emitter.on(e, t), this;
                        }
                        off(e, t) {
                            return this._emitter.off(e, t), this;
                        }
                    })()
                );
                s('ahRi');
                var xe = s('ptxg'),
                    ze = s('pUq9');
                let Ve;
                (Ve = class {
                    getOverrideDomain(e) {}
                    getDomainConfig() {
                        return {};
                    }
                    setDomainConfig(e) {
                        return this;
                    }
                    subscribe(e) {
                        return () => {};
                    }
                }),
                    Object(d.injectable)()(Ve),
                    Object(d.singleton)(xe.a)(Ve);
                var $e,
                    We = s('NDmK'),
                    Ke = s('qLo6');
                Object(L.e)()(
                    ($e = class {
                        onAuthenticated(e) {
                            We.default.e2ee.enable_wasm &&
                                Ke.AesGcmWasmFactory.instance
                                    .installAndTestWasm()
                                    .then(() => {})
                                    .catch((e) => {});
                        }
                    })
                );
                s('o0oJ');
                var qe = s('dThN'),
                    He = s('z0WU'),
                    Qe = s('vSga');
                perf.record(perf.LOAD_APP_SCRIPT),
                    (function () {
                        window.__loadTimer && clearTimeout(window.__loadTimer);
                        window.__startTime &&
                            s('vbkW').ipcRenderer.send('load-shell-qos', Date.now() - window.__startTime);
                    })();
                s('FcQj');
                var Je = s('Ydol'),
                    Ze = s('97kL'),
                    Xe = s('eSGF');
                let Ye;
                function et() {
                    return (
                        Ye ||
                            (Ye = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger('utils', [
                                'event-bus-effects',
                            ])),
                        Ye
                    );
                }
                const tt = {
                    [Ze.FetchActions.DELETE_EVERYONE]: (e, t) => {
                        st(e.toUid, e.msgId);
                    },
                    [Ze.FetchActions.UNDO_MULTI]: (e, t) => {
                        var s;
                        null == e ||
                            null === (s = e.forEach) ||
                            void 0 === s ||
                            s.call(e, (e) => st(e.toUid || e.userId, e.msgId));
                    },
                    [Ze.FetchActions.UNDO]: (e, t) => {
                        st(e.toUid || e.userId, e.msgId);
                    },
                    [Ze.FetchActions.REMOVE_MEDIA]: (e, t) => {
                        for (let s of e.items) st(null == e ? void 0 : e.conversationId, null == s ? void 0 : s.msgId);
                    },
                    [Ze.ChatBoxActions.REMOVE_EXPIRED_MEDIA]: (e, t) => {
                        st(
                            null == e ? void 0 : e.conversationId,
                            (null == e ? void 0 : e.msgIds) || (null == e ? void 0 : e.msgId)
                        );
                    },
                    [Ze.ChatBoxActions.DELETE_MESSAGE]: (e, t) => {
                        const s = e.toUid || e.userId || (e.conversation && e.conversation.userId);
                        s !== We.default.sendToMeId && st(s, e.msgId);
                    },
                };
                function st(e, t) {
                    if (!e) return;
                    if (!t) return;
                    let s = Object(Xe.a)(t);
                    ke.a.instance.emit('media-removed', { convId: e, msgIds: s });
                }
                Je.default.subscribe(function (e, t) {
                    let s = tt[e];
                    if (s)
                        try {
                            s(t, e);
                        } catch (i) {
                            et().zsymb(18, 10277, 3e4, 'Failed to run side effect for event:' + e),
                                et().zsymb(18, 10277, 30001, [i]);
                        }
                });
                var it = s('2ua2');
                s.p;
                it.a.init(), He.default.checkSupport(), He.default.showWarningMsg();
                var nt,
                    rt = s('UiPd'),
                    at = s('Kvb3'),
                    ot = s('QPNp');
                Object(d.singleton)(at.a)(
                    (nt =
                        Object(L.e)()(
                            (nt =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (nt =
                                        Reflect.metadata(
                                            'design:paramtypes',
                                            []
                                        )(
                                            (nt = class {
                                                constructor() {
                                                    (this._isConnectSignalChangeInfo = void 0),
                                                        (this._ipc = void 0),
                                                        (this._dispatch = void 0),
                                                        (this._authEvent = void 0),
                                                        (this._isConnectSignalChangeInfo = !1),
                                                        (this.signalInfoChange = this.signalInfoChange.bind(this));
                                                }
                                                isWeb() {
                                                    return !0;
                                                }
                                                getIPC() {
                                                    if (!this.isWeb()) {
                                                        if (!this._ipc) {
                                                            const { ipcRenderer: e } = s('vbkW');
                                                            this._ipc = e;
                                                        }
                                                        return this._ipc;
                                                    }
                                                    return null;
                                                }
                                                bindDispatch(e) {
                                                    this._dispatch = e;
                                                }
                                                getDispatch() {
                                                    return this._dispatch;
                                                }
                                                async preFormatPayload(e) {
                                                    let t = Object(i.a)({}, e);
                                                    if (t.conversation) {
                                                        var s, n;
                                                        if (
                                                            null === (s = t.conversation.userId) ||
                                                            void 0 === s ||
                                                            null === (n = s.startsWith) ||
                                                            void 0 === n
                                                                ? void 0
                                                                : n.call(s, v.GROUPID_PREFIX)
                                                        ) {
                                                            const e = t.conversation.userId,
                                                                s = await ot.a.GroupManager.get(e);
                                                            if (
                                                                (s &&
                                                                    ((t.conversation.topMember = s.topMembers),
                                                                    (t.conversation.displayName = s.displayName)),
                                                                t.conversation.topMember)
                                                            )
                                                                for (const i of t.conversation.topMember) {
                                                                    const e = rt.default.getMiniInfo(i.id);
                                                                    e && ((i.dName = e.dName), (i.avatar = e.avatar));
                                                                }
                                                        } else {
                                                            const e = rt.default.getMiniInfo(t.conversation.userId);
                                                            e &&
                                                                ((t.conversation.displayName = e.dName),
                                                                (t.conversation.avatar = e.avatar));
                                                        }
                                                    }
                                                    return t;
                                                }
                                                signalInfoChange(e) {
                                                    if (!this.isWeb()) {
                                                        const t = this.getIPC();
                                                        t && t.send('update-info-photo-viewer', e);
                                                    }
                                                }
                                                connectSignalToFriendWorker() {
                                                    this._isConnectSignalChangeInfo ||
                                                        ((this._isConnectSignalChangeInfo = !0),
                                                        rt.default.connectSignalChangeDNameAndAvatar(
                                                            this.signalInfoChange
                                                        ));
                                                }
                                                onAuthenticated(e) {
                                                    this._authEvent = e;
                                                }
                                                _addSession(e) {
                                                    var t;
                                                    return (
                                                        ((e = Object(i.a)({}, e)).session =
                                                            null === (t = this._authEvent) || void 0 === t
                                                                ? void 0
                                                                : t.getSession()),
                                                        e
                                                    );
                                                }
                                                async openPhotoViewer(e) {
                                                    let t = await this.preFormatPayload(e);
                                                    (t = this._addSession(t)), this.connectSignalToFriendWorker();
                                                    const s = this.getDispatch();
                                                    s && s({ type: Ze.ChatBoxActions.SHOW_FULL_IMAGE, payload: t });
                                                }
                                            })
                                        ) || nt)
                                ) || nt)
                        ) || nt)
                );
                var dt,
                    lt = s('vQ8b'),
                    ct = s('smi1'),
                    ht = s('gEkt'),
                    ut = s('yzMR');
                let gt =
                    Object(d.injectable)()(
                        (dt =
                            (function (e, t) {
                                return d.ModuleContainer.inject(ut.i)(e, void 0, 0);
                            })(
                                (dt =
                                    (function (e, t) {
                                        return d.ModuleContainer.inject(ut.h)(e, void 0, 1);
                                    })(
                                        (dt =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (dt =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === ut.i ? Object : ut.i,
                                                        void 0 === ut.h ? Object : ut.h,
                                                    ])(
                                                        (dt = class {
                                                            constructor(e, t) {
                                                                (this.unreadDataManager = e),
                                                                    (this.previewManager = t),
                                                                    (this.menuRef = void 0),
                                                                    (this.menuRef = {});
                                                            }
                                                            deleteConversation(e, t) {
                                                                void 0 === t && (t = !0),
                                                                    e != v.CONV_FILTER.STRANGER &&
                                                                        (He.default.logCoreError(
                                                                            `[user call del conv] ${e}`
                                                                        ),
                                                                        ct.a
                                                                            .deleteConversation(e, t)
                                                                            .then((e) => {
                                                                                e &&
                                                                                    e.delConversationId &&
                                                                                    Object(Te.f)({
                                                                                        type: Ze.ConversationListActions
                                                                                            .TAG_CONV,
                                                                                        payload: {
                                                                                            data: [
                                                                                                {
                                                                                                    userId: e.delConversationId,
                                                                                                    label: null,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    });
                                                                            })
                                                                            .catch((e) => {
                                                                                He.default.logCoreError(
                                                                                    'Delete conversation fail - ' +
                                                                                        JSON.stringify(e)
                                                                                );
                                                                            }));
                                                            }
                                                            bindUIMenu(e, t) {
                                                                this.menuRef[e] = t;
                                                            }
                                                            cleanUpUIMenu(e) {
                                                                this.menuRef[e] = null;
                                                            }
                                                            showMenu(e, t, s) {
                                                                if (this.menuRef[e] && e === ht.b)
                                                                    this.showConvActionMenu(t, s);
                                                            }
                                                            hideMenu(e) {
                                                                this.menuRef[e] && this.menuRef[e].close();
                                                            }
                                                            showConvActionMenu(e, t) {
                                                                if (t && t.friendItem) return;
                                                                const s = Object(i.a)({}, t),
                                                                    n = s.userId;
                                                                if (s && !He.default.isFakeId(n)) {
                                                                    const e = this.previewManager.getPreviewByIDSync(n),
                                                                        t =
                                                                            rt.default.getProfileFriendByIdSync(n) ||
                                                                            {},
                                                                        i =
                                                                            this.unreadDataManager.getUnreadByConvIdSync(
                                                                                n
                                                                            );
                                                                    (s.lastMessage = null == e ? void 0 : e.message),
                                                                        (s.isFr = t.isFr),
                                                                        (s.type = t.type),
                                                                        (s.unreadMark =
                                                                            null == i ? void 0 : i.unreadMark),
                                                                        (s.smsUnreadCount =
                                                                            null == i ? void 0 : i.smsUnreadCount);
                                                                }
                                                                this.menuRef[ht.b].updateTargetInfo(s),
                                                                    this.menuRef[ht.b].showAction(Object(i.a)({}, e));
                                                            }
                                                        })
                                                    ) || dt)
                                            ) || dt)
                                    ) || dt)
                            ) || dt)
                    ) || dt;
                var mt,
                    pt = s('rCQs'),
                    ft = s('iZzu'),
                    vt = s('Yi2m'),
                    bt = s('6Vk1'),
                    yt = s('RojW'),
                    It = s('rXIX'),
                    _t = s('EFQ6'),
                    Mt = s('3xbP'),
                    Ct = s('l+Gc'),
                    Tt = s('h0sc'),
                    Ot = s('VTLO'),
                    Et = s('LJTV'),
                    St = s('Enw1'),
                    wt = s('PoHQ'),
                    Dt = s('M7kw'),
                    Lt = s('Ws4b'),
                    Ft = s('6uTC'),
                    Rt = s('c51z'),
                    At = s('Ja3U'),
                    Pt = s('SdS7'),
                    Nt = s('WQAo'),
                    jt = s('Gm1y'),
                    Ut = s('P6UB'),
                    Bt = s('FEfs'),
                    kt = s('h0S/');
                const Gt = {
                        typeFilter: ft.FilterType.ALL,
                        labelFilters: [],
                        loaded: !1,
                        isEnableArchivedChat: !!Bt.a.isEnableArchivedChat(),
                        hasUnreadArchivedChat: !1,
                        typeFilterSrc: ft.FilterSrcType.ALL,
                    },
                    xt = 'z_sendtome_bubbledot';
                Object(pt.b)(ft.ConvListController)(
                    (mt =
                        (function (e, t) {
                            return d.ModuleContainer.inject(ut.b)(e, void 0, 0);
                        })(
                            (mt =
                                (function (e, t) {
                                    return d.ModuleContainer.inject(bt.b)(e, void 0, 1);
                                })(
                                    (mt =
                                        (function (e, t) {
                                            return d.ModuleContainer.inject(ut.i)(e, void 0, 2);
                                        })(
                                            (mt =
                                                (function (e, t) {
                                                    return d.ModuleContainer.inject(ut.f)(e, void 0, 3);
                                                })(
                                                    (mt =
                                                        (function (e, t) {
                                                            return d.ModuleContainer.inject(ut.g)(e, void 0, 4);
                                                        })(
                                                            (mt =
                                                                (function (e, t) {
                                                                    return d.ModuleContainer.inject(ut.a)(e, void 0, 5);
                                                                })(
                                                                    (mt =
                                                                        Reflect.metadata(
                                                                            'design:type',
                                                                            Function
                                                                        )(
                                                                            (mt =
                                                                                Reflect.metadata('design:paramtypes', [
                                                                                    void 0 === ut.b ? Object : ut.b,
                                                                                    void 0 === bt.b ? Object : bt.b,
                                                                                    void 0 === ut.i ? Object : ut.i,
                                                                                    void 0 === ut.f ? Object : ut.f,
                                                                                    void 0 === ut.g ? Object : ut.g,
                                                                                    void 0 === ut.a ? Object : ut.a,
                                                                                ])(
                                                                                    (mt = class extends G.b {
                                                                                        constructor(e, t, s, i, n, r) {
                                                                                            var a;
                                                                                            super(),
                                                                                                (a = this),
                                                                                                (this.convDataManager =
                                                                                                    e),
                                                                                                (this.labelDataManager =
                                                                                                    t),
                                                                                                (this.unreadDataManager =
                                                                                                    s),
                                                                                                (this.muteDataManager =
                                                                                                    i),
                                                                                                (this.pinDataManager =
                                                                                                    n),
                                                                                                (this.archivedChatManager =
                                                                                                    r),
                                                                                                (this.typeFilter =
                                                                                                    void 0),
                                                                                                (this.labelFilters =
                                                                                                    void 0),
                                                                                                (this.listRawAll =
                                                                                                    void 0),
                                                                                                (this.listVisible =
                                                                                                    void 0),
                                                                                                (this.listStrangers =
                                                                                                    void 0),
                                                                                                (this.listHiddens =
                                                                                                    void 0),
                                                                                                (this.listFiltered =
                                                                                                    void 0),
                                                                                                (this.newestStrangerId =
                                                                                                    void 0),
                                                                                                (this.menuRef = void 0),
                                                                                                (this.convUIListContainer =
                                                                                                    void 0),
                                                                                                (this.showedOnboarding =
                                                                                                    void 0),
                                                                                                (this.loaded = void 0),
                                                                                                (this.isEnableArchivedChat =
                                                                                                    void 0),
                                                                                                (this.typeFilterSrc =
                                                                                                    void 0),
                                                                                                (this.hasUnreadArchivedChat =
                                                                                                    void 0),
                                                                                                (this._logger = void 0),
                                                                                                (this._pm = null),
                                                                                                (this._sbc = null),
                                                                                                (this.handleMuteChange =
                                                                                                    (e) => {
                                                                                                        const t =
                                                                                                                e.convId,
                                                                                                            s =
                                                                                                                e.payload,
                                                                                                            i =
                                                                                                                this.listFiltered.includes(
                                                                                                                    t
                                                                                                                );
                                                                                                        this.logger.zsymb(
                                                                                                            0,
                                                                                                            10577,
                                                                                                            30002,
                                                                                                            'handleMuteChange',
                                                                                                            t,
                                                                                                            i,
                                                                                                            this
                                                                                                                .typeFilter,
                                                                                                            s
                                                                                                        ),
                                                                                                            i &&
                                                                                                                (this
                                                                                                                    .typeFilter ===
                                                                                                                    ft
                                                                                                                        .FilterType
                                                                                                                        .UNREAD ||
                                                                                                                    (this
                                                                                                                        .isEnableArchivedChat &&
                                                                                                                        this
                                                                                                                            .typeFilterSrc ===
                                                                                                                            ft
                                                                                                                                .FilterSrcType
                                                                                                                                .UNREAD)) &&
                                                                                                                this.addConvToUnreadFilterV2(
                                                                                                                    t
                                                                                                                );
                                                                                                    }),
                                                                                                (this.deleteConversation =
                                                                                                    function (e, t) {
                                                                                                        void 0 === t &&
                                                                                                            (t = !0),
                                                                                                            e !=
                                                                                                                v
                                                                                                                    .CONV_FILTER
                                                                                                                    .STRANGER &&
                                                                                                                (a.logger.zsymb(
                                                                                                                    18,
                                                                                                                    10577,
                                                                                                                    30006,
                                                                                                                    `[user call del conv] ${e}`
                                                                                                                ),
                                                                                                                ct.a
                                                                                                                    .deleteConversation(
                                                                                                                        e,
                                                                                                                        t
                                                                                                                    )
                                                                                                                    .then(
                                                                                                                        (
                                                                                                                            e
                                                                                                                        ) => {
                                                                                                                            e &&
                                                                                                                                e.delConversationId &&
                                                                                                                                Object(
                                                                                                                                    Te.f
                                                                                                                                )(
                                                                                                                                    {
                                                                                                                                        type: Ze
                                                                                                                                            .ConversationListActions
                                                                                                                                            .TAG_CONV,
                                                                                                                                        payload:
                                                                                                                                            {
                                                                                                                                                data: [
                                                                                                                                                    {
                                                                                                                                                        userId: e.delConversationId,
                                                                                                                                                        label: null,
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                    }
                                                                                                                                );
                                                                                                                        }
                                                                                                                    )
                                                                                                                    .catch(
                                                                                                                        (
                                                                                                                            e
                                                                                                                        ) => {
                                                                                                                            a.logger.zsymb(
                                                                                                                                18,
                                                                                                                                10577,
                                                                                                                                30007,
                                                                                                                                'Delete conversation fail - ' +
                                                                                                                                    JSON.stringify(
                                                                                                                                        e
                                                                                                                                    )
                                                                                                                            );
                                                                                                                        }
                                                                                                                    ));
                                                                                                    }),
                                                                                                (this.name =
                                                                                                    ft.CONV_LIST_CONTROLLER),
                                                                                                (this.data = new Map()),
                                                                                                (this.key = 'windowId'),
                                                                                                (this.isEnableArchivedChat =
                                                                                                    !1),
                                                                                                (this.typeFilter =
                                                                                                    ft.FilterType.ALL),
                                                                                                (this.labelFilters =
                                                                                                    []),
                                                                                                (this.typeFilterSrc =
                                                                                                    ft.FilterSrcType.ALL),
                                                                                                (this.listRawAll =
                                                                                                    new Set()),
                                                                                                (this.listVisible = []),
                                                                                                (this.listStrangers =
                                                                                                    []),
                                                                                                (this.listHiddens = []),
                                                                                                (this.listFiltered =
                                                                                                    []),
                                                                                                (this.newestStrangerId =
                                                                                                    ''),
                                                                                                (this.menuRef = {}),
                                                                                                (this.showedOnboarding =
                                                                                                    !1),
                                                                                                (this.loaded = !1),
                                                                                                (this.hasUnreadArchivedChat =
                                                                                                    !1),
                                                                                                (this.getRecentContactWithId =
                                                                                                    this.getRecentContactWithId.bind(
                                                                                                        this
                                                                                                    )),
                                                                                                (this.selectConversation =
                                                                                                    this.selectConversation.bind(
                                                                                                        this
                                                                                                    )),
                                                                                                (this.showBroadCastMsgModal =
                                                                                                    this.showBroadCastMsgModal.bind(
                                                                                                        this
                                                                                                    )),
                                                                                                (this.markAsRead =
                                                                                                    this.markAsRead.bind(
                                                                                                        this
                                                                                                    )),
                                                                                                this.addListener();
                                                                                        }
                                                                                        get logger() {
                                                                                            return (
                                                                                                this._logger ||
                                                                                                    (this._logger =
                                                                                                        d.ModuleContainer.resolve(
                                                                                                            N.ZLoggerFactory
                                                                                                        ).createZLogger(
                                                                                                            kt.b
                                                                                                                .conversation,
                                                                                                            [
                                                                                                                kt.b
                                                                                                                    .convList,
                                                                                                            ]
                                                                                                        )),
                                                                                                this._logger
                                                                                            );
                                                                                        }
                                                                                        get previewManager() {
                                                                                            return (
                                                                                                this._pm ||
                                                                                                    (this._pm =
                                                                                                        d.ModuleContainer.resolve(
                                                                                                            ut.h
                                                                                                        )),
                                                                                                this._pm
                                                                                            );
                                                                                        }
                                                                                        get sidebarController() {
                                                                                            return (
                                                                                                this._sbc ||
                                                                                                    (this._sbc =
                                                                                                        d.ModuleContainer.resolve(
                                                                                                            ft.SidebarController
                                                                                                        )),
                                                                                                this._sbc
                                                                                            );
                                                                                        }
                                                                                        get currUser() {
                                                                                            return Object(Lt.c)();
                                                                                        }
                                                                                        onTypeFilterChange(e, t) {
                                                                                            if (
                                                                                                e ===
                                                                                                ft.FilterType.UNREAD
                                                                                            ) {
                                                                                                const e =
                                                                                                    this.labelFilters
                                                                                                        .length > 0
                                                                                                        ? 1453215
                                                                                                        : 1453214;
                                                                                                vt.e.logAction(e),
                                                                                                    setTimeout(() => {
                                                                                                        this.scrollToTop(
                                                                                                            !1
                                                                                                        );
                                                                                                    });
                                                                                            } else
                                                                                                (e !==
                                                                                                    ft.FilterType
                                                                                                        .ARCHIVED &&
                                                                                                    e !==
                                                                                                        ft.FilterType
                                                                                                            .FOCUSED) ||
                                                                                                    this.typeFilter ===
                                                                                                        e ||
                                                                                                    setTimeout(() => {
                                                                                                        this.scrollToTop(
                                                                                                            !1
                                                                                                        );
                                                                                                    });
                                                                                            e ==
                                                                                                ft.FilterType
                                                                                                    .ARCHIVED &&
                                                                                                this
                                                                                                    .hasUnreadArchivedChat &&
                                                                                                (this.hasUnreadArchivedChat =
                                                                                                    !1),
                                                                                                this.applyTypeFilter(
                                                                                                    e,
                                                                                                    t
                                                                                                );
                                                                                        }
                                                                                        onLabelFilterChange(e) {
                                                                                            this.typeFilter ===
                                                                                                ft.FilterType.UNREAD &&
                                                                                                setTimeout(() => {
                                                                                                    this.scrollToTop(
                                                                                                        !1
                                                                                                    );
                                                                                                }),
                                                                                                this.applyLabelFilter(
                                                                                                    e
                                                                                                );
                                                                                        }
                                                                                        rerenderList() {
                                                                                            this.signalRenderList();
                                                                                        }
                                                                                        async onPreviewChange(e, t) {
                                                                                            if (!e || !t) return;
                                                                                            const s = e.convId;
                                                                                            if (
                                                                                                (this.listRawAll.add(s),
                                                                                                _t.a.isThreadHidden(s))
                                                                                            )
                                                                                                return void this.listHiddens.push(
                                                                                                    s
                                                                                                );
                                                                                            let i = s,
                                                                                                n = !1,
                                                                                                r = !1,
                                                                                                a = !1;
                                                                                            if (
                                                                                                await yt.a.isOATypeAsync(
                                                                                                    s
                                                                                                )
                                                                                            ) {
                                                                                                const e =
                                                                                                    this.convDataManager.getConvByIdSync(
                                                                                                        s
                                                                                                    );
                                                                                                if (
                                                                                                    !e ||
                                                                                                    !yt.a.popoutOA(e)
                                                                                                )
                                                                                                    return;
                                                                                            } else if (
                                                                                                yt.a.isStrangerV2(s) &&
                                                                                                ((n = !0),
                                                                                                this.listStrangers.includes(
                                                                                                    s
                                                                                                ) ||
                                                                                                    (this.logger.zsymb(
                                                                                                        0,
                                                                                                        10577,
                                                                                                        30001,
                                                                                                        `first new stranger msg ${s}`
                                                                                                    ),
                                                                                                    this.listStrangers.push(
                                                                                                        s
                                                                                                    )),
                                                                                                !this.isMeBAAccount())
                                                                                            ) {
                                                                                                const t =
                                                                                                        '0' ==
                                                                                                            e.fromUid ||
                                                                                                        this.convDataManager.isRespondedByMeSync(
                                                                                                            s
                                                                                                        ),
                                                                                                    n =
                                                                                                        this.listVisible.includes(
                                                                                                            s
                                                                                                        );
                                                                                                t ||
                                                                                                    (n &&
                                                                                                        ((a = !0),
                                                                                                        (this.listVisible =
                                                                                                            this.listVisible.filter(
                                                                                                                (e) =>
                                                                                                                    e !==
                                                                                                                    s
                                                                                                            ))),
                                                                                                    this.updateNewestStrangerId(
                                                                                                        this
                                                                                                            .listStrangers
                                                                                                    ),
                                                                                                    (i =
                                                                                                        v.CONV_FILTER
                                                                                                            .STRANGER)),
                                                                                                    t &&
                                                                                                        !n &&
                                                                                                        ((r = !0),
                                                                                                        this.listVisible.unshift(
                                                                                                            s
                                                                                                        ),
                                                                                                        this
                                                                                                            .newestStrangerId ===
                                                                                                            s &&
                                                                                                            this.updateNewestStrangerId(
                                                                                                                this
                                                                                                                    .listStrangers
                                                                                                            ));
                                                                                            }
                                                                                            const [o, d] =
                                                                                                yt.a.insertToProperPosition(
                                                                                                    this.listVisible,
                                                                                                    i,
                                                                                                    this.getAlterId()
                                                                                                );
                                                                                            this.listVisible = o;
                                                                                            const l =
                                                                                                    Ct.b.getLabelObjByConversaionId(
                                                                                                        s
                                                                                                    ),
                                                                                                c =
                                                                                                    l &&
                                                                                                    l.id &&
                                                                                                    this.labelFilters.includes(
                                                                                                        '' + l.id
                                                                                                    ),
                                                                                                h =
                                                                                                    n &&
                                                                                                    this.labelFilters.includes(
                                                                                                        ht.h
                                                                                                    ),
                                                                                                u = c || h,
                                                                                                g = d || r || a;
                                                                                            if (
                                                                                                this.typeFilter ===
                                                                                                ft.FilterType.ALL
                                                                                            )
                                                                                                this.addTabAllFiltered(
                                                                                                    s,
                                                                                                    u,
                                                                                                    g
                                                                                                );
                                                                                            else if (
                                                                                                this.typeFilter ===
                                                                                                ft.FilterType.UNREAD
                                                                                            )
                                                                                                this.addTabUnreadFiltered(
                                                                                                    s,
                                                                                                    u,
                                                                                                    n
                                                                                                );
                                                                                            else if (
                                                                                                this.typeFilter ===
                                                                                                ft.FilterType.STRANGER
                                                                                            ) {
                                                                                                const e =
                                                                                                        c ||
                                                                                                        !this
                                                                                                            .labelFilters
                                                                                                            .length,
                                                                                                    t = n && e;
                                                                                                this.addTabStrangerFiltered(
                                                                                                    s,
                                                                                                    t
                                                                                                );
                                                                                            } else
                                                                                                this
                                                                                                    .isEnableArchivedChat &&
                                                                                                    ((this.listFiltered =
                                                                                                        this.genListArchivedChat(
                                                                                                            this
                                                                                                                .listVisible,
                                                                                                            this
                                                                                                                .typeFilter ===
                                                                                                                ft
                                                                                                                    .FilterType
                                                                                                                    .ARCHIVED,
                                                                                                            this
                                                                                                                .labelFilters
                                                                                                        )),
                                                                                                    this.signalRenderList());
                                                                                        }
                                                                                        addTabAllFiltered(e, t, s) {
                                                                                            if (t) {
                                                                                                const [t, s] =
                                                                                                    yt.a.insertToProperPosition(
                                                                                                        this
                                                                                                            .listFiltered,
                                                                                                        e,
                                                                                                        this.getAlterId()
                                                                                                    );
                                                                                                s &&
                                                                                                    ((this.listFiltered =
                                                                                                        t),
                                                                                                    this.signalRenderList());
                                                                                            } else
                                                                                                s &&
                                                                                                    this.signalRenderList();
                                                                                        }
                                                                                        addTabUnreadFiltered(e, t, s) {
                                                                                            if (
                                                                                                this.listFiltered.includes(
                                                                                                    e
                                                                                                ) ||
                                                                                                !Ut.b.isMyMessage(
                                                                                                    this.previewManager.getPreviewByIDSync(
                                                                                                        e
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                                if (t)
                                                                                                    this.addConvToUnreadFilterV2(
                                                                                                        e
                                                                                                    );
                                                                                                else {
                                                                                                    if (
                                                                                                        this
                                                                                                            .labelFilters
                                                                                                            .length
                                                                                                    )
                                                                                                        return;
                                                                                                    this.isMeBAAccount() ||
                                                                                                    !s
                                                                                                        ? this.addConvToUnreadFilterV2(
                                                                                                              e
                                                                                                          )
                                                                                                        : this.addConvToUnreadFilterV2(
                                                                                                              v
                                                                                                                  .CONV_FILTER
                                                                                                                  .STRANGER
                                                                                                          );
                                                                                                }
                                                                                        }
                                                                                        addTabStrangerFiltered(e, t) {
                                                                                            if (!t) return;
                                                                                            const [s, i] =
                                                                                                yt.a.insertToProperPosition(
                                                                                                    this.listFiltered,
                                                                                                    e,
                                                                                                    this.getAlterId()
                                                                                                );
                                                                                            i &&
                                                                                                ((this.listFiltered =
                                                                                                    s),
                                                                                                this.signalRenderList());
                                                                                        }
                                                                                        addConvToUnreadFilterV2(e) {
                                                                                            if (
                                                                                                this.muteDataManager.isMuted(
                                                                                                    e
                                                                                                ) &&
                                                                                                !yt.a.getPinFromConvId(
                                                                                                    e
                                                                                                )
                                                                                            )
                                                                                                (this.listFiltered =
                                                                                                    this.safeSortConvList(
                                                                                                        this
                                                                                                            .listFiltered,
                                                                                                        !0
                                                                                                    )),
                                                                                                    this.signalRenderList();
                                                                                            else {
                                                                                                const [t, s] =
                                                                                                    yt.a.insertToProperPosition(
                                                                                                        this
                                                                                                            .listFiltered,
                                                                                                        e,
                                                                                                        this.getAlterId()
                                                                                                    );
                                                                                                s &&
                                                                                                    ((this.listFiltered =
                                                                                                        t),
                                                                                                    this.signalRenderList());
                                                                                            }
                                                                                        }
                                                                                        onPinChange(e) {
                                                                                            let t = !1;
                                                                                            for (
                                                                                                let s = 0;
                                                                                                s < e.length;
                                                                                                s++
                                                                                            ) {
                                                                                                const i = e[s].priority,
                                                                                                    n = e[s].id;
                                                                                                i
                                                                                                    ? (this.onPreviewChange(
                                                                                                          { convId: n },
                                                                                                          []
                                                                                                      ),
                                                                                                      (t = !1))
                                                                                                    : ((t = !0),
                                                                                                      (!this.previewManager.getPreviewByIDSync(
                                                                                                          n
                                                                                                      ) ||
                                                                                                          (!this.convDataManager.isRespondedByMeSync(
                                                                                                              n
                                                                                                          ) &&
                                                                                                              yt.a.isStrangerV2(
                                                                                                                  n
                                                                                                              ))) &&
                                                                                                          (this.listVisible =
                                                                                                              this.listVisible.filter(
                                                                                                                  (e) =>
                                                                                                                      e !==
                                                                                                                      n
                                                                                                              )));
                                                                                            }
                                                                                            t &&
                                                                                                ((this.listVisible =
                                                                                                    this.safeSortConvList(
                                                                                                        this
                                                                                                            .listVisible,
                                                                                                        !1
                                                                                                    )),
                                                                                                (this.typeFilter !==
                                                                                                    ft.FilterType.ALL ||
                                                                                                    this.labelFilters
                                                                                                        .length) &&
                                                                                                    (this.listFiltered =
                                                                                                        yt.a.sortConvId(
                                                                                                            this
                                                                                                                .listFiltered,
                                                                                                            this
                                                                                                                .typeFilter ===
                                                                                                                ft
                                                                                                                    .FilterType
                                                                                                                    .UNREAD,
                                                                                                            !0
                                                                                                        ))),
                                                                                                this.signalRenderList();
                                                                                        }
                                                                                        onHiddenChat(e, t) {
                                                                                            const s =
                                                                                                this.convDataManager.getConvByIdSync(
                                                                                                    e
                                                                                                );
                                                                                            if (
                                                                                                (this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30003,
                                                                                                    'onHiddenChat ',
                                                                                                    e,
                                                                                                    t,
                                                                                                    !!s
                                                                                                ),
                                                                                                t)
                                                                                            )
                                                                                                this.listHiddens.push(
                                                                                                    e
                                                                                                ),
                                                                                                    (this.listVisible =
                                                                                                        this.listVisible.filter(
                                                                                                            (t) =>
                                                                                                                t !== e
                                                                                                        )),
                                                                                                    (this.listFiltered =
                                                                                                        this.listFiltered.filter(
                                                                                                            (t) =>
                                                                                                                t !== e
                                                                                                        )),
                                                                                                    this.signalRenderList();
                                                                                            else {
                                                                                                if (
                                                                                                    !s &&
                                                                                                    !ot.a.PinDataManager.isPinned(
                                                                                                        e
                                                                                                    )
                                                                                                )
                                                                                                    return;
                                                                                                if (
                                                                                                    ((this.listHiddens =
                                                                                                        this.listHiddens.filter(
                                                                                                            (t) =>
                                                                                                                t !== e
                                                                                                        )),
                                                                                                    this.isMeBAAccount() ||
                                                                                                        !yt.a.isStrangerV2(
                                                                                                            e
                                                                                                        ) ||
                                                                                                        this.listStrangers.includes(
                                                                                                            e
                                                                                                        ))
                                                                                                ) {
                                                                                                    const [t, s] =
                                                                                                        yt.a.insertToProperPosition(
                                                                                                            this
                                                                                                                .listVisible,
                                                                                                            e,
                                                                                                            this.getAlterId()
                                                                                                        );
                                                                                                    this.listVisible =
                                                                                                        t;
                                                                                                } else
                                                                                                    this.listStrangers.push(
                                                                                                        e
                                                                                                    );
                                                                                                if (this.listFiltered) {
                                                                                                    const [t, s] =
                                                                                                        yt.a.insertToProperPosition(
                                                                                                            this
                                                                                                                .listFiltered,
                                                                                                            e,
                                                                                                            this.getAlterId()
                                                                                                        );
                                                                                                    (this.listFiltered =
                                                                                                        t),
                                                                                                        this
                                                                                                            .isEnableArchivedChat &&
                                                                                                            (this.listFiltered =
                                                                                                                this.genListArchivedChat(
                                                                                                                    this
                                                                                                                        .listVisible,
                                                                                                                    this
                                                                                                                        .typeFilter ===
                                                                                                                        ft
                                                                                                                            .FilterType
                                                                                                                            .ARCHIVED,
                                                                                                                    this
                                                                                                                        .labelFilters
                                                                                                                ));
                                                                                                }
                                                                                            }
                                                                                            this.signalRenderList();
                                                                                        }
                                                                                        getCurrentFilter() {
                                                                                            return {
                                                                                                type: this.typeFilter,
                                                                                                labels: this
                                                                                                    .labelFilters,
                                                                                            };
                                                                                        }
                                                                                        getRecentContacts() {
                                                                                            const e = [];
                                                                                            return (
                                                                                                this.listRawAll.forEach(
                                                                                                    (t) => {
                                                                                                        const s =
                                                                                                            this.convDataManager.getConvByIdSync(
                                                                                                                t
                                                                                                            );
                                                                                                        s && e.push(s);
                                                                                                    }
                                                                                                ),
                                                                                                e
                                                                                            );
                                                                                        }
                                                                                        getRecentContactWithId(e) {
                                                                                            if (
                                                                                                this.listRawAll.has(e)
                                                                                            ) {
                                                                                                return (
                                                                                                    this.convDataManager.getConvByIdSync(
                                                                                                        e
                                                                                                    ) || null
                                                                                                );
                                                                                            }
                                                                                            return null;
                                                                                        }
                                                                                        addConvToLabel(e, t) {
                                                                                            let s = Ct.b.getItem(t);
                                                                                            Tt.ModalManagerV2.openModal(
                                                                                                {
                                                                                                    windowId: Mt.c,
                                                                                                    name: v
                                                                                                        .ModalIdentitiesDefine
                                                                                                        .MANAGE_LABEL,
                                                                                                    params: {
                                                                                                        view: Ot.b
                                                                                                            .ADD_CONVERSATION,
                                                                                                        info: s,
                                                                                                    },
                                                                                                }
                                                                                            ),
                                                                                                e &&
                                                                                                    (e.preventDefault(),
                                                                                                    e.stopPropagation()),
                                                                                                vt.e.logAction(14521);
                                                                                        }
                                                                                        selectConversation(e) {
                                                                                            if (
                                                                                                (Et.b.startPerf(Et.a),
                                                                                                e.userId ===
                                                                                                    v.CONV_FILTER.MEDIA)
                                                                                            )
                                                                                                return void this.logger.zsymb(
                                                                                                    18,
                                                                                                    10577,
                                                                                                    30004,
                                                                                                    'No handler for mediabox. This feat disable!!!'
                                                                                                );
                                                                                            if (
                                                                                                e.userId ===
                                                                                                v.CONV_FILTER.STRANGER
                                                                                            )
                                                                                                return void (2 ==
                                                                                                Number(
                                                                                                    le.default.getConvUXVersion()
                                                                                                )
                                                                                                    ? this.applyTypeFilter(
                                                                                                          ft.FilterType
                                                                                                              .STRANGER
                                                                                                      )
                                                                                                    : this.labelDataManager.onSelectLabel(
                                                                                                          ht.h
                                                                                                      ));
                                                                                            const t =
                                                                                                this.sidebarController.getState(
                                                                                                    Mt.c
                                                                                                ).selectedId;
                                                                                            e.userId === t &&
                                                                                            e.userId !==
                                                                                                v.FAKE_CONVERSATION_ID
                                                                                                    .FRIEND_CENTER
                                                                                                ? Object(Te.f)({
                                                                                                      type: Ze
                                                                                                          .ConversationListActions
                                                                                                          .SELECT_CONV_MINOR,
                                                                                                      payload: e,
                                                                                                  })
                                                                                                : (this
                                                                                                      .convUIListContainer &&
                                                                                                      this.convUIListContainer.focus(),
                                                                                                  e.userId ===
                                                                                                      We.default
                                                                                                          .sendToMeId &&
                                                                                                      (St.g.getFlagForCurrentUser(
                                                                                                          this.currUser
                                                                                                              .userId,
                                                                                                          xt
                                                                                                      ) ||
                                                                                                          (wt.p.getHasShownSendToMeTip()
                                                                                                              ? St.g.setFlagForCurrentUser(
                                                                                                                    this
                                                                                                                        .currUser
                                                                                                                        .userId,
                                                                                                                    xt,
                                                                                                                    1
                                                                                                                )
                                                                                                              : setTimeout(
                                                                                                                    () => {
                                                                                                                        Je.default.send(
                                                                                                                            Ze
                                                                                                                                .ConversationListActions
                                                                                                                                .SHOW_BUBBLE_DOT
                                                                                                                        ),
                                                                                                                            wt.p.setHasShownSendToMeTip(
                                                                                                                                !0
                                                                                                                            );
                                                                                                                    },
                                                                                                                    144e5
                                                                                                                )),
                                                                                                      Dt.b.getCurrentStepKey() !==
                                                                                                          Dt.a
                                                                                                              .UPLOAD_IMAGES ||
                                                                                                          this
                                                                                                              .showedOnboarding ||
                                                                                                          (Dt.b.show(),
                                                                                                          (this.showedOnboarding =
                                                                                                              !0)),
                                                                                                      vt.e.logAction(
                                                                                                          13901
                                                                                                      )),
                                                                                                  e.userId ===
                                                                                                  v.FAKE_CONVERSATION_ID
                                                                                                      .FRIEND_CENTER
                                                                                                      ? Object(Te.f)({
                                                                                                            type: Ze
                                                                                                                .SideBarActions
                                                                                                                .SELECT_FRIEND_CENTER,
                                                                                                            payload:
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    {},
                                                                                                                    e
                                                                                                                ),
                                                                                                        })
                                                                                                      : d.ModuleContainer.resolve(
                                                                                                            Nt.b
                                                                                                        ).openConversation(
                                                                                                            e.userId,
                                                                                                            Nt.c.fromConvItem(
                                                                                                                e
                                                                                                            )
                                                                                                        )),
                                                                                                this.logActionSelectConv(
                                                                                                    e.userId
                                                                                                );
                                                                                        }
                                                                                        showBroadCastMsgModal() {
                                                                                            var e;
                                                                                            if (
                                                                                                !le.default.checkBroadcastTime()
                                                                                            )
                                                                                                return void Ft.a.createError(
                                                                                                    Rt.default.str(
                                                                                                        'STR_BROADCAST_OVER_LIMIT_TIP'
                                                                                                    )
                                                                                                );
                                                                                            let t = !0;
                                                                                            1 ===
                                                                                                this.labelFilters
                                                                                                    .length &&
                                                                                                (t =
                                                                                                    Ct.b.getItem(
                                                                                                        this
                                                                                                            .labelFilters[0]
                                                                                                    ) || !0),
                                                                                                null !==
                                                                                                    (e =
                                                                                                        We.default
                                                                                                            .broadcast_resend_config) &&
                                                                                                void 0 !== e &&
                                                                                                e.enable
                                                                                                    ? Tt.ModalManagerV2.openModal(
                                                                                                          {
                                                                                                              windowId:
                                                                                                                  Mt.c,
                                                                                                              name: v
                                                                                                                  .ModalIdentitiesDefine
                                                                                                                  .BROADCAST_RESEND,
                                                                                                              params: t,
                                                                                                          }
                                                                                                      )
                                                                                                    : Tt.ModalManagerV2.openModal(
                                                                                                          {
                                                                                                              windowId:
                                                                                                                  Mt.c,
                                                                                                              name: v
                                                                                                                  .ModalIdentitiesDefine
                                                                                                                  .BROADCAST_COMPSE,
                                                                                                              params: {
                                                                                                                  label: t,
                                                                                                              },
                                                                                                          }
                                                                                                      ),
                                                                                                vt.e.logAction(1453102);
                                                                                        }
                                                                                        markAsRead(e, t) {
                                                                                            void 0 === t && (t = null),
                                                                                                e &&
                                                                                                    (e.preventDefault(),
                                                                                                    e.stopPropagation()),
                                                                                                vt.e.logAction(164),
                                                                                                le.default.isShowMarkAsReadAgain()
                                                                                                    ? At.a.openConfirm({
                                                                                                          windowId:
                                                                                                              Mt.c,
                                                                                                          name: v
                                                                                                              .MODAL_CONFIRM
                                                                                                              .confirmIdentities,
                                                                                                          params: {
                                                                                                              message:
                                                                                                                  Rt.default.str(
                                                                                                                      'STR_MARK_READ_CONFIRM_TEXT'
                                                                                                                  ),
                                                                                                              okText: Rt.default.str(
                                                                                                                  'STR_CONFIRM'
                                                                                                              ),
                                                                                                              okType: 'primary',
                                                                                                              cancelText:
                                                                                                                  Rt.default.str(
                                                                                                                      'STR_LOGOUT_NO'
                                                                                                                  ),
                                                                                                              onOk: (
                                                                                                                  e
                                                                                                              ) => {
                                                                                                                  le.default.setShowMarkAsReadAgain(
                                                                                                                      !(
                                                                                                                          e &&
                                                                                                                          e.dont_show_mark_as_read
                                                                                                                      )
                                                                                                                  ),
                                                                                                                      this.markConvsAsRead(
                                                                                                                          t
                                                                                                                      );
                                                                                                              },
                                                                                                              options: [
                                                                                                                  {
                                                                                                                      default_val:
                                                                                                                          !1,
                                                                                                                      key: 'dont_show_mark_as_read',
                                                                                                                      title: 'STR_DONT_SHOW_AGAIN',
                                                                                                                  },
                                                                                                              ],
                                                                                                          },
                                                                                                      })
                                                                                                    : this.markConvsAsRead(
                                                                                                          t
                                                                                                      );
                                                                                        }
                                                                                        scrollToTop(e) {
                                                                                            const t = Pt.b
                                                                                                .instance()
                                                                                                .getConvList();
                                                                                            t && t.scrollToTop(e);
                                                                                        }
                                                                                        scrollToConv(e) {
                                                                                            const t = Pt.b
                                                                                                .instance()
                                                                                                .getConvList();
                                                                                            t &&
                                                                                                t.scrollToConversation(
                                                                                                    e
                                                                                                );
                                                                                        }
                                                                                        openInNewWindow(e, t) {
                                                                                            if (!e || !e.userId) return;
                                                                                            const s =
                                                                                                this.menuRef[ht.b];
                                                                                            s &&
                                                                                                s.openInNewWindow &&
                                                                                                (s.updateTargetInfo(e),
                                                                                                s.openInNewWindow(t));
                                                                                        }
                                                                                        getStrangerInfo() {
                                                                                            let e = '';
                                                                                            if (this.newestStrangerId) {
                                                                                                const t =
                                                                                                    this.previewManager.getPreviewByIDSync(
                                                                                                        this
                                                                                                            .newestStrangerId
                                                                                                    );
                                                                                                e = t
                                                                                                    ? t.messageTime
                                                                                                    : '';
                                                                                            }
                                                                                            return (
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30005,
                                                                                                    'getStrangerInfo ',
                                                                                                    this
                                                                                                        .newestStrangerId,
                                                                                                    e
                                                                                                ),
                                                                                                { messageTime: e }
                                                                                            );
                                                                                        }
                                                                                        getTopMostConv() {
                                                                                            return this.typeFilter !==
                                                                                                ft.FilterType.ALL ||
                                                                                                this.labelFilters.length
                                                                                                ? this.listFiltered[0]
                                                                                                : this.listVisible[0];
                                                                                        }
                                                                                        addListener() {
                                                                                            setTimeout(() => {
                                                                                                this.labelDataManager.addEventListener(
                                                                                                    bt.d
                                                                                                        .SelectedLabelChange,
                                                                                                    (e) => {
                                                                                                        this.onLabelFilterChange(
                                                                                                            e.payload
                                                                                                        );
                                                                                                    }
                                                                                                ),
                                                                                                    this.labelDataManager.addEventListener(
                                                                                                        bt.d
                                                                                                            .LabelAddConvs,
                                                                                                        (e) => {
                                                                                                            this.onLabelChangeConvs(
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .labelId,
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .convIds,
                                                                                                                'add'
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.labelDataManager.addEventListener(
                                                                                                        bt.d
                                                                                                            .LabelRemoveConvs,
                                                                                                        (e) => {
                                                                                                            this.onLabelChangeConvs(
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .labelId,
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .convIds,
                                                                                                                'remove'
                                                                                                            );
                                                                                                        }
                                                                                                    );
                                                                                                const e =
                                                                                                    d.ModuleContainer.resolve(
                                                                                                        ut.h
                                                                                                    );
                                                                                                e.addEventListener(
                                                                                                    It.b
                                                                                                        .DoneLoadPreview,
                                                                                                    (e) => {
                                                                                                        this.onLoadPreview(
                                                                                                            e.payload
                                                                                                        );
                                                                                                    }
                                                                                                ),
                                                                                                    e.addEventListener(
                                                                                                        It.b
                                                                                                            .DoneMigratePreview,
                                                                                                        () => {
                                                                                                            this.onMigratedPreview();
                                                                                                        }
                                                                                                    ),
                                                                                                    e.addEventListener(
                                                                                                        It.b
                                                                                                            .PreviewChanged,
                                                                                                        (e) => {
                                                                                                            const {
                                                                                                                changedItem:
                                                                                                                    t,
                                                                                                                all: s,
                                                                                                            } =
                                                                                                                e.payload;
                                                                                                            this.onPreviewChange(
                                                                                                                t,
                                                                                                                s
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    e.addEventListener(
                                                                                                        It.b
                                                                                                            .DraftChanged,
                                                                                                        (e) => {}
                                                                                                    ),
                                                                                                    this.convDataManager.addEventListener(
                                                                                                        It.b.DeleteConv,
                                                                                                        (e) => {
                                                                                                            this.moveConvOutConvList(
                                                                                                                e.convId
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.convDataManager.addEventListener(
                                                                                                        It.b.EmptyConv,
                                                                                                        (e) => {
                                                                                                            this.moveConvOutConvList(
                                                                                                                e.convId
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.convDataManager.addEventListener(
                                                                                                        It.b.LeaveGroup,
                                                                                                        (e) => {
                                                                                                            this.moveConvOutConvList(
                                                                                                                e.convId
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.pinDataManager.addEventListener(
                                                                                                        It.b
                                                                                                            .ChangePinConv,
                                                                                                        (e) => {
                                                                                                            this.onPinChange(
                                                                                                                e.payload
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.archivedChatManager.addEventListener(
                                                                                                        It.b
                                                                                                            .UpdateListArchivedChat,
                                                                                                        (e) => {
                                                                                                            this.updateListArchivedChat();
                                                                                                        }
                                                                                                    ),
                                                                                                    this.archivedChatManager.addEventListener(
                                                                                                        It.b
                                                                                                            .OnOffArchivedChat,
                                                                                                        (e) => {
                                                                                                            this.onOffArchivedChat(
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .status
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.unreadDataManager.addEventListener(
                                                                                                        It.b
                                                                                                            .ChangeUnreadArchiveChat,
                                                                                                        (e) => {
                                                                                                            this.updateUnreadArchivedChat(
                                                                                                                e
                                                                                                                    .payload
                                                                                                                    .hasUnreadArchivedChat
                                                                                                            );
                                                                                                        }
                                                                                                    ),
                                                                                                    this.muteDataManager.addEventListener(
                                                                                                        It.b
                                                                                                            .MuteChanged,
                                                                                                        this
                                                                                                            .handleMuteChange
                                                                                                    ),
                                                                                                    rt.default.subscribeEventFriend(
                                                                                                        v.EventFriend
                                                                                                            .ADD_FRIEND,
                                                                                                        (e) => {
                                                                                                            let {
                                                                                                                    userId: t,
                                                                                                                } = e,
                                                                                                                s = 0;
                                                                                                            this.listStrangers.includes(
                                                                                                                t
                                                                                                            ) &&
                                                                                                                (s++,
                                                                                                                (this.listStrangers =
                                                                                                                    this.listStrangers.filter(
                                                                                                                        (
                                                                                                                            e
                                                                                                                        ) =>
                                                                                                                            e !==
                                                                                                                            t
                                                                                                                    )),
                                                                                                                t ==
                                                                                                                    this
                                                                                                                        .newestStrangerId &&
                                                                                                                    (s++,
                                                                                                                    this.updateNewestStrangerId(
                                                                                                                        this
                                                                                                                            .listStrangers
                                                                                                                    ))),
                                                                                                                this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    10577,
                                                                                                                    30008,
                                                                                                                    `on add friend ${t} ${s}`
                                                                                                                );
                                                                                                        }
                                                                                                    ),
                                                                                                    rt.default.subscribeEventFriend(
                                                                                                        v.EventFriend
                                                                                                            .REMOVE_FRIEND,
                                                                                                        (e) => {
                                                                                                            let {
                                                                                                                    userId: t,
                                                                                                                } = e,
                                                                                                                s = 0;
                                                                                                            !this.listStrangers.includes(
                                                                                                                t
                                                                                                            ) &&
                                                                                                                this.listVisible.some(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) =>
                                                                                                                        e ===
                                                                                                                        t
                                                                                                                ) &&
                                                                                                                (s++,
                                                                                                                this.listStrangers.push(
                                                                                                                    t
                                                                                                                )),
                                                                                                                this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    10577,
                                                                                                                    30009,
                                                                                                                    `on remove friend ${t} ${s}`
                                                                                                                );
                                                                                                        }
                                                                                                    ),
                                                                                                    rt.default.subscribeEventFriend(
                                                                                                        v.EventFriend
                                                                                                            .DOWNGRADE_BIZ_PROFILE,
                                                                                                        () => {
                                                                                                            this.handleUserPackageChange();
                                                                                                        }
                                                                                                    ),
                                                                                                    rt.default.subscribeEventFriend(
                                                                                                        v.EventFriend
                                                                                                            .UPGRADE_BIZ_PROFILE,
                                                                                                        () => {
                                                                                                            this.handleUserPackageChange();
                                                                                                        }
                                                                                                    );
                                                                                            }, 0);
                                                                                        }
                                                                                        addToListFiltered(e, t) {
                                                                                            void 0 === t && (t = !1),
                                                                                                e.forEach((e) => {
                                                                                                    if (t) {
                                                                                                        const t =
                                                                                                            this.unreadDataManager.getUnreadByConvIdSync(
                                                                                                                e
                                                                                                            );
                                                                                                        if (
                                                                                                            !t ||
                                                                                                            (!t.smsUnreadCount &&
                                                                                                                !t.unreadMark)
                                                                                                        )
                                                                                                            return;
                                                                                                    }
                                                                                                    const [s] =
                                                                                                        yt.a.insertToProperPosition(
                                                                                                            this
                                                                                                                .listFiltered,
                                                                                                            e
                                                                                                        );
                                                                                                    this.listFiltered =
                                                                                                        s;
                                                                                                });
                                                                                        }
                                                                                        applyTypeFilter(e, t) {
                                                                                            if (
                                                                                                (void 0 === t &&
                                                                                                    (t = !1),
                                                                                                this.typeFilter === e &&
                                                                                                    !t)
                                                                                            )
                                                                                                return;
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30010,
                                                                                                'applyTypeFilter ',
                                                                                                e,
                                                                                                t
                                                                                            );
                                                                                            const s = this.typeFilter;
                                                                                            switch (
                                                                                                ((this.typeFilter = e),
                                                                                                e)
                                                                                            ) {
                                                                                                case ft.FilterType.ALL:
                                                                                                    if (
                                                                                                        0 !==
                                                                                                        this
                                                                                                            .labelFilters
                                                                                                            .length
                                                                                                    ) {
                                                                                                        if (
                                                                                                            ((this.listFiltered =
                                                                                                                yt.a.filterByLabel(
                                                                                                                    this
                                                                                                                        .listVisible,
                                                                                                                    this
                                                                                                                        .labelFilters
                                                                                                                )),
                                                                                                            this.labelFilters.includes(
                                                                                                                ht.h
                                                                                                            ))
                                                                                                        ) {
                                                                                                            let e =
                                                                                                                this
                                                                                                                    .listStrangers;
                                                                                                            this.showStrangerNROnly() &&
                                                                                                                (e =
                                                                                                                    yt.a.filterByResponsed(
                                                                                                                        e,
                                                                                                                        !1
                                                                                                                    )),
                                                                                                                this.addToListFiltered(
                                                                                                                    e
                                                                                                                );
                                                                                                        } else
                                                                                                            this.doAddStrangerHasLabel(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                this
                                                                                                                    .labelFilters
                                                                                                            );
                                                                                                        this.addLikeConvToFilterListV2(
                                                                                                            this
                                                                                                                .listFiltered,
                                                                                                            this
                                                                                                                .labelFilters
                                                                                                        );
                                                                                                    }
                                                                                                    break;
                                                                                                case ft.FilterType
                                                                                                    .UNREAD:
                                                                                                    if (
                                                                                                        0 !==
                                                                                                        this
                                                                                                            .labelFilters
                                                                                                            .length
                                                                                                    ) {
                                                                                                        const e =
                                                                                                            s ==
                                                                                                            ft
                                                                                                                .FilterType
                                                                                                                .ALL
                                                                                                                ? this
                                                                                                                      .listFiltered
                                                                                                                : this
                                                                                                                      .listVisible;
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.filterByLabel(
                                                                                                                e,
                                                                                                                this
                                                                                                                    .labelFilters
                                                                                                            )),
                                                                                                            this.labelFilters.includes(
                                                                                                                ht.h
                                                                                                            )
                                                                                                                ? this.addToListFiltered(
                                                                                                                      this
                                                                                                                          .listStrangers
                                                                                                                  )
                                                                                                                : this.doAddStrangerHasLabel(
                                                                                                                      this
                                                                                                                          .listFiltered,
                                                                                                                      this
                                                                                                                          .labelFilters
                                                                                                                  ),
                                                                                                            (this.listFiltered =
                                                                                                                yt.a.filterByUnread(
                                                                                                                    this
                                                                                                                        .listFiltered
                                                                                                                )),
                                                                                                            (this.listFiltered =
                                                                                                                yt.a.sortConvId(
                                                                                                                    this
                                                                                                                        .listFiltered,
                                                                                                                    !0,
                                                                                                                    !0
                                                                                                                ));
                                                                                                    } else
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.filterByUnread(
                                                                                                                this
                                                                                                                    .listVisible
                                                                                                            )),
                                                                                                            (this.listFiltered =
                                                                                                                this.safeSortConvList(
                                                                                                                    this
                                                                                                                        .listFiltered
                                                                                                                ));
                                                                                                    break;
                                                                                                case ft.FilterType
                                                                                                    .STRANGER:
                                                                                                    (this.listFiltered =
                                                                                                        yt.a.filterByLabel(
                                                                                                            this
                                                                                                                .listStrangers,
                                                                                                            this
                                                                                                                .labelFilters
                                                                                                        )),
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.sortConvId(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                !1,
                                                                                                                !0
                                                                                                            )),
                                                                                                        this.showStrangerNROnly() &&
                                                                                                            (this.listFiltered =
                                                                                                                yt.a.filterByResponsed(
                                                                                                                    this
                                                                                                                        .listFiltered,
                                                                                                                    !1
                                                                                                                ));
                                                                                                    break;
                                                                                                case ft.FilterType
                                                                                                    .FOCUSED:
                                                                                                    this.listFiltered =
                                                                                                        this.genListArchivedChat(
                                                                                                            this
                                                                                                                .listVisible,
                                                                                                            !1,
                                                                                                            this
                                                                                                                .labelFilters
                                                                                                        );
                                                                                                    break;
                                                                                                case ft.FilterType
                                                                                                    .ARCHIVED:
                                                                                                    this.listFiltered =
                                                                                                        this.genListArchivedChat(
                                                                                                            this
                                                                                                                .listVisible,
                                                                                                            !0,
                                                                                                            this
                                                                                                                .labelFilters
                                                                                                        );
                                                                                            }
                                                                                            this.signalRenderState(),
                                                                                                this.signalRenderList();
                                                                                        }
                                                                                        applyLabelFilter(e) {
                                                                                            if (
                                                                                                this.labelFilters !== e
                                                                                            ) {
                                                                                                switch (
                                                                                                    (this.logger.zsymb(
                                                                                                        0,
                                                                                                        10577,
                                                                                                        30011,
                                                                                                        'applyLabelFilter ',
                                                                                                        e.join('-')
                                                                                                    ),
                                                                                                    (this.labelFilters =
                                                                                                        e.map(
                                                                                                            (e) =>
                                                                                                                '' + e
                                                                                                        )),
                                                                                                    this.typeFilter)
                                                                                                ) {
                                                                                                    case ft.FilterType
                                                                                                        .ALL:
                                                                                                        if (
                                                                                                            ((this.listFiltered =
                                                                                                                yt.a.filterByLabel(
                                                                                                                    this
                                                                                                                        .listVisible,
                                                                                                                    this
                                                                                                                        .labelFilters
                                                                                                                )),
                                                                                                            this.doAddStrangerHasLabel(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                this
                                                                                                                    .labelFilters
                                                                                                            ),
                                                                                                            this.addLikeConvToFilterListV2(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                e
                                                                                                            ),
                                                                                                            this.labelFilters.some(
                                                                                                                (e) =>
                                                                                                                    e ==
                                                                                                                    ht.h
                                                                                                            ))
                                                                                                        ) {
                                                                                                            let e =
                                                                                                                this
                                                                                                                    .listStrangers;
                                                                                                            this.showStrangerNROnly() &&
                                                                                                                (e =
                                                                                                                    yt.a.filterByResponsed(
                                                                                                                        e,
                                                                                                                        !1
                                                                                                                    )),
                                                                                                                this.addToListFiltered(
                                                                                                                    e
                                                                                                                );
                                                                                                        }
                                                                                                        break;
                                                                                                    case ft.FilterType
                                                                                                        .UNREAD:
                                                                                                        if (
                                                                                                            ((this.listFiltered =
                                                                                                                yt.a.filterByLabel(
                                                                                                                    this
                                                                                                                        .listVisible,
                                                                                                                    e
                                                                                                                )),
                                                                                                            this.doAddStrangerHasLabel(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                this
                                                                                                                    .labelFilters
                                                                                                            ),
                                                                                                            this.labelFilters.some(
                                                                                                                (e) =>
                                                                                                                    e ==
                                                                                                                    ht.h
                                                                                                            ))
                                                                                                        ) {
                                                                                                            let e =
                                                                                                                this
                                                                                                                    .listStrangers;
                                                                                                            this.showStrangerNROnly() &&
                                                                                                                (e =
                                                                                                                    yt.a.filterByResponsed(
                                                                                                                        e,
                                                                                                                        !1
                                                                                                                    )),
                                                                                                                this.addToListFiltered(
                                                                                                                    e
                                                                                                                );
                                                                                                        }
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.filterByUnread(
                                                                                                                this
                                                                                                                    .listFiltered
                                                                                                            )),
                                                                                                            (this.listFiltered =
                                                                                                                this.safeSortConvList(
                                                                                                                    this
                                                                                                                        .listFiltered
                                                                                                                ));
                                                                                                        break;
                                                                                                    case ft.FilterType
                                                                                                        .STRANGER:
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.filterByLabel(
                                                                                                                this
                                                                                                                    .listStrangers,
                                                                                                                this
                                                                                                                    .labelFilters
                                                                                                            )),
                                                                                                            (this.listFiltered =
                                                                                                                yt.a.sortConvId(
                                                                                                                    this
                                                                                                                        .listFiltered,
                                                                                                                    !1,
                                                                                                                    !0
                                                                                                                )),
                                                                                                            this.showStrangerNROnly() &&
                                                                                                                (this.listFiltered =
                                                                                                                    yt.a.filterByResponsed(
                                                                                                                        this
                                                                                                                            .listFiltered,
                                                                                                                        !1
                                                                                                                    ));
                                                                                                        break;
                                                                                                    case ft.FilterType
                                                                                                        .FOCUSED:
                                                                                                        this.listFiltered =
                                                                                                            this.genListArchivedChat(
                                                                                                                this
                                                                                                                    .listVisible,
                                                                                                                !1,
                                                                                                                e
                                                                                                            );
                                                                                                        break;
                                                                                                    case ft.FilterType
                                                                                                        .ARCHIVED:
                                                                                                        this.listFiltered =
                                                                                                            this.genListArchivedChat(
                                                                                                                this
                                                                                                                    .listVisible,
                                                                                                                !0,
                                                                                                                e
                                                                                                            );
                                                                                                }
                                                                                                this.signalRenderState(),
                                                                                                    this.signalRenderList();
                                                                                            }
                                                                                        }
                                                                                        showStrangerNROnly() {
                                                                                            return !this.isMeBAAccount();
                                                                                        }
                                                                                        isMeBAAccount() {
                                                                                            const e =
                                                                                                rt.default.isMeBAAccount();
                                                                                            return (
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30012,
                                                                                                    'isMeBAAccount ',
                                                                                                    e
                                                                                                ),
                                                                                                e
                                                                                            );
                                                                                        }
                                                                                        doAddStrangerHasLabel(e, t) {
                                                                                            if (t.length) {
                                                                                                const s =
                                                                                                    yt.a.filterByLabel(
                                                                                                        this
                                                                                                            .listStrangers,
                                                                                                        t
                                                                                                    );
                                                                                                if (s.length) {
                                                                                                    const t = new Set(
                                                                                                        s
                                                                                                    );
                                                                                                    for (
                                                                                                        let s = 0;
                                                                                                        s < e.length;
                                                                                                        s++
                                                                                                    )
                                                                                                        t.has(e[s]) &&
                                                                                                            t.delete(
                                                                                                                e[s]
                                                                                                            );
                                                                                                    this.addToListFiltered(
                                                                                                        t
                                                                                                    );
                                                                                                }
                                                                                            }
                                                                                            return e;
                                                                                        }
                                                                                        isConvExists(e) {
                                                                                            const t =
                                                                                                this.convDataManager.getConvByIdSync(
                                                                                                    e
                                                                                                );
                                                                                            return !!(
                                                                                                (null != t &&
                                                                                                    t.firstSmsLocalId) ||
                                                                                                (null != t &&
                                                                                                    t.lastSmsLocalId)
                                                                                            );
                                                                                        }
                                                                                        safeSortConvList(e, t) {
                                                                                            void 0 === t && (t = !0);
                                                                                            const s = e.indexOf(
                                                                                                v.CONV_FILTER.STRANGER
                                                                                            );
                                                                                            if (-1 !== s) {
                                                                                                e[s] =
                                                                                                    this.newestStrangerId;
                                                                                                const i = (e =
                                                                                                    yt.a.sortConvId(
                                                                                                        e,
                                                                                                        t,
                                                                                                        !0
                                                                                                    )).indexOf(
                                                                                                    this
                                                                                                        .newestStrangerId
                                                                                                );
                                                                                                e[i] =
                                                                                                    v.CONV_FILTER.STRANGER;
                                                                                            } else
                                                                                                e = yt.a.sortConvId(
                                                                                                    e,
                                                                                                    t,
                                                                                                    !0
                                                                                                );
                                                                                            return e;
                                                                                        }
                                                                                        isValidFakeConv(e, t, s) {
                                                                                            if (
                                                                                                e.some((e) => e == s) ||
                                                                                                _t.a.isThreadHidden(s)
                                                                                            )
                                                                                                return !1;
                                                                                            const i =
                                                                                                Ct.b.getLabelObjByConversaionId(
                                                                                                    s
                                                                                                );
                                                                                            return !(
                                                                                                !i ||
                                                                                                !t.some(
                                                                                                    (e) => e == i.id
                                                                                                )
                                                                                            );
                                                                                        }
                                                                                        isValidFakeConvV2(e, t) {
                                                                                            if (
                                                                                                !t ||
                                                                                                e.some((e) => e == t) ||
                                                                                                _t.a.isThreadHidden(t)
                                                                                            )
                                                                                                return !1;
                                                                                            return (
                                                                                                !(
                                                                                                    t &&
                                                                                                    t.startsWith(
                                                                                                        v.GROUPID_PREFIX
                                                                                                    )
                                                                                                ) ||
                                                                                                !!jt.default.getGroupByIdSync(
                                                                                                    t
                                                                                                )
                                                                                            );
                                                                                        }
                                                                                        addLikeConvToFilterListV2(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            if (
                                                                                                t.length &&
                                                                                                this.typeFilter !==
                                                                                                    ft.FilterType.UNREAD
                                                                                            ) {
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30013,
                                                                                                    'addLikeConvToFilterListV2 ',
                                                                                                    t
                                                                                                );
                                                                                                for (const s of t) {
                                                                                                    const t =
                                                                                                        this.labelDataManager.getLabelById(
                                                                                                            s
                                                                                                        );
                                                                                                    if (
                                                                                                        t &&
                                                                                                        t.conversations
                                                                                                    )
                                                                                                        for (const s of t.conversations)
                                                                                                            this.isValidFakeConvV2(
                                                                                                                e,
                                                                                                                s
                                                                                                            ) &&
                                                                                                                e.push(
                                                                                                                    s
                                                                                                                );
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        markConvsAsRead(e) {
                                                                                            const t = [],
                                                                                                s =
                                                                                                    0 ===
                                                                                                    this.labelFilters
                                                                                                        .length;
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30014,
                                                                                                `markConvsAsRead #1  ${
                                                                                                    null == e
                                                                                                        ? void 0
                                                                                                        : e.join('-')
                                                                                                }`
                                                                                            ),
                                                                                                this.listRawAll.forEach(
                                                                                                    (i) => {
                                                                                                        const n =
                                                                                                            this.unreadDataManager.getUnreadByConvIdSync(
                                                                                                                i
                                                                                                            );
                                                                                                        if (
                                                                                                            n &&
                                                                                                            (n.smsUnreadCount >
                                                                                                                0 ||
                                                                                                                n.unreadMark)
                                                                                                        ) {
                                                                                                            if (
                                                                                                                (this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    10577,
                                                                                                                    30015,
                                                                                                                    `markConvsAsRead #2, ${i}, ${n.smsUnreadCount}`
                                                                                                                ),
                                                                                                                (e &&
                                                                                                                    !e.hasOwnProperty(
                                                                                                                        i
                                                                                                                    )) ||
                                                                                                                    i ===
                                                                                                                        v
                                                                                                                            .FAKE_CONVERSATION_ID
                                                                                                                            .FRIEND_CENTER)
                                                                                                            )
                                                                                                                return;
                                                                                                            const r =
                                                                                                                    Ct.b.getLabelObjByConversaionId(
                                                                                                                        i
                                                                                                                    ) ||
                                                                                                                    {},
                                                                                                                a =
                                                                                                                    this.convDataManager.getConvByIdSync(
                                                                                                                        i
                                                                                                                    ) || {
                                                                                                                        userId: i,
                                                                                                                    };
                                                                                                            (s ||
                                                                                                                this.labelFilters.some(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) =>
                                                                                                                        e ==
                                                                                                                        r.id
                                                                                                                ) ||
                                                                                                                (yt.a.isInStrangerBoxV2(
                                                                                                                    i
                                                                                                                ) &&
                                                                                                                    this
                                                                                                                        .typeFilter ===
                                                                                                                        ft
                                                                                                                            .FilterType
                                                                                                                            .STRANGER)) &&
                                                                                                                t.push(
                                                                                                                    a
                                                                                                                );
                                                                                                        }
                                                                                                    }
                                                                                                ),
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30016,
                                                                                                    `markConvsAsRead #3 ${
                                                                                                        t.length
                                                                                                    } ${t
                                                                                                        .map(
                                                                                                            (e) =>
                                                                                                                e.userId
                                                                                                        )
                                                                                                        .join('-')}`
                                                                                                ),
                                                                                                t.length > 0 &&
                                                                                                    (Je.default.send(
                                                                                                        Ze
                                                                                                            .SideBarActions
                                                                                                            .MARK_AS_READ,
                                                                                                        {
                                                                                                            conversations:
                                                                                                                t,
                                                                                                        }
                                                                                                    ),
                                                                                                    vt.e.logAction(
                                                                                                        1453304
                                                                                                    ));
                                                                                        }
                                                                                        onLoadPreview(e) {
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30017,
                                                                                                `onload Preview 1: ${this.listRawAll.size}`
                                                                                            );
                                                                                            let t = e.map(
                                                                                                (e) => e.convId
                                                                                            );
                                                                                            const s =
                                                                                                le.default.getConvUXVersion();
                                                                                            (this.isEnableArchivedChat =
                                                                                                !!Bt.a.isEnableArchivedChat() &&
                                                                                                '3' == s),
                                                                                                (this.typeFilter = this
                                                                                                    .isEnableArchivedChat
                                                                                                    ? ft.FilterType
                                                                                                          .FOCUSED
                                                                                                    : ft.FilterType
                                                                                                          .ALL),
                                                                                                this.listRawAll.size &&
                                                                                                    this.listRawAll.forEach(
                                                                                                        (e) => {
                                                                                                            t.some(
                                                                                                                (t) =>
                                                                                                                    t ===
                                                                                                                    e
                                                                                                            ) ||
                                                                                                                t.push(
                                                                                                                    e
                                                                                                                );
                                                                                                        }
                                                                                                    ),
                                                                                                (this.listRawAll =
                                                                                                    new Set(t));
                                                                                            const i =
                                                                                                We.default.sendToMeId;
                                                                                            this.listRawAll.has(i) ||
                                                                                                (t.push(i),
                                                                                                this.listRawAll.add(i)),
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30018,
                                                                                                    `onload Preview 2: ${t.length}`
                                                                                                ),
                                                                                                yt.a
                                                                                                    .groupConversaion(t)
                                                                                                    .then((e) => {
                                                                                                        if (
                                                                                                            (this.logger.zsymb(
                                                                                                                0,
                                                                                                                10577,
                                                                                                                30019,
                                                                                                                `grouped list #1: \n\t\t\t\t${e.hidden.length}\n\t\t\t\t- ${e.stranger.length}\n\t\t\t\t- ${e.outdate.length}\n\t\t\t\t- ${e.visible.length}\n\t\t\t`
                                                                                                            ),
                                                                                                            We.default
                                                                                                                .stagingAccount)
                                                                                                        )
                                                                                                            for (const i in e)
                                                                                                                this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    10577,
                                                                                                                    30020,
                                                                                                                    `${i}: ${e[i]}`
                                                                                                                );
                                                                                                        (this.listStrangers =
                                                                                                            e.stranger),
                                                                                                            (this.listHiddens =
                                                                                                                e.hidden);
                                                                                                        const t =
                                                                                                            this.addStrangersToVisible(
                                                                                                                e.visible,
                                                                                                                this
                                                                                                                    .listStrangers
                                                                                                            );
                                                                                                        let s = t;
                                                                                                        if (
                                                                                                            this
                                                                                                                .listVisible
                                                                                                                .length
                                                                                                        ) {
                                                                                                            this.logger.zsymb(
                                                                                                                0,
                                                                                                                10577,
                                                                                                                30021,
                                                                                                                `preview changed while group csc #1: ${this.listVisible}`
                                                                                                            ),
                                                                                                                (s =
                                                                                                                    this
                                                                                                                        .listVisible);
                                                                                                            const e =
                                                                                                                new Set(
                                                                                                                    this.listVisible
                                                                                                                );
                                                                                                            t.forEach(
                                                                                                                (t) => {
                                                                                                                    e.has(
                                                                                                                        t
                                                                                                                    ) ||
                                                                                                                        s.push(
                                                                                                                            t
                                                                                                                        );
                                                                                                                }
                                                                                                            );
                                                                                                        }
                                                                                                        (this.listVisible =
                                                                                                            this.safeSortConvList(
                                                                                                                s,
                                                                                                                !1
                                                                                                            )),
                                                                                                            this.initMyCloud(),
                                                                                                            this
                                                                                                                .isEnableArchivedChat &&
                                                                                                                (this.listFiltered =
                                                                                                                    this.genListArchivedChat(
                                                                                                                        this
                                                                                                                            .listVisible,
                                                                                                                        this
                                                                                                                            .typeFilter ===
                                                                                                                            ft
                                                                                                                                .FilterType
                                                                                                                                .ARCHIVED,
                                                                                                                        this
                                                                                                                            .labelFilters
                                                                                                                    )),
                                                                                                            this.logger.zsymb(
                                                                                                                0,
                                                                                                                10577,
                                                                                                                30022,
                                                                                                                `visible sorted #1: ${this.listVisible}`
                                                                                                            ),
                                                                                                            (this.loaded =
                                                                                                                !0),
                                                                                                            this.signalRenderList(),
                                                                                                            this.signalRenderState(),
                                                                                                            this.dispatchEvent(
                                                                                                                new It.a(
                                                                                                                    It.c.LoadPreviewDone,
                                                                                                                    '',
                                                                                                                    this.listVisible.slice()
                                                                                                                )
                                                                                                            );
                                                                                                    });
                                                                                        }
                                                                                        onMigratedPreview() {
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30023,
                                                                                                `onMigratedPreview #1: ${this.listVisible}`
                                                                                            );
                                                                                            const e =
                                                                                                le.default.getConvUXVersion();
                                                                                            (this.isEnableArchivedChat =
                                                                                                !!Bt.a.isEnableArchivedChat() &&
                                                                                                '3' == e),
                                                                                                (this.typeFilter = this
                                                                                                    .isEnableArchivedChat
                                                                                                    ? ft.FilterType
                                                                                                          .FOCUSED
                                                                                                    : ft.FilterType
                                                                                                          .ALL);
                                                                                            const t =
                                                                                                We.default.sendToMeId;
                                                                                            this.listRawAll.has(t) ||
                                                                                                this.initMyCloud(),
                                                                                                this.convDataManager.getConvByIdSync(
                                                                                                    t
                                                                                                ) &&
                                                                                                    !this.listVisible.includes(
                                                                                                        t
                                                                                                    ) &&
                                                                                                    (this.logger.zsymb(
                                                                                                        0,
                                                                                                        10577,
                                                                                                        30024,
                                                                                                        'onMigratedPreview #2'
                                                                                                    ),
                                                                                                    this.onPreviewChange(
                                                                                                        { convId: t },
                                                                                                        []
                                                                                                    )),
                                                                                                (this.loaded = !0),
                                                                                                this.signalRenderList(),
                                                                                                this.signalRenderState();
                                                                                        }
                                                                                        initMyCloud() {
                                                                                            const e =
                                                                                                    St.g.getFlagForCurrentUser(
                                                                                                        null,
                                                                                                        'z_sendtome'
                                                                                                    ),
                                                                                                t =
                                                                                                    We.default
                                                                                                        .sendToMeId,
                                                                                                s = !(
                                                                                                    We.default
                                                                                                        .isOffSendToMe ||
                                                                                                    (e && 1 !== e)
                                                                                                );
                                                                                            if (
                                                                                                (this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30025,
                                                                                                    'initMyCloud',
                                                                                                    e,
                                                                                                    We.default
                                                                                                        .isOffSendToMe
                                                                                                ),
                                                                                                this.listVisible.some(
                                                                                                    (e) => e === t
                                                                                                ))
                                                                                            ) {
                                                                                                const e =
                                                                                                    this.convDataManager.getConvByIdSync(
                                                                                                        t
                                                                                                    );
                                                                                                e && e.pinned
                                                                                                    ? vt.e.logAction(
                                                                                                          1390703
                                                                                                      )
                                                                                                    : (St.g.setFlagForCurrentUser(
                                                                                                          null,
                                                                                                          'z_sendtome',
                                                                                                          Date.now()
                                                                                                      ),
                                                                                                      vt.e.logAction(
                                                                                                          1390702
                                                                                                      ));
                                                                                            } else if (s) {
                                                                                                const e =
                                                                                                        ot.a.PinDataManager.getTotalPinnedConversation() >=
                                                                                                        We.default
                                                                                                            .limit_pin_messages,
                                                                                                    s =
                                                                                                        We.default
                                                                                                            .auto_pin_send2me &&
                                                                                                        !St.g.getFlagForCurrentUser(
                                                                                                            null,
                                                                                                            'z_sendtome_pinned'
                                                                                                        ) &&
                                                                                                        !e;
                                                                                                this.convDataManager.createEmptyConvForUser(
                                                                                                    t,
                                                                                                    s ? 1 : 0,
                                                                                                    v.CONV_OT_STATE
                                                                                                        .none,
                                                                                                    {}
                                                                                                ),
                                                                                                    s &&
                                                                                                        (ot.a.PinDataManager.pin(
                                                                                                            [t]
                                                                                                        ),
                                                                                                        St.g.setFlagForCurrentUser(
                                                                                                            null,
                                                                                                            'z_sendtome_pinned',
                                                                                                            1
                                                                                                        )),
                                                                                                    St.g.setFlagForCurrentUser(
                                                                                                        null,
                                                                                                        'z_sendtome',
                                                                                                        Date.now()
                                                                                                    ),
                                                                                                    this.onPreviewChange(
                                                                                                        { convId: t },
                                                                                                        []
                                                                                                    );
                                                                                            }
                                                                                        }
                                                                                        addStrangersToVisible(e, t) {
                                                                                            if (!t || !t.length)
                                                                                                return e;
                                                                                            if (this.isMeBAAccount())
                                                                                                return e.concat(t);
                                                                                            {
                                                                                                const s =
                                                                                                    yt.a.filterByResponsed(
                                                                                                        t,
                                                                                                        !1
                                                                                                    );
                                                                                                if (s.length) {
                                                                                                    this.newestStrangerId =
                                                                                                        yt.a.getNewestConvFromIds(
                                                                                                            s
                                                                                                        );
                                                                                                    e.includes(
                                                                                                        v.CONV_FILTER
                                                                                                            .STRANGER
                                                                                                    ) ||
                                                                                                        e.push(
                                                                                                            v
                                                                                                                .CONV_FILTER
                                                                                                                .STRANGER
                                                                                                        );
                                                                                                }
                                                                                                return (
                                                                                                    t.forEach((t) => {
                                                                                                        this.convDataManager.isRespondedByMeSync(
                                                                                                            t
                                                                                                        ) && e.push(t);
                                                                                                    }),
                                                                                                    e
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        onLabelChangeConvs(e, t, s) {
                                                                                            if (
                                                                                                (this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30026,
                                                                                                    'onLabelChangeConvs',
                                                                                                    t.length,
                                                                                                    e
                                                                                                ),
                                                                                                t.length &&
                                                                                                    this.labelFilters.includes(
                                                                                                        e
                                                                                                    ))
                                                                                            )
                                                                                                if ('add' == s) {
                                                                                                    const e = t.filter(
                                                                                                        (e) =>
                                                                                                            !this.listFiltered.includes(
                                                                                                                e
                                                                                                            ) &&
                                                                                                            !this.listHiddens.includes(
                                                                                                                e
                                                                                                            )
                                                                                                    );
                                                                                                    if (!e.length)
                                                                                                        return;
                                                                                                    (this.listFiltered =
                                                                                                        [
                                                                                                            ...this
                                                                                                                .listFiltered,
                                                                                                            ...e,
                                                                                                        ]),
                                                                                                        (this.listFiltered =
                                                                                                            yt.a.sortConvId(
                                                                                                                this
                                                                                                                    .listFiltered,
                                                                                                                this
                                                                                                                    .typeFilter ===
                                                                                                                    ft
                                                                                                                        .FilterType
                                                                                                                        .UNREAD,
                                                                                                                !1
                                                                                                            )),
                                                                                                        this.signalRenderList();
                                                                                                } else {
                                                                                                    let e = !1;
                                                                                                    t.forEach((t) => {
                                                                                                        const s =
                                                                                                                Ct.b.getLabelObjByConversaionId(
                                                                                                                    t
                                                                                                                ),
                                                                                                            i = s
                                                                                                                ? s.id
                                                                                                                : null;
                                                                                                        this.labelFilters.includes(
                                                                                                            '' + i
                                                                                                        ) ||
                                                                                                            ((this.listFiltered =
                                                                                                                this.listFiltered.filter(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) =>
                                                                                                                        e !==
                                                                                                                        t
                                                                                                                )),
                                                                                                            (e = !0));
                                                                                                    }),
                                                                                                        e &&
                                                                                                            this.signalRenderList();
                                                                                                }
                                                                                        }
                                                                                        moveConvOutConvList(e) {
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30027,
                                                                                                'moveConvOutConvList',
                                                                                                e
                                                                                            ),
                                                                                                (this.listVisible =
                                                                                                    this.listVisible.filter(
                                                                                                        (t) => t !== e
                                                                                                    )),
                                                                                                (this.listFiltered =
                                                                                                    this.listFiltered.filter(
                                                                                                        (t) => t !== e
                                                                                                    )),
                                                                                                (this.listStrangers =
                                                                                                    this.listStrangers.filter(
                                                                                                        (t) => t !== e
                                                                                                    )),
                                                                                                e !==
                                                                                                    this
                                                                                                        .newestStrangerId ||
                                                                                                    this.isMeBAAccount() ||
                                                                                                    this.updateNewestStrangerId(
                                                                                                        this
                                                                                                            .listStrangers
                                                                                                    ),
                                                                                                this.signalRenderList();
                                                                                        }
                                                                                        getAlterId() {
                                                                                            return new Map([
                                                                                                [
                                                                                                    v.CONV_FILTER
                                                                                                        .STRANGER,
                                                                                                    this
                                                                                                        .newestStrangerId,
                                                                                                ],
                                                                                            ]);
                                                                                        }
                                                                                        updateNewestStrangerId(e) {
                                                                                            if (this.isMeBAAccount())
                                                                                                return;
                                                                                            const t =
                                                                                                    yt.a.filterByResponsed(
                                                                                                        e,
                                                                                                        !1
                                                                                                    ),
                                                                                                s =
                                                                                                    this
                                                                                                        .newestStrangerId;
                                                                                            if (
                                                                                                ((this.newestStrangerId =
                                                                                                    yt.a.getNewestConvFromIds(
                                                                                                        t
                                                                                                    )),
                                                                                                this.newestStrangerId ||
                                                                                                    ((this.listVisible =
                                                                                                        this.listVisible.filter(
                                                                                                            (e) =>
                                                                                                                e !==
                                                                                                                v
                                                                                                                    .CONV_FILTER
                                                                                                                    .STRANGER
                                                                                                        )),
                                                                                                    this.signalRenderList()),
                                                                                                this.previewManager.updateStrangerBox(
                                                                                                    this
                                                                                                        .newestStrangerId
                                                                                                ),
                                                                                                s !==
                                                                                                    this
                                                                                                        .newestStrangerId &&
                                                                                                    this
                                                                                                        .newestStrangerId)
                                                                                            ) {
                                                                                                const [e, t] =
                                                                                                    yt.a.insertToProperPosition(
                                                                                                        this
                                                                                                            .listVisible,
                                                                                                        v.CONV_FILTER
                                                                                                            .STRANGER,
                                                                                                        this.getAlterId()
                                                                                                    );
                                                                                                (this.listVisible = e),
                                                                                                    this.signalRenderList();
                                                                                            }
                                                                                        }
                                                                                        rebuildList() {
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30028,
                                                                                                `rebuildList 1: ${this.listRawAll.size} ${this.listVisible.length} ${this.listStrangers.length}`
                                                                                            ),
                                                                                                (this.listStrangers =
                                                                                                    []),
                                                                                                (this.listVisible = []),
                                                                                                (this.listHiddens = []),
                                                                                                (this.listFiltered =
                                                                                                    []),
                                                                                                (this.newestStrangerId =
                                                                                                    '');
                                                                                            const e = Array.from(
                                                                                                    this.listRawAll
                                                                                                ),
                                                                                                t =
                                                                                                    yt.a.groupConversaionSync(
                                                                                                        e
                                                                                                    );
                                                                                            if (
                                                                                                (this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30029,
                                                                                                    `grouped list #2: \n\t\t\t${t.hidden.length}\n\t\t\t- ${t.stranger.length}\n\t\t\t- ${t.outdate.length}\n\t\t\t- ${t.visible.length}\n\t\t`
                                                                                                ),
                                                                                                We.default
                                                                                                    .stagingAccount)
                                                                                            )
                                                                                                for (const n in t)
                                                                                                    this.logger.zsymb(
                                                                                                        0,
                                                                                                        10577,
                                                                                                        30030,
                                                                                                        `${n}:, ${t[n]}`
                                                                                                    );
                                                                                            (this.listStrangers =
                                                                                                t.stranger),
                                                                                                (this.listHiddens =
                                                                                                    t.hidden);
                                                                                            const s =
                                                                                                    this.addStrangersToVisible(
                                                                                                        t.visible,
                                                                                                        this
                                                                                                            .listStrangers
                                                                                                    ),
                                                                                                i =
                                                                                                    this.safeSortConvList(
                                                                                                        s,
                                                                                                        !1
                                                                                                    );
                                                                                            (this.listVisible = i),
                                                                                                this.logger.zsymb(
                                                                                                    0,
                                                                                                    10577,
                                                                                                    30031,
                                                                                                    `visible sorted #2: ${this.listVisible}`
                                                                                                ),
                                                                                                this.labelFilters
                                                                                                    .length &&
                                                                                                    this.applyLabelFilter(
                                                                                                        this
                                                                                                            .labelFilters
                                                                                                    ),
                                                                                                this.typeFilter !==
                                                                                                    ft.FilterType.ALL &&
                                                                                                    this.applyTypeFilter(
                                                                                                        this.typeFilter,
                                                                                                        We.default
                                                                                                            .should_force_genlist_conv
                                                                                                    ),
                                                                                                this.signalRenderList(),
                                                                                                this.signalRenderState();
                                                                                        }
                                                                                        handleUserPackageChange() {
                                                                                            this.logger.zsymb(
                                                                                                0,
                                                                                                10577,
                                                                                                30032,
                                                                                                `handleUserPackageChange: ${rt.default.isMeBAAccount()}}`
                                                                                            ),
                                                                                                this.rebuildList();
                                                                                        }
                                                                                        signalRenderList(e) {
                                                                                            void 0 === e && (e = 'all'),
                                                                                                Object(Pe.h)(
                                                                                                    this.name,
                                                                                                    e
                                                                                                );
                                                                                        }
                                                                                        signalRenderState() {
                                                                                            Object(Pe.g)(
                                                                                                this.name,
                                                                                                Mt.c
                                                                                            );
                                                                                        }
                                                                                        logActionSelectConv(e) {
                                                                                            const t =
                                                                                                this.labelFilters
                                                                                                    .length > 0;
                                                                                            if (
                                                                                                (this.typeFilter ===
                                                                                                ft.FilterType.UNREAD
                                                                                                    ? (vt.e.logAction(
                                                                                                          1453103
                                                                                                      ),
                                                                                                      t ||
                                                                                                          vt.e.logAction(
                                                                                                              1453107
                                                                                                          ))
                                                                                                    : this
                                                                                                          .typeFilter ===
                                                                                                      ft.FilterType.ALL
                                                                                                    ? (vt.e.logAction(
                                                                                                          1453104
                                                                                                      ),
                                                                                                      t &&
                                                                                                          vt.e.logAction(
                                                                                                              1453108
                                                                                                          ))
                                                                                                    : this
                                                                                                          .typeFilter ===
                                                                                                      ft.FilterType
                                                                                                          .FOCUSED
                                                                                                    ? vt.e.logAction(
                                                                                                          1453501
                                                                                                      )
                                                                                                    : this
                                                                                                          .typeFilter ===
                                                                                                          ft.FilterType
                                                                                                              .ARCHIVED &&
                                                                                                      vt.e.logAction(
                                                                                                          1453502
                                                                                                      ),
                                                                                                t)
                                                                                            )
                                                                                                vt.e.logAction(1453105);
                                                                                            else {
                                                                                                vt.e.logAction(1453106);
                                                                                                for (
                                                                                                    let e = 0;
                                                                                                    e <
                                                                                                    this.labelFilters
                                                                                                        .length;
                                                                                                    e++
                                                                                                ) {
                                                                                                    if (
                                                                                                        parseInt(
                                                                                                            this
                                                                                                                .labelFilters[
                                                                                                                e
                                                                                                            ]
                                                                                                        ) > 0
                                                                                                    ) {
                                                                                                        vt.e.logAction(
                                                                                                            1453109
                                                                                                        );
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            this.typeFilter ==
                                                                                                ft.FilterType
                                                                                                    .ARCHIVED &&
                                                                                                Bt.a.sendTrackSrc(
                                                                                                    e,
                                                                                                    4,
                                                                                                    !1
                                                                                                );
                                                                                        }
                                                                                        init() {}
                                                                                        getItem(e) {
                                                                                            return e.key === Mt.c
                                                                                                ? {
                                                                                                      labelFilters:
                                                                                                          this
                                                                                                              .labelFilters,
                                                                                                      typeFilter:
                                                                                                          this
                                                                                                              .typeFilter,
                                                                                                      loaded: this
                                                                                                          .loaded,
                                                                                                      isEnableArchivedChat:
                                                                                                          this
                                                                                                              .isEnableArchivedChat,
                                                                                                      hasUnreadArchivedChat:
                                                                                                          this
                                                                                                              .hasUnreadArchivedChat,
                                                                                                      typeFilterSrc:
                                                                                                          this
                                                                                                              .typeFilterSrc,
                                                                                                  }
                                                                                                : Gt;
                                                                                        }
                                                                                        getList(e) {
                                                                                            return e.key === Mt.c ||
                                                                                                (this.typeFilter ==
                                                                                                    ft.FilterType.ALL &&
                                                                                                    0 ===
                                                                                                        this
                                                                                                            .labelFilters
                                                                                                            .length)
                                                                                                ? this.listVisible
                                                                                                : this.listFiltered;
                                                                                        }
                                                                                        onGetItemFailure(e) {}
                                                                                        onGetListFailure(e) {}
                                                                                        bindUIMenu(e, t) {
                                                                                            this.menuRef[e] = t;
                                                                                        }
                                                                                        cleanUpUIMenu(e) {
                                                                                            this.menuRef[e] = null;
                                                                                        }
                                                                                        showMenu(e, t, s) {
                                                                                            if (
                                                                                                this.menuRef[e] &&
                                                                                                e === ht.b
                                                                                            )
                                                                                                this.showConvActionMenu(
                                                                                                    t,
                                                                                                    s
                                                                                                );
                                                                                        }
                                                                                        hideMenu(e) {
                                                                                            this.menuRef[e];
                                                                                        }
                                                                                        showConvActionMenu(e, t) {
                                                                                            if (t && t.friendItem)
                                                                                                return;
                                                                                            if (
                                                                                                t.userId ===
                                                                                                    v.CONV_FILTER
                                                                                                        .STRANGER ||
                                                                                                t.userId ===
                                                                                                    v.CONV_FILTER.MEDIA
                                                                                            )
                                                                                                return;
                                                                                            const s = Object(i.a)(
                                                                                                    {},
                                                                                                    t
                                                                                                ),
                                                                                                n = s.userId;
                                                                                            if (
                                                                                                s &&
                                                                                                !He.default.isFakeId(n)
                                                                                            ) {
                                                                                                const e =
                                                                                                        this.previewManager.getPreviewByIDSync(
                                                                                                            n
                                                                                                        ),
                                                                                                    t =
                                                                                                        rt.default.getProfileFriendByIdSync(
                                                                                                            n
                                                                                                        ) || {},
                                                                                                    i =
                                                                                                        this.unreadDataManager.getUnreadByConvIdSync(
                                                                                                            n
                                                                                                        );
                                                                                                (s.lastMessage =
                                                                                                    null == e
                                                                                                        ? void 0
                                                                                                        : e.message),
                                                                                                    (s.isFr = t.isFr),
                                                                                                    (s.unreadMark =
                                                                                                        null == i
                                                                                                            ? void 0
                                                                                                            : i.unreadMark),
                                                                                                    (s.smsUnreadCount =
                                                                                                        null == i
                                                                                                            ? void 0
                                                                                                            : i.smsUnreadCount);
                                                                                            }
                                                                                            this.menuRef[
                                                                                                ht.b
                                                                                            ].updateTargetInfo(s),
                                                                                                this.menuRef[
                                                                                                    ht.b
                                                                                                ].showAction(
                                                                                                    Object(i.a)({}, e)
                                                                                                );
                                                                                        }
                                                                                        bindUIContainer(e) {
                                                                                            this.convUIListContainer =
                                                                                                e;
                                                                                        }
                                                                                        cleanUpUIContainer() {
                                                                                            this.convUIListContainer =
                                                                                                null;
                                                                                        }
                                                                                        getEnableArchivedChat() {
                                                                                            return this
                                                                                                .isEnableArchivedChat;
                                                                                        }
                                                                                        getListFilterSrc(e) {
                                                                                            return this
                                                                                                .typeFilterSrc ===
                                                                                                ft.FilterSrcType.UNREAD
                                                                                                ? yt.a.filterByUnread(e)
                                                                                                : e;
                                                                                        }
                                                                                        setTypeFilterSrc(e) {
                                                                                            if (
                                                                                                this.typeFilterSrc !==
                                                                                                    e &&
                                                                                                ((this.typeFilterSrc =
                                                                                                    e),
                                                                                                this.applyTypeFilter(
                                                                                                    this.typeFilter,
                                                                                                    !0
                                                                                                ),
                                                                                                e ===
                                                                                                    ft.FilterSrcType
                                                                                                        .UNREAD)
                                                                                            ) {
                                                                                                const e =
                                                                                                    this.labelFilters
                                                                                                        .length > 0
                                                                                                        ? 1453215
                                                                                                        : 1453214;
                                                                                                vt.e.logAction(e);
                                                                                            }
                                                                                        }
                                                                                        genListArchivedChat(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            i,
                                                                                            n
                                                                                        ) {
                                                                                            void 0 === i && (i = !0),
                                                                                                void 0 === n &&
                                                                                                    (n = !0);
                                                                                            let r = [];
                                                                                            (r = yt.a.filterByLabel(
                                                                                                this.getListFilterSrc(
                                                                                                    e
                                                                                                ),
                                                                                                s
                                                                                            )),
                                                                                                s.length &&
                                                                                                    n &&
                                                                                                    this
                                                                                                        .typeFilterSrc !==
                                                                                                        ft.FilterSrcType
                                                                                                            .UNREAD &&
                                                                                                    this.addLikeConvToFilterListV2(
                                                                                                        r,
                                                                                                        s
                                                                                                    );
                                                                                            let a =
                                                                                                this.getListFilterSrc(
                                                                                                    this.listStrangers
                                                                                                ).filter(
                                                                                                    (e) =>
                                                                                                        ((Bt.a.isArchivedChat(
                                                                                                            e
                                                                                                        ) &&
                                                                                                            t) ||
                                                                                                            (!Bt.a.isArchivedChat(
                                                                                                                e
                                                                                                            ) &&
                                                                                                                !t)) &&
                                                                                                        !_t.a.isThreadHidden(
                                                                                                            e
                                                                                                        )
                                                                                                );
                                                                                            return (
                                                                                                s.includes(ht.h) &&
                                                                                                1 == s.length
                                                                                                    ? this.isMeBAAccount() ||
                                                                                                      (a =
                                                                                                          yt.a.filterByResponsed(
                                                                                                              a,
                                                                                                              !1
                                                                                                          ))
                                                                                                    : s.includes(
                                                                                                          ht.h
                                                                                                      ) ||
                                                                                                      (a =
                                                                                                          yt.a.filterByLabel(
                                                                                                              a,
                                                                                                              s
                                                                                                          )),
                                                                                                (r = r.filter(
                                                                                                    (e) =>
                                                                                                        !(
                                                                                                            this
                                                                                                                .typeFilter ===
                                                                                                                ft
                                                                                                                    .FilterType
                                                                                                                    .ARCHIVED ||
                                                                                                            !a.length ||
                                                                                                            e !=
                                                                                                                v
                                                                                                                    .CONV_FILTER
                                                                                                                    .STRANGER
                                                                                                        ) ||
                                                                                                        (((Bt.a.isArchivedChat(
                                                                                                            e
                                                                                                        ) &&
                                                                                                            t) ||
                                                                                                            (!Bt.a.isArchivedChat(
                                                                                                                e
                                                                                                            ) &&
                                                                                                                !t)) &&
                                                                                                            e !==
                                                                                                                v
                                                                                                                    .CONV_FILTER
                                                                                                                    .STRANGER &&
                                                                                                            !yt.a.isStrangerV2(
                                                                                                                e
                                                                                                            ) &&
                                                                                                            !_t.a.isThreadHidden(
                                                                                                                e
                                                                                                            ))
                                                                                                )),
                                                                                                i &&
                                                                                                    (this.typeFilter ===
                                                                                                    ft.FilterType
                                                                                                        .ARCHIVED
                                                                                                        ? (r =
                                                                                                              r.concat(
                                                                                                                  a
                                                                                                              ))
                                                                                                        : this.isMeBAAccount() ||
                                                                                                          s.length
                                                                                                        ? ((this.isMeBAAccount() &&
                                                                                                              (null ==
                                                                                                                  s ||
                                                                                                                  !s.length)) ||
                                                                                                              (null !=
                                                                                                                  s &&
                                                                                                                  s.length)) &&
                                                                                                          (r =
                                                                                                              r.concat(
                                                                                                                  a
                                                                                                              ))
                                                                                                        : (r =
                                                                                                              this.addStrangersToVisible(
                                                                                                                  r,
                                                                                                                  a
                                                                                                              ))),
                                                                                                (r = r.filter(
                                                                                                    (e, t) =>
                                                                                                        r.indexOf(e) ==
                                                                                                        t
                                                                                                )),
                                                                                                this.safeSortConvList(
                                                                                                    r,
                                                                                                    this
                                                                                                        .typeFilterSrc ===
                                                                                                        ft.FilterSrcType
                                                                                                            .UNREAD
                                                                                                )
                                                                                            );
                                                                                        }
                                                                                        updateListArchivedChat() {
                                                                                            this.typeFilter ==
                                                                                            ft.FilterType.FOCUSED
                                                                                                ? this.onTypeFilterChange(
                                                                                                      ft.FilterType
                                                                                                          .FOCUSED,
                                                                                                      !0
                                                                                                  )
                                                                                                : this.typeFilter ==
                                                                                                      ft.FilterType
                                                                                                          .ARCHIVED &&
                                                                                                  this.onTypeFilterChange(
                                                                                                      ft.FilterType
                                                                                                          .ARCHIVED,
                                                                                                      !0
                                                                                                  );
                                                                                        }
                                                                                        onOffArchivedChat(e) {
                                                                                            if (
                                                                                                !We.default
                                                                                                    .enable_archived_chat
                                                                                            )
                                                                                                return;
                                                                                            const t =
                                                                                                le.default.getConvUXVersion();
                                                                                            this.isEnableArchivedChat &&
                                                                                                e &&
                                                                                                '2' == t &&
                                                                                                ((this.isEnableArchivedChat =
                                                                                                    !1),
                                                                                                this.signalRenderState()),
                                                                                                this
                                                                                                    .isEnableArchivedChat !=
                                                                                                    e &&
                                                                                                    (e ||
                                                                                                    (this.typeFilter !==
                                                                                                        ft.FilterType
                                                                                                            .ARCHIVED &&
                                                                                                        this
                                                                                                            .typeFilter !==
                                                                                                            ft
                                                                                                                .FilterType
                                                                                                                .FOCUSED)
                                                                                                        ? e &&
                                                                                                          this.onTypeFilterChange(
                                                                                                              ft
                                                                                                                  .FilterType
                                                                                                                  .FOCUSED,
                                                                                                              !0
                                                                                                          )
                                                                                                        : this.onTypeFilterChange(
                                                                                                              ft
                                                                                                                  .FilterType
                                                                                                                  .ALL,
                                                                                                              !0
                                                                                                          ),
                                                                                                    this.labelDataManager.onClearFilter(),
                                                                                                    this.setTypeFilterSrc(
                                                                                                        ft.FilterSrcType
                                                                                                            .ALL
                                                                                                    ),
                                                                                                    (this.isEnableArchivedChat =
                                                                                                        e && '3' == t),
                                                                                                    this.signalRenderState());
                                                                                        }
                                                                                        isShowUnreadArchivedChat() {
                                                                                            return this
                                                                                                .hasUnreadArchivedChat;
                                                                                        }
                                                                                        updateUnreadArchivedChat(e) {
                                                                                            this.typeFilter !=
                                                                                                ft.FilterType
                                                                                                    .ARCHIVED &&
                                                                                                (this.hasUnreadArchivedChat =
                                                                                                    e),
                                                                                                this.signalRenderState();
                                                                                        }
                                                                                    })
                                                                                ) || mt)
                                                                        ) || mt)
                                                                ) || mt)
                                                        ) || mt)
                                                ) || mt)
                                        ) || mt)
                                ) || mt)
                        ) || mt)
                );
                var zt,
                    Vt = s('EYv5'),
                    $t = s('AtyM'),
                    Wt = s('R5gT'),
                    Kt = s('Xzw3'),
                    qt = s('d+hT'),
                    Ht = s('uEOi'),
                    Qt = s('rQsU'),
                    Jt = s('kTC5'),
                    Zt = s('4wTQ'),
                    Xt = s('ES/k');
                const Yt = {
                        isFocusSearchBox: !1,
                        isFocusOnRecentSearch: !1,
                        searchText: '',
                        searchResult: {},
                        searching: !1,
                        conversation: null,
                        highlightId: '',
                        filter: { timeFrom: 0, timeTo: Date.now() },
                    },
                    es = new He.LocalId();
                var ts;
                !(function (e) {
                    (e[(e.STEP_CONTACT = 0)] = 'STEP_CONTACT'),
                        (e[(e.STEP_MESSAGES = 1)] = 'STEP_MESSAGES'),
                        (e[(e.STEP_FILES = 2)] = 'STEP_FILES'),
                        (e[(e.STEP_DIRECTORY = 3)] = 'STEP_DIRECTORY');
                })(ts || (ts = {}));
                Object(pt.b)(ft.SearchController)(
                    (zt =
                        (function (e, t) {
                            return d.ModuleContainer.inject(Qt.b)(e, void 0, 0);
                        })(
                            (zt =
                                (function (e, t) {
                                    return d.ModuleContainer.inject(ut.b)(e, void 0, 1);
                                })(
                                    (zt =
                                        (function (e, t) {
                                            return d.ModuleContainer.inject(ut.h)(e, void 0, 2);
                                        })(
                                            (zt =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (zt =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === Qt.b ? Object : Qt.b,
                                                            void 0 === ut.b ? Object : ut.b,
                                                            void 0 === ut.h ? Object : ut.h,
                                                        ])(
                                                            (zt = class {
                                                                constructor(e, t, s) {
                                                                    (this.convListController = e),
                                                                        (this.convDataManager = t),
                                                                        (this.previewDataManager = s),
                                                                        (this.state = void 0),
                                                                        (this.pageLoad = void 0),
                                                                        (this.curQuery = void 0),
                                                                        (this.cacheResSearch = void 0),
                                                                        (this.countQuery = void 0),
                                                                        (this.countTimeUseGlobalSearch = void 0),
                                                                        (this.countSelectTopRes = void 0),
                                                                        (this.cacheSearch = void 0),
                                                                        (this.trackSearch = void 0),
                                                                        (this.trackSearchVietnamese = void 0),
                                                                        (this.lastTextSearch = void 0),
                                                                        (this.lastTextSearchTs = void 0),
                                                                        (this.isShowRecentSearch = void 0),
                                                                        (this.isFirstLoadSuccess = void 0),
                                                                        (this.searchDelay = void 0),
                                                                        (this.closeBySendingMsg = void 0),
                                                                        (this.clearAdminMode = void 0),
                                                                        (this.timeouResetDataMsg = void 0),
                                                                        (this.searchResultList = void 0),
                                                                        (this.recentSearchList = void 0),
                                                                        (this.searchInput = void 0),
                                                                        (this.loadingMore = void 0),
                                                                        (this.loadingMoreFiles = void 0),
                                                                        (this.oldestTime = void 0),
                                                                        (this.functionSearchByName = void 0),
                                                                        (this.timeoutLog = void 0),
                                                                        (this._sbc = null),
                                                                        (this._removeSearchResult = (e, t) => {
                                                                            const s = this.getSearchState();
                                                                            if (s && !s.conversation && s.searchResult)
                                                                                if (t) {
                                                                                    if (!s.searchResult.groups) return;
                                                                                    const t = [
                                                                                        ...s.searchResult.groups,
                                                                                    ];
                                                                                    for (let n = 0; n < t.length; n++)
                                                                                        if (t[n].userId == e) {
                                                                                            t.splice(n, 1),
                                                                                                this.updateState(
                                                                                                    Object(i.a)(
                                                                                                        Object(i.a)(
                                                                                                            {},
                                                                                                            s
                                                                                                        ),
                                                                                                        {},
                                                                                                        {
                                                                                                            searchResult:
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    Object(
                                                                                                                        i.a
                                                                                                                    )(
                                                                                                                        {},
                                                                                                                        s.searchResult
                                                                                                                    ),
                                                                                                                    {},
                                                                                                                    {
                                                                                                                        groups: t,
                                                                                                                    }
                                                                                                                ),
                                                                                                        }
                                                                                                    )
                                                                                                );
                                                                                            break;
                                                                                        }
                                                                                } else {
                                                                                    if (!s.searchResult.friends) return;
                                                                                    const t = [
                                                                                        ...s.searchResult.friends,
                                                                                    ];
                                                                                    for (let n = 0; n < t.length; n++)
                                                                                        if (t[n].userId == e) {
                                                                                            t.splice(n, 1),
                                                                                                this.updateState(
                                                                                                    Object(i.a)(
                                                                                                        Object(i.a)(
                                                                                                            {},
                                                                                                            s
                                                                                                        ),
                                                                                                        {},
                                                                                                        {
                                                                                                            searchResult:
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    Object(
                                                                                                                        i.a
                                                                                                                    )(
                                                                                                                        {},
                                                                                                                        s.searchResult
                                                                                                                    ),
                                                                                                                    {},
                                                                                                                    {
                                                                                                                        friends:
                                                                                                                            t,
                                                                                                                    }
                                                                                                                ),
                                                                                                        }
                                                                                                    )
                                                                                                );
                                                                                            break;
                                                                                        }
                                                                                }
                                                                        }),
                                                                        (this.name = ft.SEARCH_CONTROLLER),
                                                                        (this.key = 'windowId'),
                                                                        (this.state = Yt),
                                                                        (this.pageLoad = 0),
                                                                        (this.curQuery = ''),
                                                                        (this.countQuery = 0),
                                                                        (this.countTimeUseGlobalSearch = 0),
                                                                        (this.countSelectTopRes = 0),
                                                                        (this.cacheSearch = {
                                                                            items: [],
                                                                            keywords: null,
                                                                        }),
                                                                        (this.trackSearch = !1),
                                                                        (this.trackSearchVietnamese = !1),
                                                                        (this.lastTextSearch = ''),
                                                                        (this.lastTextSearchTs = 0),
                                                                        (this.isShowRecentSearch = !1),
                                                                        (this.searchDelay =
                                                                            this._getSearchDelaySetting()),
                                                                        (this.closeBySendingMsg = !1),
                                                                        (this.loadingMore = !1),
                                                                        (this.loadingMoreFiles = !1),
                                                                        (this.oldestTime = 0),
                                                                        (this.timeoutLog = null),
                                                                        (this.isFirstLoadSuccess = !1),
                                                                        (this._innerSearchFunc =
                                                                            this._innerSearchFunc.bind(this)),
                                                                        (this.functionSearchByName =
                                                                            He.default.throttle(
                                                                                this._innerSearchFunc,
                                                                                this.searchDelay
                                                                            )),
                                                                        (this.onKeywordChange =
                                                                            this.onKeywordChange.bind(this)),
                                                                        (this.loadMessagesV2 =
                                                                            this.loadMessagesV2.bind(this)),
                                                                        (this.loadMoreFiles =
                                                                            this.loadMoreFiles.bind(this)),
                                                                        (this.onKeyPressInput =
                                                                            this.onKeyPressInput.bind(this)),
                                                                        (this.onFocusInput =
                                                                            this.onFocusInput.bind(this)),
                                                                        (this.onBlurInput =
                                                                            this.onBlurInput.bind(this)),
                                                                        (this.onclickCloseSearchButton =
                                                                            this.onclickCloseSearchButton.bind(this)),
                                                                        (this.onClickClearSearch =
                                                                            this.onClickClearSearch.bind(this)),
                                                                        (this.onSearchKeyword =
                                                                            this.onSearchKeyword.bind(this)),
                                                                        (this.setRecentSearchFocusState =
                                                                            this.setRecentSearchFocusState.bind(this)),
                                                                        (this.focusSearchBox =
                                                                            this.focusSearchBox.bind(this)),
                                                                        (this.selectResult =
                                                                            this.selectResult.bind(this)),
                                                                        (this.onFileSelect =
                                                                            this.onFileSelect.bind(this)),
                                                                        (this.selectTopRes =
                                                                            this.selectTopRes.bind(this)),
                                                                        this.listenEvents();
                                                                }
                                                                get sidebarController() {
                                                                    return (
                                                                        this._sbc ||
                                                                            (this._sbc = d.ModuleContainer.resolve(
                                                                                ft.SidebarController
                                                                            )),
                                                                        this._sbc
                                                                    );
                                                                }
                                                                listenEvents() {
                                                                    Je.default.subscribe((e, t) => {
                                                                        switch (e) {
                                                                            case Ze.SideBarActions.FOCUS_SEARCH_INPUT:
                                                                                this.focusSearchBox();
                                                                                break;
                                                                            case Ze.FetchActions.FRIENDS_REMOVED:
                                                                                this._removeSearchResult(t, !1);
                                                                                break;
                                                                            case Ze.FetchActions.GROUP_LEAVE:
                                                                                this._removeSearchResult(t, !0);
                                                                                break;
                                                                            case Ze.SideBarActions.SEARCH_FILE_DONE:
                                                                                this.updateState(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, this.state),
                                                                                        {},
                                                                                        { searching: !1 }
                                                                                    )
                                                                                );
                                                                                break;
                                                                            case Ze.SideBarActions.CLEAR_SEARCH:
                                                                                this.clearSearch();
                                                                                break;
                                                                            case Ze.ConversationListActions
                                                                                .SELECT_CONVERSATION:
                                                                                setTimeout(() => {
                                                                                    this.state.highlightId !==
                                                                                        t.userId &&
                                                                                        this.setRecentSearchFocusState(
                                                                                            !1,
                                                                                            !1,
                                                                                            !0
                                                                                        ),
                                                                                        t.callPoint !==
                                                                                            Nt.a.JumpMessage &&
                                                                                            this.updateStateOf(
                                                                                                'highlightId',
                                                                                                null == t
                                                                                                    ? void 0
                                                                                                    : t.userId
                                                                                            );
                                                                                }, 0);
                                                                        }
                                                                    });
                                                                }
                                                                logSearch(e) {
                                                                    wt.p.getDebugSearch().showLogSearchFlow;
                                                                }
                                                                updateState(e, t) {
                                                                    void 0 === t && (t = !0),
                                                                        (this.state = e),
                                                                        t && Object(Pe.g)(this.name, Mt.c);
                                                                }
                                                                isTextKey(e) {
                                                                    return e.match(
                                                                        /^[a-zA-Z0-9!@#$%^&*)(+=._-|\\\[\]{}~`"\';:?/<>,-\s\n]$/
                                                                    );
                                                                }
                                                                isMultipleKeyPressed(e) {
                                                                    return e.ctrlKey || e.metaKey || e.altKey;
                                                                }
                                                                isKeywordStale(e) {
                                                                    return (
                                                                        Xt.a.formatTextSearch(e) !==
                                                                        Xt.a.formatTextSearch(this.state.searchText)
                                                                    );
                                                                }
                                                                bindUIList(e, t) {
                                                                    this._updateListRef(e, t);
                                                                }
                                                                cleanUpUIList(e) {
                                                                    this._updateListRef(e, null);
                                                                }
                                                                bindUISearchInput(e) {
                                                                    this.searchInput = e;
                                                                }
                                                                cleanUpUISearchInput() {
                                                                    this.searchInput = null;
                                                                }
                                                                _updateListRef(e, t) {
                                                                    switch (e) {
                                                                        case Jt.c.SEARCH_RESULT:
                                                                            this.searchResultList = t;
                                                                            break;
                                                                        case Jt.c.RECENT_SEARCH:
                                                                            this.recentSearchList = t;
                                                                    }
                                                                }
                                                                resetState() {
                                                                    (this.searchInput.value = ''),
                                                                        this.updateState(Object(i.a)({}, Yt));
                                                                }
                                                                updateStateOf(e, t) {
                                                                    this.state.hasOwnProperty(e) &&
                                                                        this.state[e] !== t &&
                                                                        ('searchText' === e &&
                                                                            (this.searchInput.value = t),
                                                                        this.updateState(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, this.state),
                                                                                {},
                                                                                { [e]: t }
                                                                            )
                                                                        ));
                                                                }
                                                                onKeyPressInput(e) {
                                                                    if (
                                                                        (this._isSelectAllSearchText() &&
                                                                            this.searchResultList &&
                                                                            this.isTextKey(e.key) &&
                                                                            !this.isMultipleKeyPressed(e) &&
                                                                            (this.searchResultList.openTabAll(),
                                                                            this.searchResultList.resetContactList()),
                                                                        e.which == v.K_BACK_SPACE
                                                                            ? this.state &&
                                                                              this.state.searchText &&
                                                                              '' !== this.state.searchText &&
                                                                              vt.e.logAction(12307)
                                                                            : '' === this.state.searchText &&
                                                                              !this.timeoutLog &&
                                                                              this.isTextKey(e.key) &&
                                                                              (this.timeoutLog = setTimeout(() => {
                                                                                  (this.timeoutLog = null),
                                                                                      vt.e.logAction(1232002);
                                                                              }, 3e3)),
                                                                        e.which == v.K_ESC)
                                                                    )
                                                                        !0 === this.isShowRecentSearch &&
                                                                            (this.updateState(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, this.state),
                                                                                    {},
                                                                                    {
                                                                                        isFocusOnRecentSearch: !1,
                                                                                        isFocusSearchBox: !1,
                                                                                    }
                                                                                )
                                                                            ),
                                                                            this.searchInput && this.searchInput.blur(),
                                                                            this.onCloseSearch()),
                                                                            '' != this.searchInput.value
                                                                                ? this.clearSearch(!1)
                                                                                : this.clearSearch(!0);
                                                                    else if (e.which == v.K_ENTER) {
                                                                        let e =
                                                                            this.searchResultList ||
                                                                            this.recentSearchList;
                                                                        if (e && this.state.searchText) {
                                                                            let t = e.selectFocusedConversation(!0);
                                                                            setTimeout(() => {
                                                                                this.state.conversation
                                                                                    ? this.focusSearchBox()
                                                                                    : _t.a.isThreadHidden(t) ||
                                                                                      Je.default.send(
                                                                                          Ze.ChatBoxActions.FOCUS_INPUT,
                                                                                          { userId: t, windowId: Mt.c }
                                                                                      );
                                                                            }, 0);
                                                                        }
                                                                    } else if (
                                                                        e.which == v.K_UP ||
                                                                        e.which == v.K_DOWN
                                                                    ) {
                                                                        this.searchResultList && vt.e.logAction(12317);
                                                                        let t =
                                                                            this.searchResultList ||
                                                                            this.recentSearchList;
                                                                        t &&
                                                                            (e.stopPropagation(),
                                                                            e.preventDefault(),
                                                                            e.which == v.K_UP
                                                                                ? t.moveUp()
                                                                                : t.moveDown());
                                                                    }
                                                                }
                                                                onKeywordChange(e, t) {
                                                                    let s = '';
                                                                    if (
                                                                        ((s = !e && t ? t : e.target.value),
                                                                        s &&
                                                                            (s = He.default.ZSafeFunction(
                                                                                () => s.normalize(),
                                                                                s
                                                                            )),
                                                                        this.countTimeUseGlobalSearch ||
                                                                            ((this.countTimeUseGlobalSearch =
                                                                                $t.a.now()),
                                                                            (this.countSelectTopRes = 0)),
                                                                        s)
                                                                    ) {
                                                                        const e = Xt.a.formatTextSearch(
                                                                                this.lastTextSearch
                                                                            ),
                                                                            t = Xt.a.formatTextSearch(s);
                                                                        He.default.log('searching: true'),
                                                                            We.default.stagingAccount &&
                                                                                this._checkOnAdminMode(s),
                                                                            this.trackSearch ||
                                                                                ((this.trackSearch = !0),
                                                                                vt.e.logAction(12318)),
                                                                            this.updateState(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, this.state),
                                                                                    {},
                                                                                    { searchText: s }
                                                                                )
                                                                            ),
                                                                            (this.countQuery = es.next()),
                                                                            this.functionSearchByName(
                                                                                s,
                                                                                this.countQuery,
                                                                                e !== t
                                                                            );
                                                                    } else
                                                                        this._resetCacheResultSearch(),
                                                                            Wt.a.abortSearch(),
                                                                            this.clearSearch(!1);
                                                                }
                                                                onFocusInput() {
                                                                    this.searchInput &&
                                                                        '' !== this.searchInput.value &&
                                                                        this.searchInput.select(),
                                                                        this.updateState(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, this.state),
                                                                                {},
                                                                                { isFocusSearchBox: !0 }
                                                                            )
                                                                        ),
                                                                        vt.e.logAction(1232001);
                                                                }
                                                                onBlurInput() {
                                                                    setTimeout(() => {
                                                                        this.updateState(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, this.state),
                                                                                {},
                                                                                { isFocusSearchBox: !1 }
                                                                            )
                                                                        ),
                                                                            this.searchInput &&
                                                                                '' == this.searchInput.value &&
                                                                                this.qosLogSearch();
                                                                    }, 20);
                                                                }
                                                                onclickCloseSearchButton(e) {
                                                                    this.setRecentSearchFocusState(!1),
                                                                        this.onCloseSearch(),
                                                                        this._resetCacheResultSearch(),
                                                                        this.clearSearch(!this.state.conversation),
                                                                        vt.e.logAction(1232003),
                                                                        e && (e.stopPropagation(), e.preventDefault());
                                                                }
                                                                onClickClearSearch() {
                                                                    wt.p.resetGlobalSearchMode(),
                                                                        this.state.conversation &&
                                                                            vt.e.logAction(12314),
                                                                        this._resetCacheResultSearch(),
                                                                        this.clearSearch(!this.state.conversation),
                                                                        this.focusSearchBox(),
                                                                        vt.e.logAction(1232006);
                                                                }
                                                                onSearchKeyword(e) {
                                                                    'string' == typeof e &&
                                                                        this.searchInput &&
                                                                        ((this.searchInput.value = e),
                                                                        this.onKeywordChange(null, e),
                                                                        Ht.a.addCacheKeyword(e));
                                                                }
                                                                onRemoveKeyword(e) {
                                                                    'string' == typeof e && Ht.a.removeCacheKeyword(e);
                                                                }
                                                                onFileSelect(e) {
                                                                    null != e &&
                                                                        e.msgId &&
                                                                        (this.updateStateOf('highlightId', e.msgId),
                                                                        this.state.searchText &&
                                                                            Ht.a.addCacheKeyword(
                                                                                this.state.searchText
                                                                            ));
                                                                }
                                                                setRecentSearchFocusState(e, t, s) {
                                                                    if (
                                                                        (void 0 === t && (t = !1),
                                                                        void 0 === s && (s = !1),
                                                                        !s)
                                                                    ) {
                                                                        const t =
                                                                            this.sidebarController.getSelectedId();
                                                                        if (
                                                                            this.state.isFocusOnRecentSearch === e ||
                                                                            (t && this.state.highlightId === t && !e)
                                                                        )
                                                                            return;
                                                                    }
                                                                    (this.state.isFocusOnRecentSearch = e),
                                                                        e && (this.closeBySendingMsg = !1),
                                                                        Object(Pe.g)(this.name, Mt.c);
                                                                }
                                                                onCloseSearch() {
                                                                    var e, t;
                                                                    vt.e.logAction(1232004),
                                                                        0 ==
                                                                            (null === (e = this.state.searchResult) ||
                                                                            void 0 === e ||
                                                                            null === (t = e.messages) ||
                                                                            void 0 === t
                                                                                ? void 0
                                                                                : t.length) && vt.e.logAction(1232202),
                                                                        this.qosLogSearch();
                                                                }
                                                                focusSearchBox(e) {
                                                                    void 0 === e && (e = !1),
                                                                        this.searchInput &&
                                                                            (this.searchInput.focus(),
                                                                            e &&
                                                                                setTimeout(() => {
                                                                                    this.searchInput.select();
                                                                                }, 0));
                                                                }
                                                                openRecentSearch() {
                                                                    this.searchInput
                                                                        ? this.searchInput.focus()
                                                                        : this.setRecentSearchFocusState(!0);
                                                                }
                                                                loadMessagesV2(e, t, s) {
                                                                    var n = this;
                                                                    void 0 === t && (t = !1);
                                                                    let r = this.state.searchResult,
                                                                        a = '',
                                                                        o = e;
                                                                    if (!this.state.searchText) return;
                                                                    a = this.state.searchText;
                                                                    let d = this.state,
                                                                        l = !1;
                                                                    t ||
                                                                        ((d = Object(i.a)(
                                                                            Object(i.a)({}, this.state),
                                                                            {},
                                                                            {
                                                                                searchResult: Object(i.a)(
                                                                                    Object(i.a)(
                                                                                        {},
                                                                                        this.state.searchResult
                                                                                    ),
                                                                                    {},
                                                                                    { messages: null }
                                                                                ),
                                                                            }
                                                                        )),
                                                                        (l = !0));
                                                                    const c = () =>
                                                                            this.state.filter.timeFrom != o.timeFrom ||
                                                                            this.state.filter.timeTo != o.timeTo ||
                                                                            !(
                                                                                !this.state.searchText ||
                                                                                !this.isKeywordStale(a)
                                                                            ),
                                                                        h =
                                                                            !this.loadingMore &&
                                                                            this.isFirstLoadSuccess &&
                                                                            !!r &&
                                                                            !!r.messages;
                                                                    if (!t || h) {
                                                                        this.logSearch(
                                                                            `[Search flow] load more msg: ${a}, ${this.pageLoad}`
                                                                        ),
                                                                            this.updateState(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, d),
                                                                                    {},
                                                                                    {
                                                                                        filter: {
                                                                                            timeFrom: e.timeFrom,
                                                                                            timeTo: e.timeTo,
                                                                                        },
                                                                                    }
                                                                                ),
                                                                                l
                                                                            ),
                                                                            (this.loadingMore = !0);
                                                                        const r = [],
                                                                            o = function (e, o) {
                                                                                var d;
                                                                                void 0 === o && (o = !1);
                                                                                let l = [];
                                                                                if (
                                                                                    ((n.loadingMore = !1),
                                                                                    n.logSearch(
                                                                                        `[Search flow] load more msg res: ${a}, ${
                                                                                            null === (d = e.arr) ||
                                                                                            void 0 === d
                                                                                                ? void 0
                                                                                                : d.length
                                                                                        }`
                                                                                    ),
                                                                                    c())
                                                                                )
                                                                                    return (
                                                                                        n.pageLoad++,
                                                                                        void (s && s(null, -1))
                                                                                    );
                                                                                if (e && e.listConv && e.arr) {
                                                                                    n.convListController
                                                                                        .getRecentContacts()
                                                                                        .forEach((t) => {
                                                                                            let s = e.listConv.indexOf(
                                                                                                t.userId
                                                                                            );
                                                                                            if (
                                                                                                s >= 0 &&
                                                                                                !_t.a.isThreadHidden(
                                                                                                    t.userId
                                                                                                )
                                                                                            )
                                                                                                for (
                                                                                                    let i = s;
                                                                                                    i <
                                                                                                    e.listConv.length;
                                                                                                    ++i
                                                                                                )
                                                                                                    e.listConv[i] ==
                                                                                                        t.userId &&
                                                                                                        (e.arr[
                                                                                                            i
                                                                                                        ].conversation =
                                                                                                            t);
                                                                                        }),
                                                                                        e.arr.forEach((e) => {
                                                                                            Object.keys(e.conversation)
                                                                                                .length > 1 &&
                                                                                                l.push(e);
                                                                                        }),
                                                                                        Array.prototype.push.apply(
                                                                                            r,
                                                                                            l
                                                                                        ),
                                                                                        o &&
                                                                                            t &&
                                                                                            r.length &&
                                                                                            n.pageLoad++,
                                                                                        c() ||
                                                                                            (!n.isFirstLoadSuccess &&
                                                                                                t) ||
                                                                                            (n.state.searchResult
                                                                                                .messages &&
                                                                                                (l =
                                                                                                    n.state.searchResult.messages.concat(
                                                                                                        l
                                                                                                    )),
                                                                                            n.updateState(
                                                                                                Object(i.a)(
                                                                                                    Object(i.a)(
                                                                                                        {},
                                                                                                        n.state
                                                                                                    ),
                                                                                                    {},
                                                                                                    {
                                                                                                        searchResult:
                                                                                                            Object(i.a)(
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    {},
                                                                                                                    n
                                                                                                                        .state
                                                                                                                        .searchResult
                                                                                                                ),
                                                                                                                {},
                                                                                                                {
                                                                                                                    messages:
                                                                                                                        l,
                                                                                                                }
                                                                                                            ),
                                                                                                        searching: !1,
                                                                                                    }
                                                                                                )
                                                                                            ),
                                                                                            s && o && s(r, n.pageLoad));
                                                                                }
                                                                            };
                                                                        Wt.a
                                                                            .searchGlobalMessagesV3(
                                                                                a,
                                                                                c,
                                                                                void 0,
                                                                                o,
                                                                                We.default.limit_result_msg_search + 1,
                                                                                e
                                                                            )
                                                                            .then((e) => o(e, !0))
                                                                            .catch((e) => {
                                                                                (this.loadingMore = !1),
                                                                                    this.logSearch(
                                                                                        `[Search flow] load more msg err: ${a}, ${e}`
                                                                                    ),
                                                                                    s && s(null, -1),
                                                                                    He.default.logCoreError(
                                                                                        'searchGlobalMsg v2 ' + e
                                                                                    );
                                                                            });
                                                                    } else s && s(null, -1);
                                                                }
                                                                loadMoreMessages() {
                                                                    this.state.searchResult;
                                                                }
                                                                loadMoreFiles() {
                                                                    let e = this.state.searchResult,
                                                                        t = this.state.searchText;
                                                                    var s;
                                                                    e &&
                                                                        e.rawFileResult &&
                                                                        e.files &&
                                                                        e.rawFileResult.length > e.lastFileOffset &&
                                                                        !this.loadingMoreFiles &&
                                                                        ((this.loadingMoreFiles = !0),
                                                                        null ===
                                                                            (s = d.ModuleContainer.resolve(Vt.a)) ||
                                                                            void 0 === s ||
                                                                            s
                                                                                .getMultiMedias(
                                                                                    'file',
                                                                                    e.rawFileResult.slice(
                                                                                        e.lastFileOffset,
                                                                                        e.lastFileOffset + 20
                                                                                    )
                                                                                )
                                                                                .then((s) => {
                                                                                    if (
                                                                                        ((this.loadingMoreFiles = !1),
                                                                                        this.isKeywordStale(t))
                                                                                    )
                                                                                        return;
                                                                                    e = this.state.searchResult;
                                                                                    const n = s.filter(Boolean);
                                                                                    let r = He.default.ZSafeFunction(
                                                                                            () =>
                                                                                                Math.max(
                                                                                                    0,
                                                                                                    e.rawFileResult
                                                                                                        .length -
                                                                                                        e.lastFileOffset -
                                                                                                        20
                                                                                                ) +
                                                                                                e.files.length +
                                                                                                n.length,
                                                                                            e.realFileLen
                                                                                        ),
                                                                                        a =
                                                                                            this.state.searchResult.files.concat(
                                                                                                n
                                                                                            );
                                                                                    a.sort(
                                                                                        (e, t) =>
                                                                                            parseInt(t.sendDttm) -
                                                                                            parseInt(e.sendDttm)
                                                                                    ),
                                                                                        this.updateState(
                                                                                            Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    this.state
                                                                                                ),
                                                                                                {},
                                                                                                {
                                                                                                    searchResult:
                                                                                                        Object(i.a)(
                                                                                                            Object(i.a)(
                                                                                                                {},
                                                                                                                this
                                                                                                                    .state
                                                                                                                    .searchResult
                                                                                                            ),
                                                                                                            {},
                                                                                                            {
                                                                                                                files: a,
                                                                                                                realFileLen:
                                                                                                                    r,
                                                                                                                lastFileOffset:
                                                                                                                    e.lastFileOffset +
                                                                                                                    20,
                                                                                                            }
                                                                                                        ),
                                                                                                }
                                                                                            )
                                                                                        );
                                                                                })
                                                                                .catch((e) => {
                                                                                    (this.loadingMoreFiles = !1),
                                                                                        He.default.logCoreError(
                                                                                            '_loadMoreFiles ',
                                                                                            e
                                                                                        );
                                                                                }));
                                                                }
                                                                qosLogSearch() {
                                                                    this.countTimeUseGlobalSearch &&
                                                                        (S.default.increaseSuccess(
                                                                            97111,
                                                                            0,
                                                                            $t.a.now() - this.countTimeUseGlobalSearch
                                                                        ),
                                                                        (this.countTimeUseGlobalSearch = 0)),
                                                                        this.countSelectTopRes >= 0 &&
                                                                            (S.default.increaseSuccess(
                                                                                97112,
                                                                                0,
                                                                                this.countSelectTopRes
                                                                            ),
                                                                            (this.countSelectTopRes = -1));
                                                                }
                                                                selectTopRes() {
                                                                    this.countSelectTopRes >= 0 &&
                                                                        this.countSelectTopRes++;
                                                                }
                                                                selectResult(e, t, s, n) {
                                                                    var r;
                                                                    void 0 === t && (t = !1),
                                                                        void 0 === s && (s = !1),
                                                                        void 0 === n && (n = !1);
                                                                    const a = this.state.searchText;
                                                                    let o = !!this.state.conversation;
                                                                    Zt.a
                                                                        .jumpToMessage(
                                                                            e.message,
                                                                            null === (r = e.conversation) ||
                                                                                void 0 === r
                                                                                ? void 0
                                                                                : r.userId,
                                                                            Te.f
                                                                        )
                                                                        .then((t) => {
                                                                            const { groupMsgs: s = [] } = t;
                                                                            let n = null;
                                                                            He.default.ZSafeFunction(() => {
                                                                                if (s)
                                                                                    for (let t = 0; t < s.length; t++)
                                                                                        if (
                                                                                            s[t].msgId ==
                                                                                            e.message.msgId
                                                                                        )
                                                                                            return (
                                                                                                (n = Object(i.a)(
                                                                                                    {},
                                                                                                    s[t]
                                                                                                )),
                                                                                                void (n.searchKeyWord =
                                                                                                    a)
                                                                                            );
                                                                            }, null),
                                                                                this.state.searchText &&
                                                                                    Ht.a.addCacheKeyword(
                                                                                        this.state.searchText
                                                                                    ),
                                                                                Je.default.send(
                                                                                    Ze.ChatBoxActions
                                                                                        .OPEN_CONV_JUMP_TO_MESSAGE_SEARCH,
                                                                                    {
                                                                                        messages: s,
                                                                                        focusId: ['' + e.message.msgId],
                                                                                        conversation: e.conversation,
                                                                                    }
                                                                                ),
                                                                                n &&
                                                                                    Object(Te.f)({
                                                                                        type: Ze.ChatBoxActions
                                                                                            .UPDATE_MESSAGE_ATTRIBUTES,
                                                                                        payload: n,
                                                                                    });
                                                                        })
                                                                        .catch((t) => {
                                                                            He.default.logCoreError(t),
                                                                                Ft.a.createWarning(
                                                                                    Rt.default.str(
                                                                                        'STR_MESSAGE_NOT_FOUND'
                                                                                    )
                                                                                ),
                                                                                n ||
                                                                                    Je.default.send(
                                                                                        Ze.ChatBoxActions
                                                                                            .OPEN_CONV_JUMP_TO_MESSAGE_SEARCH,
                                                                                        {
                                                                                            messages: [],
                                                                                            focusId: [],
                                                                                            conversation:
                                                                                                e.conversation,
                                                                                        }
                                                                                    );
                                                                        }),
                                                                        o
                                                                            ? (s && this.focusSearchBox(),
                                                                              this.updateState(
                                                                                  Object(i.a)(
                                                                                      Object(i.a)({}, this.state),
                                                                                      {},
                                                                                      { highlightId: e.message.msgId }
                                                                                  )
                                                                              ))
                                                                            : t ||
                                                                              this.updateState(
                                                                                  Object(i.a)(
                                                                                      Object(i.a)({}, this.state),
                                                                                      {},
                                                                                      { highlightId: e.message.msgId }
                                                                                  )
                                                                              );
                                                                }
                                                                getRecentSearchItems() {
                                                                    if (0 === We.default.recent_search.is_enable)
                                                                        return [];
                                                                    let e = Ht.a.getLocalRecentSearchList();
                                                                    if (!e) return [];
                                                                    let t = jt.default.getGroupsListSync(),
                                                                        s = t || [];
                                                                    return (
                                                                        (e = e.filter((e) => {
                                                                            if (
                                                                                e &&
                                                                                e.userId &&
                                                                                !_t.a.isThreadHidden(e.userId)
                                                                            ) {
                                                                                if (
                                                                                    e.userId.startsWith(
                                                                                        v.GROUPID_PREFIX
                                                                                    ) ||
                                                                                    1 === e.type
                                                                                ) {
                                                                                    let t = !1;
                                                                                    1 !== e.type ||
                                                                                        e.userId.startsWith(
                                                                                            v.GROUPID_PREFIX
                                                                                        ) ||
                                                                                        (e.userId =
                                                                                            v.GROUPID_PREFIX +
                                                                                            e.userId);
                                                                                    for (let i of s)
                                                                                        if (
                                                                                            i.userId &&
                                                                                            e.userId == i.userId
                                                                                        ) {
                                                                                            t = !0;
                                                                                            break;
                                                                                        }
                                                                                    return (
                                                                                        !!t ||
                                                                                        (Ht.a.removeLocalRecentSearchList(
                                                                                            e.userId
                                                                                        ),
                                                                                        !1)
                                                                                    );
                                                                                }
                                                                                return !0;
                                                                            }
                                                                            return !1;
                                                                        })),
                                                                        e
                                                                    );
                                                                }
                                                                getCacheRecentSearch() {
                                                                    return (
                                                                        (this.cacheSearch.items =
                                                                            this.getRecentSearchItems()),
                                                                        We.default.sync_recent_search.enable_kw &&
                                                                            (this.cacheSearch.keywords =
                                                                                Ht.a.getLocalKeywordList()),
                                                                        this.cacheSearch
                                                                    );
                                                                }
                                                                getPageLoad() {
                                                                    return this.pageLoad;
                                                                }
                                                                getSearchInputRef() {
                                                                    return this.searchInput;
                                                                }
                                                                getSearchState() {
                                                                    return this.state;
                                                                }
                                                                clearSearch(e) {
                                                                    if (
                                                                        (void 0 === e && (e = !0),
                                                                        this._resetCacheResultSearch(),
                                                                        (this.searchInput.value = ''),
                                                                        (this.lastTextSearch = ''),
                                                                        e)
                                                                    ) {
                                                                        if (
                                                                            (Kt.b.setMode(Kt.a.NORMAL),
                                                                            this.updateState(Object(i.a)({}, Yt)),
                                                                            this.sidebarController.getState(Mt.c)
                                                                                .currentTab == ft.SidebarTab.FILE_TAB)
                                                                        )
                                                                            return void this.functionSearchByName(
                                                                                null,
                                                                                this.countQuery,
                                                                                !0
                                                                            );
                                                                    } else
                                                                        this.updateState(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, this.state),
                                                                                {},
                                                                                {
                                                                                    searchText: '',
                                                                                    searching: !0,
                                                                                    highlightId: '',
                                                                                }
                                                                            )
                                                                        ),
                                                                            this.functionSearchByName(
                                                                                '',
                                                                                this.countQuery,
                                                                                !0
                                                                            );
                                                                }
                                                                _resetCacheResultSearch() {
                                                                    (this.curQuery = ''),
                                                                        (this.cacheResSearch = null),
                                                                        (this.trackSearch = !1),
                                                                        (this.trackSearchVietnamese = !1);
                                                                }
                                                                _checkOnAdminMode(e) {
                                                                    let t = this.__checkOnAdminMode(e);
                                                                    t &&
                                                                        (1 === t
                                                                            ? (this.clearAdminMode &&
                                                                                  clearTimeout(this.clearAdminMode),
                                                                              (We.default.adminMode = !0),
                                                                              this.sidebarController.togglePerfTab(!0),
                                                                              (this.clearAdminMode = setTimeout(() => {
                                                                                  (this.clearAdminMode = void 0),
                                                                                      (We.default.adminMode = void 0),
                                                                                      this.sidebarController.togglePerfTab();
                                                                              }, 216e5)))
                                                                            : 2 === t &&
                                                                              (this.clearAdminMode &&
                                                                                  (clearTimeout(this.clearAdminMode),
                                                                                  (this.clearAdminMode = void 0)),
                                                                              (We.default.adminMode = !1),
                                                                              this.sidebarController.togglePerfTab(
                                                                                  !1
                                                                              )));
                                                                }
                                                                __checkOnAdminMode(e) {
                                                                    if (
                                                                        e &&
                                                                        'string' == typeof e &&
                                                                        e.startsWith('$##')
                                                                    ) {
                                                                        return e.substring(3) === We.default.zAminKey
                                                                            ? 1
                                                                            : 2;
                                                                    }
                                                                    return 0;
                                                                }
                                                                _innerSearchFunc(e, t, s) {
                                                                    if ((void 0 === s && (s = !0), !es.valid(t)))
                                                                        return;
                                                                    if (
                                                                        this.sidebarController.getState(Mt.c)
                                                                            .currentTab === ft.SidebarTab.FILE_TAB
                                                                    )
                                                                        Je.default.send(Ze.SideBarActions.SEARCH_FILE, {
                                                                            term: e,
                                                                        });
                                                                    else if (this.state.conversation)
                                                                        this.filterByConversation(
                                                                            e,
                                                                            this.state.conversation
                                                                        );
                                                                    else {
                                                                        const t =
                                                                                s &&
                                                                                this.isKeywordStale(
                                                                                    this.lastTextSearch
                                                                                ),
                                                                            r = Xt.a.formatTextSearch(e);
                                                                        var n;
                                                                        if (
                                                                            (this.logSearch(
                                                                                `[Search flow] start search-------: ${t}, ${r}`
                                                                            ),
                                                                            !r)
                                                                        )
                                                                            null === (n = this.searchResultList) ||
                                                                                void 0 === n ||
                                                                                n.forceStopSearch(),
                                                                                this.updateState(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, this.state),
                                                                                        {},
                                                                                        {
                                                                                            searchResult: Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    this.state
                                                                                                        .searchResult
                                                                                                ),
                                                                                                {},
                                                                                                {
                                                                                                    messages: null,
                                                                                                    files: [],
                                                                                                    rawFileResult: [],
                                                                                                }
                                                                                            ),
                                                                                        }
                                                                                    )
                                                                                );
                                                                        this._searchGlobal(e, t);
                                                                    }
                                                                }
                                                                _searchGlobal(e, t) {
                                                                    var s,
                                                                        n,
                                                                        r,
                                                                        a,
                                                                        o,
                                                                        l,
                                                                        c = this;
                                                                    void 0 === t && (t = !0),
                                                                        (this.lastTextSearchTs = Date.now()),
                                                                        (this.lastTextSearch = e);
                                                                    let h = 2,
                                                                        u = 0,
                                                                        g = {},
                                                                        m = this.convDataManager.getAllConvSync(),
                                                                        p =
                                                                            this.previewDataManager.getAllPreviewsSync(),
                                                                        f = He.default.simpleStripVietnamese(e, !1);
                                                                    const b = (s, n) => {
                                                                            s !== ts.STEP_DIRECTORY &&
                                                                                s !== ts.STEP_FILES &&
                                                                                h--;
                                                                            let r,
                                                                                a =
                                                                                    1 == h &&
                                                                                    s === ts.STEP_CONTACT &&
                                                                                    0 == u;
                                                                            if (
                                                                                ((r = !!(h > 1 || a)),
                                                                                this.updateState(
                                                                                    Object(i.a)(
                                                                                        Object(i.a)({}, this.state),
                                                                                        {},
                                                                                        {
                                                                                            searchResult: n,
                                                                                            searching: r,
                                                                                        }
                                                                                    )
                                                                                ),
                                                                                s === ts.STEP_CONTACT &&
                                                                                    t &&
                                                                                    (_(),
                                                                                    We.default
                                                                                        .tabbedGlobalSearchResult &&
                                                                                        Kt.b.setMode(Kt.a.SEARCHING),
                                                                                    We.default.enableFileGlobalSearch &&
                                                                                        I()),
                                                                                0 == h && !this.isKeywordStale(e))
                                                                            ) {
                                                                                let e =
                                                                                    Date.now() - this.lastTextSearchTs;
                                                                                e > 2e3
                                                                                    ? this._upSearchDelay()
                                                                                    : e < 600 &&
                                                                                      this._downSearchDelay();
                                                                            }
                                                                        },
                                                                        y = () => !!this.isKeywordStale(e),
                                                                        I = () => {
                                                                            if (
                                                                                We.default.adminConfig &&
                                                                                We.default.adminConfig
                                                                                    .offglobalSearchMessage
                                                                            )
                                                                                return setTimeout(() => {
                                                                                    this.state &&
                                                                                        !this.isKeywordStale(e) &&
                                                                                        b(
                                                                                            ts.STEP_FILES,
                                                                                            this.state.searchResult
                                                                                        );
                                                                                }, 100);
                                                                            const t = (t) => {
                                                                                var s, n, r;
                                                                                if (this.isKeywordStale(e)) return;
                                                                                let a = new Set(),
                                                                                    o = [];
                                                                                var l, c;
                                                                                if (
                                                                                    (t.forEach((e) => {
                                                                                        e.msgId &&
                                                                                            !a.has(e.msgId) &&
                                                                                            (a.add(e.msgId),
                                                                                            o.push(e.msgId));
                                                                                    }),
                                                                                    (null ===
                                                                                        (s = this.state.searchResult) ||
                                                                                    void 0 === s ||
                                                                                    null === (n = s.rawFileResult) ||
                                                                                    void 0 === n
                                                                                        ? void 0
                                                                                        : n.length) >= 20 &&
                                                                                        (null == o
                                                                                            ? void 0
                                                                                            : o.length) >= 20) &&
                                                                                    (null ===
                                                                                        (l = this.state.searchResult) ||
                                                                                    void 0 === l
                                                                                        ? void 0
                                                                                        : l.rawFileResult[0]) == o[0] &&
                                                                                    (null ===
                                                                                        (c = this.state.searchResult) ||
                                                                                    void 0 === c
                                                                                        ? void 0
                                                                                        : c.rawFileResult[19]) == o[19]
                                                                                )
                                                                                    return void this.updateState(
                                                                                        Object(i.a)(
                                                                                            Object(i.a)({}, this.state),
                                                                                            {},
                                                                                            {
                                                                                                searchResult: Object(
                                                                                                    i.a
                                                                                                )(
                                                                                                    Object(i.a)(
                                                                                                        {},
                                                                                                        this.state
                                                                                                            .searchResult
                                                                                                    ),
                                                                                                    {},
                                                                                                    {
                                                                                                        rawFileResult:
                                                                                                            o,
                                                                                                        realFileLen:
                                                                                                            o.length,
                                                                                                    }
                                                                                                ),
                                                                                            }
                                                                                        ),
                                                                                        !1
                                                                                    );
                                                                                const h = o.slice(0, 20);
                                                                                null ===
                                                                                    (r = d.ModuleContainer.resolve(
                                                                                        Vt.a
                                                                                    )) ||
                                                                                    void 0 === r ||
                                                                                    r
                                                                                        .getMultiMedias('file', h)
                                                                                        .then((t) => {
                                                                                            if (this.isKeywordStale(e))
                                                                                                return;
                                                                                            let s = [],
                                                                                                n = 0,
                                                                                                r = 0;
                                                                                            for (const e of t)
                                                                                                e
                                                                                                    ? (s.push(e), n++)
                                                                                                    : r++;
                                                                                            s.sort(
                                                                                                (e, t) =>
                                                                                                    parseInt(
                                                                                                        t.sendDttm
                                                                                                    ) -
                                                                                                    parseInt(e.sendDttm)
                                                                                            );
                                                                                            let a =
                                                                                                this.state.searchResult;
                                                                                            He.default.log(
                                                                                                'search files: cur = ' +
                                                                                                    a.searchKey +
                                                                                                    ' this query = ' +
                                                                                                    e,
                                                                                                s.length
                                                                                            ),
                                                                                                (a = a
                                                                                                    ? Object(i.a)({}, a)
                                                                                                    : {}),
                                                                                                (a.files = s),
                                                                                                (a.realFileLen =
                                                                                                    o.length - r),
                                                                                                (a.rawFileResult = o),
                                                                                                (a.lastFileOffset =
                                                                                                    h.length),
                                                                                                (a.searchKey = e),
                                                                                                (u += n),
                                                                                                b(ts.STEP_FILES, a);
                                                                                        })
                                                                                        .catch((t) => {
                                                                                            He.default.logCoreError(
                                                                                                'doSearchFiles ' + t
                                                                                            ),
                                                                                                this.state &&
                                                                                                    !this.isKeywordStale(
                                                                                                        e
                                                                                                    ) &&
                                                                                                    b(
                                                                                                        ts.STEP_FILES,
                                                                                                        this.state
                                                                                                            .searchResult
                                                                                                    );
                                                                                        });
                                                                            };
                                                                            Wt.a
                                                                                .search(
                                                                                    e,
                                                                                    null,
                                                                                    { msgType: v.MSG_FILE },
                                                                                    t,
                                                                                    { enableReject: !0 }
                                                                                )
                                                                                .then(t)
                                                                                .catch((e) => {
                                                                                    (this.state.searchResult.files &&
                                                                                        this.state.searchResult.files
                                                                                            .length) ||
                                                                                        this.updateState(
                                                                                            Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    this.state
                                                                                                ),
                                                                                                {},
                                                                                                {
                                                                                                    searchResult:
                                                                                                        Object(i.a)(
                                                                                                            Object(i.a)(
                                                                                                                {},
                                                                                                                this
                                                                                                                    .state
                                                                                                                    .searchResult
                                                                                                            ),
                                                                                                            {},
                                                                                                            {
                                                                                                                files: [],
                                                                                                            }
                                                                                                        ),
                                                                                                }
                                                                                            ),
                                                                                            !0
                                                                                        );
                                                                                });
                                                                        },
                                                                        _ = () => {
                                                                            if (
                                                                                We.default.adminConfig &&
                                                                                We.default.adminConfig
                                                                                    .offglobalSearchMessage
                                                                            )
                                                                                return setTimeout(() => {
                                                                                    this.state &&
                                                                                        !this.isKeywordStale(e) &&
                                                                                        b(
                                                                                            ts.STEP_MESSAGES,
                                                                                            this.state.searchResult
                                                                                        );
                                                                                }, 100);
                                                                            this.logSearch(
                                                                                `[Search flow] search msg: ${e}`
                                                                            );
                                                                            Date.now();
                                                                            const t = function (t, n) {
                                                                                var r;
                                                                                if (
                                                                                    (void 0 === n && (n = !1),
                                                                                    c.logSearch(
                                                                                        `[Search flow] search msg res first load: ${e}, ${
                                                                                            null === (r = t.arr) ||
                                                                                            void 0 === r
                                                                                                ? void 0
                                                                                                : r.length
                                                                                        }`
                                                                                    ),
                                                                                    (c.pageLoad = 0),
                                                                                    c.timeouResetDataMsg &&
                                                                                        (clearTimeout(
                                                                                            c.timeouResetDataMsg
                                                                                        ),
                                                                                        (c.timeouResetDataMsg = !1),
                                                                                        c.updateState(
                                                                                            Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    c.state
                                                                                                ),
                                                                                                {},
                                                                                                {
                                                                                                    searchResult:
                                                                                                        Object(i.a)(
                                                                                                            Object(i.a)(
                                                                                                                {},
                                                                                                                c.state
                                                                                                                    .searchResult
                                                                                                            ),
                                                                                                            {},
                                                                                                            {
                                                                                                                messages:
                                                                                                                    null,
                                                                                                            }
                                                                                                        ),
                                                                                                }
                                                                                            ),
                                                                                            !1
                                                                                        )),
                                                                                    !c.isKeywordStale(e) && t)
                                                                                ) {
                                                                                    let r = [],
                                                                                        o = 0;
                                                                                    t &&
                                                                                        t.listConv &&
                                                                                        t.arr &&
                                                                                        m.forEach((e) => {
                                                                                            let s = t.listConv.indexOf(
                                                                                                e.userId
                                                                                            );
                                                                                            if (
                                                                                                s >= 0 &&
                                                                                                !_t.a.isThreadHidden(
                                                                                                    e.userId
                                                                                                )
                                                                                            )
                                                                                                for (
                                                                                                    let i = s;
                                                                                                    i <
                                                                                                    t.listConv.length;
                                                                                                    ++i
                                                                                                )
                                                                                                    t.listConv[i] ==
                                                                                                        e.userId &&
                                                                                                        ((t.arr[
                                                                                                            i
                                                                                                        ].conversation =
                                                                                                            e),
                                                                                                        (o += 1),
                                                                                                        r.push(
                                                                                                            t.arr[i]
                                                                                                        ));
                                                                                        });
                                                                                    let d = c.state.searchResult,
                                                                                        l = r;
                                                                                    var a;
                                                                                    if (
                                                                                        (d.messages &&
                                                                                            ((l = d.messages.slice()),
                                                                                            Array.prototype.push.apply(
                                                                                                l,
                                                                                                r
                                                                                            )),
                                                                                        l.sort(
                                                                                            (e, t) =>
                                                                                                parseInt(
                                                                                                    t.message.sendDttm
                                                                                                ) -
                                                                                                parseInt(
                                                                                                    e.message.sendDttm
                                                                                                )
                                                                                        ),
                                                                                        (d = d
                                                                                            ? Object(i.a)({}, d)
                                                                                            : {}),
                                                                                        (d.messages = l),
                                                                                        (d.searchKey = e),
                                                                                        (u += o),
                                                                                        n)
                                                                                    )
                                                                                        (c.isFirstLoadSuccess = !0),
                                                                                            c.searchResultList &&
                                                                                                s &&
                                                                                                c.searchResultList.updateFirstLoadPos(
                                                                                                    s.timeFrom
                                                                                                ),
                                                                                            He.default.logCoreError(
                                                                                                '[Global search] check First data',
                                                                                                e,
                                                                                                null ===
                                                                                                    (a =
                                                                                                        c.state
                                                                                                            .searchResult
                                                                                                            .messages) ||
                                                                                                    void 0 === a
                                                                                                    ? void 0
                                                                                                    : a.length
                                                                                            );
                                                                                    else if (!r.length) return;
                                                                                    b(ts.STEP_MESSAGES, d);
                                                                                }
                                                                            };
                                                                            this.searchResultList &&
                                                                                (!this.timeouResetDataMsg &&
                                                                                    this.state.searchResult.messages &&
                                                                                    (this.timeouResetDataMsg =
                                                                                        setTimeout(() => {
                                                                                            (this.timeouResetDataMsg =
                                                                                                !1),
                                                                                                this.updateState(
                                                                                                    Object(i.a)(
                                                                                                        Object(i.a)(
                                                                                                            {},
                                                                                                            this.state
                                                                                                        ),
                                                                                                        {},
                                                                                                        {
                                                                                                            searchResult:
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    Object(
                                                                                                                        i.a
                                                                                                                    )(
                                                                                                                        {},
                                                                                                                        this
                                                                                                                            .state
                                                                                                                            .searchResult
                                                                                                                    ),
                                                                                                                    {},
                                                                                                                    {
                                                                                                                        messages:
                                                                                                                            null,
                                                                                                                    }
                                                                                                                ),
                                                                                                        }
                                                                                                    )
                                                                                                ),
                                                                                                this.searchResultList &&
                                                                                                    this.searchResultList.resetDataSearch();
                                                                                        }, 1e3)),
                                                                                this.searchResultList.resetDataSearch());
                                                                            const s = Object(i.a)({}, null);
                                                                            this.updateState(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, this.state),
                                                                                    {},
                                                                                    {
                                                                                        searching: !0,
                                                                                        highlightId: '',
                                                                                        searchResult: Object(i.a)(
                                                                                            Object(i.a)(
                                                                                                {},
                                                                                                this.state.searchResult
                                                                                            ),
                                                                                            {},
                                                                                            {
                                                                                                messages:
                                                                                                    !this
                                                                                                        .lastTextSearch ||
                                                                                                    e.length <
                                                                                                        this
                                                                                                            .lastTextSearch
                                                                                                            .length
                                                                                                        ? null
                                                                                                        : this.state
                                                                                                              .searchResult
                                                                                                              .messages,
                                                                                            }
                                                                                        ),
                                                                                    }
                                                                                )
                                                                            ),
                                                                                (this.loadingMore = !1),
                                                                                (this.isFirstLoadSuccess = !1),
                                                                                Wt.a
                                                                                    .searchGlobalMessagesV3(
                                                                                        e,
                                                                                        () => y(),
                                                                                        void 0,
                                                                                        t,
                                                                                        We.default
                                                                                            .limit_result_msg_search +
                                                                                            1,
                                                                                        null
                                                                                    )
                                                                                    .then((e) => t(e, !0))
                                                                                    .catch((t) => {
                                                                                        if (
                                                                                            (this.logSearch(
                                                                                                `[Search flow] search msg fail: ${t}`
                                                                                            ),
                                                                                            He.default.logCoreError(
                                                                                                'searchGlobalMsg ' + t
                                                                                            ),
                                                                                            this.state &&
                                                                                                !this.isKeywordStale(e))
                                                                                        ) {
                                                                                            this.searchResultList &&
                                                                                                this.searchResultList.forceStopSearch(),
                                                                                                this
                                                                                                    .timeouResetDataMsg &&
                                                                                                    (clearTimeout(
                                                                                                        this
                                                                                                            .timeouResetDataMsg
                                                                                                    ),
                                                                                                    (this.timeouResetDataMsg =
                                                                                                        !1));
                                                                                            let e =
                                                                                                this.state.searchResult;
                                                                                            (e.messages = []),
                                                                                                b(ts.STEP_MESSAGES, e);
                                                                                        }
                                                                                    });
                                                                        };
                                                                    if (
                                                                        (this.curQuery &&
                                                                            0 !== e.indexOf(this.curQuery) &&
                                                                            this._resetCacheResultSearch(),
                                                                        !this.cacheResSearch)
                                                                    ) {
                                                                        const e = (e) => {
                                                                            for (const t of e) {
                                                                                const e = t.userId || t.convId;
                                                                                t &&
                                                                                    !g[e] &&
                                                                                    (t.userId || (t.userId = e),
                                                                                    t.infoSearch && delete t.infoSearch,
                                                                                    t.isDirectory &&
                                                                                        delete t.isDirectory,
                                                                                    (g[e] = t));
                                                                            }
                                                                        };
                                                                        p.length && e(p),
                                                                            e(rt.default.getFriendsSync()),
                                                                            e(jt.default.getGroupsListSync());
                                                                    }
                                                                    qt.a
                                                                        .search(
                                                                            e,
                                                                            this.cacheResSearch
                                                                                ? this.cacheResSearch
                                                                                : g,
                                                                            {
                                                                                hasSection: !0,
                                                                                suggestGroupWithMember: !0,
                                                                                searchFriendInGroup: !0,
                                                                                isCalc: !0,
                                                                                updateLastChat: !this.cacheResSearch,
                                                                                searchPb: !0,
                                                                                searchZName: !0,
                                                                                searchNumPhone: !0,
                                                                                filterHidden: _t.a.isKeyPIN(e),
                                                                            }
                                                                        )
                                                                        .then((t) => {
                                                                            let s = this.state.searchResult;
                                                                            if (!this.isKeywordStale(e)) {
                                                                                {
                                                                                    var n;
                                                                                    let r = [];
                                                                                    if (_t.a.isKeyPIN(e)) {
                                                                                        vt.e.logAction(1970601);
                                                                                        const e =
                                                                                            _t.a.getUidsHiddenChat();
                                                                                        if (e.length)
                                                                                            for (let t of e) {
                                                                                                let e = !1;
                                                                                                for (let s of m)
                                                                                                    if (
                                                                                                        s &&
                                                                                                        s.userId == t
                                                                                                    ) {
                                                                                                        r.push(
                                                                                                            Object(i.a)(
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    {},
                                                                                                                    s
                                                                                                                ),
                                                                                                                {},
                                                                                                                {
                                                                                                                    infoSearch:
                                                                                                                        {},
                                                                                                                }
                                                                                                            )
                                                                                                        ),
                                                                                                            (e = !0);
                                                                                                        break;
                                                                                                    }
                                                                                                if (!e) {
                                                                                                    let e = null;
                                                                                                    (e = t.startsWith(
                                                                                                        v.GROUPID_PREFIX
                                                                                                    )
                                                                                                        ? jt.default.getGroupByIdSync(
                                                                                                              t
                                                                                                          )
                                                                                                        : rt.default.getProfileFriendSync(
                                                                                                              t
                                                                                                          )),
                                                                                                        e &&
                                                                                                            (e.lastMessageTime ||
                                                                                                                (e.lastMessageTime = 0),
                                                                                                            r.push(
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    Object(
                                                                                                                        i.a
                                                                                                                    )(
                                                                                                                        {},
                                                                                                                        e
                                                                                                                    ),
                                                                                                                    {},
                                                                                                                    {
                                                                                                                        infoSearch:
                                                                                                                            {},
                                                                                                                    }
                                                                                                                )
                                                                                                            ));
                                                                                                }
                                                                                            }
                                                                                    }
                                                                                    this.curQuery ||
                                                                                        (this.curQuery = e),
                                                                                        !this.cacheResSearch &&
                                                                                            t.orderAll &&
                                                                                            t.orderAll.constructor ==
                                                                                                Array &&
                                                                                            t.orderAll.length > 0 &&
                                                                                            (this.cacheResSearch = g),
                                                                                        null !== (n = t.phone) &&
                                                                                            void 0 !== n &&
                                                                                            n.length &&
                                                                                            (t.phone = t.phone.filter(
                                                                                                (e) => e.userId
                                                                                            )),
                                                                                        (s = s
                                                                                            ? Object(i.a)({}, s)
                                                                                            : {}),
                                                                                        (s.recentChat = t.recentChat),
                                                                                        (s.groups = t.groups),
                                                                                        (s.friends = t.friends),
                                                                                        (s.oa = t.oa),
                                                                                        (s.directory = t.directory),
                                                                                        (s.searchKey = e),
                                                                                        (s.phone = t.phone),
                                                                                        (s.hiddenChat = r),
                                                                                        (s.all = t.all),
                                                                                        (s.orderAll = t.orderAll),
                                                                                        (u +=
                                                                                            (s.groups
                                                                                                ? s.groups.length
                                                                                                : 0) +
                                                                                            (s.friends
                                                                                                ? s.friends.length
                                                                                                : 0) +
                                                                                            (s.oa ? s.oa.length : 0)),
                                                                                        (u +=
                                                                                            (s.recentChat
                                                                                                ? s.recentChat.length
                                                                                                : 0) +
                                                                                            s.hiddenChat.length);
                                                                                }
                                                                                b(ts.STEP_CONTACT, s);
                                                                            }
                                                                        })
                                                                        .catch((e) => {
                                                                            He.default.logCoreError(e);
                                                                        }),
                                                                        0 ==
                                                                            (null === (s = this.state.searchResult) ||
                                                                            void 0 === s ||
                                                                            null === (n = s.messages) ||
                                                                            void 0 === n
                                                                                ? void 0
                                                                                : n.length) &&
                                                                            0 ==
                                                                                (null ===
                                                                                    (r = this.state.searchResult) ||
                                                                                void 0 === r ||
                                                                                null === (a = r.all) ||
                                                                                void 0 === a
                                                                                    ? void 0
                                                                                    : a.length) &&
                                                                            0 ==
                                                                                (null ===
                                                                                    (o = this.state.searchResult) ||
                                                                                void 0 === o ||
                                                                                null === (l = o.files) ||
                                                                                void 0 === l
                                                                                    ? void 0
                                                                                    : l.length) &&
                                                                            vt.e.logAction(1232201),
                                                                        f === e ||
                                                                            this.trackSearchVietnamese ||
                                                                            ((this.trackSearchVietnamese = !0),
                                                                            vt.e.logAction(1232010));
                                                                }
                                                                filterByConversation(e, t) {
                                                                    var s = this;
                                                                    if (!e)
                                                                        return (
                                                                            (this.searchInput.value = ''),
                                                                            void this.updateState(
                                                                                Object(i.a)(
                                                                                    Object(i.a)({}, Yt),
                                                                                    {},
                                                                                    {
                                                                                        conversation: t,
                                                                                        searching: !1,
                                                                                        highlightId: '',
                                                                                    }
                                                                                )
                                                                            )
                                                                        );
                                                                    let n = function (n, r) {
                                                                        void 0 === r && (r = !1),
                                                                            s.isKeywordStale(e)
                                                                                ? He.default.logCoreError(
                                                                                      'search: abort filtermode 1',
                                                                                      s.state.searchText,
                                                                                      e
                                                                                  )
                                                                                : (!r || (n && 0 != n.length)) &&
                                                                                  Wt.a
                                                                                      .getMessageOfConversation(
                                                                                          n,
                                                                                          t.userId,
                                                                                          20
                                                                                      )
                                                                                      .then((a) => {
                                                                                          if (s.isKeywordStale(e))
                                                                                              return void He.default.logCoreError(
                                                                                                  'search: abort filtermode 2',
                                                                                                  s.state.searchText,
                                                                                                  e
                                                                                              );
                                                                                          let o = a.list;
                                                                                          if (
                                                                                              r &&
                                                                                              (!o || 0 === o.length)
                                                                                          )
                                                                                              return;
                                                                                          let d =
                                                                                              o.length < 20 &&
                                                                                              n.length > 20;
                                                                                          o.length > 0
                                                                                              ? (s.updateState(
                                                                                                    Object(i.a)(
                                                                                                        Object(i.a)(
                                                                                                            {},
                                                                                                            s.state
                                                                                                        ),
                                                                                                        {},
                                                                                                        {
                                                                                                            conversation:
                                                                                                                t,
                                                                                                            searchResult:
                                                                                                                {
                                                                                                                    messageList:
                                                                                                                        o.map(
                                                                                                                            (
                                                                                                                                e
                                                                                                                            ) => ({
                                                                                                                                message:
                                                                                                                                    e,
                                                                                                                                conversation:
                                                                                                                                    t,
                                                                                                                            })
                                                                                                                        ),
                                                                                                                    realLen:
                                                                                                                        a.len,
                                                                                                                    rawSearchResult:
                                                                                                                        n,
                                                                                                                    lastOffset: 20,
                                                                                                                    progress:
                                                                                                                        r,
                                                                                                                },
                                                                                                            searching:
                                                                                                                !1,
                                                                                                            highlightId:
                                                                                                                o[0]
                                                                                                                    .msgId,
                                                                                                        }
                                                                                                    )
                                                                                                ),
                                                                                                r ||
                                                                                                    (s.focusSearchBox(),
                                                                                                    d &&
                                                                                                        s.loadMoreMessages()),
                                                                                                !r &&
                                                                                                    s.searchResultList &&
                                                                                                    s.searchResultList
                                                                                                        .scrollToTop &&
                                                                                                    s.searchResultList.scrollToTop())
                                                                                              : (s.updateState(
                                                                                                    Object(i.a)(
                                                                                                        Object(i.a)(
                                                                                                            {},
                                                                                                            s.state
                                                                                                        ),
                                                                                                        {},
                                                                                                        {
                                                                                                            conversation:
                                                                                                                t,
                                                                                                            searchResult:
                                                                                                                {
                                                                                                                    messageList:
                                                                                                                        [],
                                                                                                                    realLen: 0,
                                                                                                                    lastOffset: 0,
                                                                                                                    progress:
                                                                                                                        !1,
                                                                                                                },
                                                                                                            searching:
                                                                                                                !1,
                                                                                                            highlightId:
                                                                                                                '',
                                                                                                        }
                                                                                                    )
                                                                                                ),
                                                                                                s.focusSearchBox(),
                                                                                                !r &&
                                                                                                    d &&
                                                                                                    s.loadMoreMessages());
                                                                                      });
                                                                    };
                                                                    Wt.a
                                                                        .search(
                                                                            e,
                                                                            null,
                                                                            { convId: t.userId + '' },
                                                                            (e) => {
                                                                                n(e, !0);
                                                                            }
                                                                        )
                                                                        .then((e) => {
                                                                            n(e);
                                                                        });
                                                                }
                                                                _getSearchDelaySetting() {
                                                                    return 70;
                                                                }
                                                                _upSearchDelay() {
                                                                    let e = this.searchDelay;
                                                                    (this.searchDelay = Math.min(
                                                                        400,
                                                                        Math.round(
                                                                            1.1 * this.searchDelay + 10 * Math.random()
                                                                        )
                                                                    )),
                                                                        e !== this.searchDelay &&
                                                                            this._resetSearchFunction();
                                                                }
                                                                _downSearchDelay() {
                                                                    let e = this.searchDelay;
                                                                    (this.searchDelay = Math.max(
                                                                        70,
                                                                        Math.round(
                                                                            0.9 * this.searchDelay + 10 * Math.random()
                                                                        )
                                                                    )),
                                                                        e !== this.searchDelay &&
                                                                            this._resetSearchFunction();
                                                                }
                                                                _resetSearchFunction() {
                                                                    He.default.logCoreError(
                                                                        '__rssf__',
                                                                        this.searchDelay
                                                                    ),
                                                                        (this.functionSearchByName =
                                                                            He.default.throttle(
                                                                                this._innerSearchFunc,
                                                                                this.searchDelay
                                                                            ));
                                                                }
                                                                _isSelectAllSearchText() {
                                                                    if (this.searchInput) {
                                                                        const e = this.searchInput.selectionStart,
                                                                            t = this.searchInput.selectionEnd;
                                                                        return !(
                                                                            !this.searchInput.value.length ||
                                                                            0 != e ||
                                                                            t != this.searchInput.value.length
                                                                        );
                                                                    }
                                                                    return !1;
                                                                }
                                                                init() {}
                                                                getItem(e) {
                                                                    return this.state;
                                                                }
                                                                getList(e) {
                                                                    throw new Error('No imp!!!');
                                                                }
                                                                onGetItemFailure(e) {}
                                                                onGetListFailure(e) {}
                                                                loadOldestTime() {
                                                                    Wt.a
                                                                        .getOldestTime()
                                                                        .then((e) => {
                                                                            null != e && e.length && e[0].ts
                                                                                ? (this.oldestTime = parseFloat(
                                                                                      e[0].ts
                                                                                  ))
                                                                                : (this.oldestTime = 0);
                                                                        })
                                                                        .catch((e) => {
                                                                            this.oldestTime = 0;
                                                                        });
                                                                }
                                                                getOldestTime() {
                                                                    return this.oldestTime;
                                                                }
                                                            })
                                                        ) || zt)
                                                ) || zt)
                                        ) || zt)
                                ) || zt)
                        ) || zt)
                );
                var ss,
                    is = s('OlUt'),
                    ns = s('jnrz'),
                    rs = s('Anfm'),
                    as = s('BZLJ'),
                    os = s('L+5E'),
                    ds = s('A9FD'),
                    ls = s('BKm0'),
                    cs = s('iKSP');
                const hs = {
                        windowId: Mt.c,
                        theme: is.a.default,
                        currentTab: ft.SidebarTab.MESSAGE_TAB,
                        previousTab: ft.SidebarTab.MESSAGE_TAB,
                        selectedId: null,
                        previousId: null,
                        showExportImportEntry: !0,
                    },
                    us = 'z_sendtome_bubbledot',
                    gs = 'SIDEBAR CONTROLLER';
                function ms() {
                    for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                    He.default.logCoreInfo(`[${gs}] - `, t);
                }
                Object(L.h)()(
                    (ss =
                        Object(pt.b)(ft.SidebarController)(
                            (ss =
                                (function (e, t) {
                                    return d.ModuleContainer.inject(ft.ConvListController)(e, void 0, 0);
                                })(
                                    (ss =
                                        (function (e, t) {
                                            return d.ModuleContainer.inject(Jt.b)(e, void 0, 1);
                                        })(
                                            (ss =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (ss =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === ft.ConvListController
                                                                ? Object
                                                                : ft.ConvListController,
                                                            void 0 === Jt.b ? Object : Jt.b,
                                                        ])(
                                                            (ss = class {
                                                                constructor(e, t) {
                                                                    var s = this;
                                                                    (this.convListController = e),
                                                                        (this.searchController = t),
                                                                        (this.changeTabFromSearch = void 0),
                                                                        (this._firstTimePageLoad = void 0),
                                                                        (this._querySelect = void 0),
                                                                        (this._convsLoaded = void 0),
                                                                        (this._exportImportFinished = void 0),
                                                                        (this._exportImportProgressError = void 0),
                                                                        (this._allowAutoJumpFC = void 0),
                                                                        (this._es = void 0),
                                                                        (this._onSendMsg = (e) => {
                                                                            var t, s;
                                                                            const i =
                                                                                    (null == e ||
                                                                                    null === (t = e.messages) ||
                                                                                    void 0 === t ||
                                                                                    null === (s = t[0]) ||
                                                                                    void 0 === s
                                                                                        ? void 0
                                                                                        : s.upSrc) &
                                                                                    v.FILE_UP_SRC.TextEditor,
                                                                                n = this.getState();
                                                                            if (
                                                                                n.currentTab ==
                                                                                    ft.SidebarTab.TODO_TAB ||
                                                                                n.currentTab ==
                                                                                    ft.SidebarTab.CATALOG_TAB ||
                                                                                i ||
                                                                                e.isChild
                                                                            )
                                                                                return;
                                                                            const r =
                                                                                this.searchController.getSearchState();
                                                                            n.currentTab !==
                                                                                ft.SidebarTab.MESSAGE_TAB ||
                                                                            (r && r.searchText)
                                                                                ? ((n.currentTab =
                                                                                      ft.SidebarTab.MESSAGE_TAB),
                                                                                  Object(Pe.g)(this.name, Mt.c),
                                                                                  Object(Te.f)({
                                                                                      type: Ze.SideBarActions
                                                                                          .SHOW_CHAT_VIEW,
                                                                                  }),
                                                                                  r &&
                                                                                      r.searchText &&
                                                                                      vt.e.logAction(1232007),
                                                                                  this.searchController.clearSearch(!0))
                                                                                : n.currentTab ==
                                                                                      ft.SidebarTab.MESSAGE_TAB &&
                                                                                  this.searchController.setRecentSearchFocusState(
                                                                                      !1,
                                                                                      !1,
                                                                                      !0
                                                                                  ),
                                                                                (this.searchController.closeBySendingMsg =
                                                                                    !0),
                                                                                setTimeout(() => {
                                                                                    this.convListController.scrollToTop(
                                                                                        !1
                                                                                    );
                                                                                }, 100);
                                                                        }),
                                                                        (this.changeTab = function (e, t) {
                                                                            void 0 === t && (t = Mt.c);
                                                                            const i = s._getStateByWindowId(t);
                                                                            i.currentTab !== e &&
                                                                                ((i.currentTab = e),
                                                                                Object(Pe.g)(s.name, t)),
                                                                                s._onChangeTab(i.currentTab);
                                                                        }),
                                                                        (this.togglePerfTab = (e) => {
                                                                            const t = this._getStateByWindowId(Mt.c);
                                                                            t.showPerfTab !== e &&
                                                                                ((t.showPerfTab = e),
                                                                                Object(Pe.g)(this.name, Mt.c));
                                                                        }),
                                                                        (this.changeTheme = async (e) => {
                                                                            const t = this._getStateByWindowId(Mt.c);
                                                                            t.theme !== e &&
                                                                                ((t.theme = e),
                                                                                Object(Pe.g)(this.name, Mt.c));
                                                                        }),
                                                                        (this.selectMessageTab = () => {
                                                                            this.changeTab(ft.SidebarTab.MESSAGE_TAB);
                                                                        }),
                                                                        (this.selectTodoTab = () => {
                                                                            this.changeTab(ft.SidebarTab.TODO_TAB),
                                                                                vt.e.logAction(171),
                                                                                as.h.setViewPopupTodoSrc(as.c.TAB_ICON);
                                                                        }),
                                                                        (this.selectContactFromSearch = async function (
                                                                            e,
                                                                            t
                                                                        ) {
                                                                            if ((void 0 === t && (t = !1), !e))
                                                                                return (
                                                                                    ms('Select friend null!'),
                                                                                    Promise.resolve(!1)
                                                                                );
                                                                            const i = await d.ModuleContainer.resolve(
                                                                                Nt.b
                                                                            ).openConversation(
                                                                                e.userId,
                                                                                Nt.c.fromSearchList(e)
                                                                            );
                                                                            return (
                                                                                !0 === t
                                                                                    ? (s.searchController.onCloseSearch(),
                                                                                      s.searchController.resetState())
                                                                                    : s.searchController.updateStateOf(
                                                                                          'highlightId',
                                                                                          e.userId
                                                                                      ),
                                                                                i
                                                                                    ? (e &&
                                                                                          e.userId ===
                                                                                              We.default.sendToMeId &&
                                                                                          (St.g.getFlagForCurrentUser(
                                                                                              s.currUser.userId,
                                                                                              us
                                                                                          ) ||
                                                                                              (wt.p.getHasShownSendToMeTip()
                                                                                                  ? St.g.setFlagForCurrentUser(
                                                                                                        s.currUser
                                                                                                            .userId,
                                                                                                        us,
                                                                                                        1
                                                                                                    )
                                                                                                  : setTimeout(() => {
                                                                                                        Je.default.send(
                                                                                                            Ze
                                                                                                                .ConversationListActions
                                                                                                                .SHOW_BUBBLE_DOT
                                                                                                        ),
                                                                                                            wt.p.setHasShownSendToMeTip(
                                                                                                                !0
                                                                                                            );
                                                                                                    }, 144e5)),
                                                                                          vt.e.logAction(1390101)),
                                                                                      Promise.resolve(!0))
                                                                                    : (ms('Open conv failure'),
                                                                                      Promise.resolve(!1))
                                                                            );
                                                                        }),
                                                                        (this.setupSelectConvOnPageLoad = () => {
                                                                            if (!this._firstTimePageLoad) return;
                                                                            let e = this._getQueryParams();
                                                                            if (e.c) {
                                                                                He.default.logCoreInfo(
                                                                                    `[${this.name}] - setup select conv c`
                                                                                );
                                                                                const t = (e) => {
                                                                                        const t = { [e]: !0 };
                                                                                        (this._querySelect = () => {
                                                                                            let s;
                                                                                            (s = e.startsWith(
                                                                                                v.GROUPID_PREFIX
                                                                                            )
                                                                                                ? qe.default.fetchGroupsIfNotExpire(
                                                                                                      t
                                                                                                  )
                                                                                                : qe.default.fetchFriendsIfNotExist(
                                                                                                      t
                                                                                                  )),
                                                                                                s
                                                                                                    .then((t) => {
                                                                                                        t && t[e]
                                                                                                            ? this.selectContactFromSearch(
                                                                                                                  t[e]
                                                                                                              )
                                                                                                            : He.default.logCoreInfo(
                                                                                                                  `[${this.name}] - auto open conv with id ${e} does not exist`
                                                                                                              );
                                                                                                    })
                                                                                                    .catch((e) => {
                                                                                                        He.default.logCoreError(
                                                                                                            e
                                                                                                        );
                                                                                                    });
                                                                                        }),
                                                                                            this._autoSelectConv();
                                                                                    },
                                                                                    s = e.c;
                                                                                e.convert
                                                                                    ? qe.default
                                                                                          .convertOAIds([s])
                                                                                          .then((e) => {
                                                                                              e && e[s] && t(e[s]);
                                                                                          })
                                                                                    : t(s),
                                                                                    (this._firstTimePageLoad = !1);
                                                                            } else if (e.g)
                                                                                He.default.logCoreInfo(
                                                                                    `[${this.name}] - setup select conv g`
                                                                                ),
                                                                                    os.a.autoSelectGroupByLink(
                                                                                        `https://${We.default.CONFIG_DOMAIN}/g/` +
                                                                                            encodeURIComponent(e.g)
                                                                                    );
                                                                            else if (e.zs);
                                                                            else if (e.phone) {
                                                                                let t = e.phone,
                                                                                    s = e.openConv;
                                                                                !t ||
                                                                                    isNaN(t) ||
                                                                                    this._querySelect ||
                                                                                    (He.default.logCoreInfo(
                                                                                        `[${this.name}] - setup select conv p`
                                                                                    ),
                                                                                    (this._querySelect = () => {
                                                                                        s
                                                                                            ? os.a.autoOpenConversationByPhone(
                                                                                                  t,
                                                                                                  Te.e
                                                                                              )
                                                                                            : os.a.autoSelectConversationByPhone(
                                                                                                  t,
                                                                                                  Te.e
                                                                                              );
                                                                                    }),
                                                                                    this._autoSelectConv());
                                                                            } else if (e.alias) {
                                                                                He.default.logCoreInfo(
                                                                                    `[${this.name}] - setup select conv a`
                                                                                );
                                                                                let t = e.alias;
                                                                                this._querySelect ||
                                                                                    ((this._querySelect = () => {
                                                                                        os.a.autoSelectConversationByAlias(
                                                                                            t,
                                                                                            Te.e
                                                                                        );
                                                                                    }),
                                                                                    this._autoSelectConv());
                                                                            }
                                                                        }),
                                                                        (this.name = ft.SIDEBAR_CONTROLLER),
                                                                        (this.data = new Map()),
                                                                        (this.key = 'windowId'),
                                                                        (this.changeTabFromSearch = !1),
                                                                        (this._firstTimePageLoad = !0),
                                                                        (this._convsLoaded = !1),
                                                                        (this._allowAutoJumpFC = !1),
                                                                        (this.selectConversationForFriend =
                                                                            this.selectConversationForFriend.bind(
                                                                                this
                                                                            )),
                                                                        this.listenEvents();
                                                                }
                                                                get currUser() {
                                                                    return Object(Lt.c)();
                                                                }
                                                                get autoJumFC() {
                                                                    return this._allowAutoJumpFC;
                                                                }
                                                                get eventStore() {
                                                                    return (
                                                                        this._es || (this._es = s('emRR').default),
                                                                        this._es
                                                                    );
                                                                }
                                                                onStart(e) {
                                                                    d.ModuleContainer.resolve(Nt.b);
                                                                }
                                                                listenEvents() {
                                                                    Je.default.subscribe((e, t) => {
                                                                        switch (e) {
                                                                            case Ze.ChatBoxActions.SEND_MSG:
                                                                                this._onSendMsg(t);
                                                                                break;
                                                                            case Ze.ChatBoxActions.SELECT_FRIEND:
                                                                                this.selectConversationForFriend(t);
                                                                                break;
                                                                            case Ze.SideBarActions.SHOW_FILE_MANAGER:
                                                                                (this.getState().currentTab =
                                                                                    ft.SidebarTab.FILE_TAB),
                                                                                    Object(Pe.g)(this.name, Mt.c);
                                                                                break;
                                                                            case Ze.SideBarActions.SELECT_TAB_MSG:
                                                                                this.changeTab(
                                                                                    ft.SidebarTab.MESSAGE_TAB
                                                                                );
                                                                                break;
                                                                            case Ze.SideBarActions.SELECT_ZAVI_TAB:
                                                                                this.changeTab(ft.SidebarTab.ZAVI_TAB);
                                                                                break;
                                                                            case Ze.FetchActions.DELETE_CONVERSATION:
                                                                            case Ze.FetchActions.GROUP_LEAVE: {
                                                                                const e = this.getState();
                                                                                e.previousId &&
                                                                                    t === e.previousId &&
                                                                                    (e.previousId = null);
                                                                                break;
                                                                            }
                                                                            case Ze.ChatBoxActions
                                                                                .JUMP_TO_MESSAGE_SEARCH_HIDDEN_CHAT:
                                                                            case Ze.ChatBoxActions
                                                                                .JUMP_TO_MESSAGE_SEARCH:
                                                                                this.getState().currentTab ==
                                                                                    ft.SidebarTab.FILE_TAB &&
                                                                                    this.changeTab(
                                                                                        ft.SidebarTab.MESSAGE_TAB
                                                                                    );
                                                                                break;
                                                                            case Ze.TodoActions.OPEN_TODO_LIST: {
                                                                                const e = Pt.b.instance().getTodoView();
                                                                                e
                                                                                    ? e.onCheckOpenTab()
                                                                                    : this.changeTab(
                                                                                          ft.SidebarTab.TODO_TAB
                                                                                      );
                                                                                break;
                                                                            }
                                                                            case Ze.ActionList.ACT_OPEN_TAB_CHAT:
                                                                                this.selectMessageTab();
                                                                                break;
                                                                            case Ze.ActionList.ACT_OPEN_TAB_CONTACT:
                                                                                this.changeTab(
                                                                                    ft.SidebarTab.CONTACT_TAB
                                                                                );
                                                                                break;
                                                                            case Ze.ActionList.ACT_OPEN_GROUPLIST:
                                                                                if (
                                                                                    this.getState().currentTab ===
                                                                                    ft.SidebarTab.CONTACT_TAB
                                                                                ) {
                                                                                    const e = Pt.b
                                                                                        .instance()
                                                                                        .getContactList();
                                                                                    e && e.onJumpGroupCenter();
                                                                                } else
                                                                                    this.changeTab(
                                                                                        ft.SidebarTab.CONTACT_TAB
                                                                                    );
                                                                                break;
                                                                            case ls.b.EXPORT_IMPORT_START:
                                                                                (this._exportImportFinished = !1),
                                                                                    (this._exportImportProgressError =
                                                                                        !1);
                                                                                break;
                                                                            case ls.b.EXPORT_IMPORT_FINISHED:
                                                                                (this._exportImportFinished = !0),
                                                                                    (this._exportImportProgressError =
                                                                                        !1);
                                                                                break;
                                                                            case ls.b.IMPORT_DB_PROGRESS:
                                                                            case ls.b.IMPORT_PROGRESS:
                                                                            case ls.b.EXPORT_PROGRESS:
                                                                            case ls.b.EXPORT_DB_PROGRESS:
                                                                                t &&
                                                                                    t.error &&
                                                                                    (this._exportImportProgressError =
                                                                                        !0);
                                                                                break;
                                                                            case Ze.ConversationListActions
                                                                                .SELECT_CONVERSATION: {
                                                                                const e = this.getState();
                                                                                (e.currentTab !==
                                                                                    ft.SidebarTab.FILE_TAB &&
                                                                                    e.currentTab !==
                                                                                        ft.SidebarTab.ZAVI_TAB &&
                                                                                    e.currentTab !==
                                                                                        ft.SidebarTab.CATALOG_TAB) ||
                                                                                    this.changeTab(
                                                                                        ft.SidebarTab.MESSAGE_TAB
                                                                                    );
                                                                                break;
                                                                            }
                                                                        }
                                                                    }),
                                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                                            It.b.DoneLoadDB,
                                                                            (e) => {
                                                                                (this._convsLoaded = !0),
                                                                                    this._autoSelectConv();
                                                                            }
                                                                        ),
                                                                        ot.a.UnreadDataManager.addEventListener(
                                                                            It.b.DoneLoadDB,
                                                                            (e) => {
                                                                                ns.b.onDoneLoadUnreadDB(
                                                                                    null == e ? void 0 : e.payload
                                                                                );
                                                                            }
                                                                        );
                                                                }
                                                                getState(e) {
                                                                    return (
                                                                        void 0 === e && (e = Mt.c),
                                                                        this._getStateByWindowId(e)
                                                                    );
                                                                }
                                                                getSelectedId(e) {
                                                                    return this.getState(e).selectedId || null;
                                                                }
                                                                getCurrMainConvId() {
                                                                    const e = this.eventStore.getState();
                                                                    return e && e.chatview.view === cs.c.CHAT_VIEW
                                                                        ? this.getSelectedId()
                                                                        : null;
                                                                }
                                                                updateSelectedId(e, t) {
                                                                    void 0 === t && (t = Mt.c);
                                                                    const s = this._getStateByWindowId(t);
                                                                    s.selectedId !== e &&
                                                                        ((s.previousId = e ? null : s.selectedId),
                                                                        (s.selectedId = e),
                                                                        Object(Pe.g)(this.name, t));
                                                                }
                                                                isInImportExportProcess() {
                                                                    const e =
                                                                        this._exportImportFinished ||
                                                                        this._exportImportProgressError;
                                                                    return void 0 !== e && !e;
                                                                }
                                                                openFriendCenter() {}
                                                                selectConversationForFriend(e, t) {
                                                                    if ((void 0 === t && (t = !1), !e))
                                                                        return void He.default.logCoreError(
                                                                            'friend null'
                                                                        );
                                                                    if (
                                                                        (Te.f &&
                                                                            (Object(Te.f)({
                                                                                type: Ze.ConversationListActions
                                                                                    .SELECT_CONV_MINOR,
                                                                                payload: e,
                                                                            }),
                                                                            Object(Te.f)({
                                                                                type: Ze.ChatBoxActions
                                                                                    .READ_CONVERSATION,
                                                                                payload: { conversationId: e.userId },
                                                                            })),
                                                                        e.userId == this.currUser.userId)
                                                                    )
                                                                        return void this._showMyProfile();
                                                                    let s =
                                                                            this.convListController.getRecentContactWithId(
                                                                                e.userId
                                                                            ),
                                                                        n = !1;
                                                                    if (s) n = !0;
                                                                    else {
                                                                        let t = (t) => {
                                                                            t &&
                                                                                t.includes(e.userId) &&
                                                                                (s = Object(i.a)({}, t[e.userId]));
                                                                        };
                                                                        s || t(jt.default.getGroupsListSync()),
                                                                            s || t(rt.default.getFriendsSync()),
                                                                            s || (s = {}),
                                                                            Object.assign(s, e),
                                                                            (s.isFr = s.isFr || 0),
                                                                            (s.type = s.type || v.FRIEND_TYPE_NORMAL);
                                                                    }
                                                                    e.byPassPIN
                                                                        ? (s.byPassPIN = 1)
                                                                        : s.byPassPIN && delete s.byPassPIN,
                                                                        setTimeout(() => {
                                                                            Object(Te.f)({
                                                                                type: Ze.ConversationListActions
                                                                                    .SELECT_CONVERSATION,
                                                                                payload: s,
                                                                            });
                                                                        }, 0);
                                                                    const r = this.data.get(Mt.c);
                                                                    let a = null == r ? void 0 : r.currentTab;
                                                                    !0 === t
                                                                        ? ((a = n
                                                                              ? ft.SidebarTab.MESSAGE_TAB
                                                                              : ft.SidebarTab.CONTACT_TAB),
                                                                          a === ft.SidebarTab.CONTACT_TAB &&
                                                                              (He.default.log(
                                                                                  'sidebar: select from search, should highlight thread'
                                                                              ),
                                                                              (this.changeTabFromSearch = !0)),
                                                                          this.searchController.onCloseSearch(),
                                                                          this.searchController.resetState(),
                                                                          !e.userId ||
                                                                              (!e.byPassPIN &&
                                                                                  _t.a.isThreadHidden(e.userId)) ||
                                                                              setTimeout(() => {
                                                                                  Je.default.send(
                                                                                      Ze.ChatBoxActions.FOCUS_INPUT,
                                                                                      {
                                                                                          userId: e.userId,
                                                                                          windowId: Mt.c,
                                                                                      }
                                                                                  );
                                                                              }, 0))
                                                                        : this.searchController.updateStateOf(
                                                                              'highlightId',
                                                                              e.userId
                                                                          ),
                                                                        this.updateState(
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, r),
                                                                                {},
                                                                                { currentTab: a, selectedId: e.userId }
                                                                            )
                                                                        ),
                                                                        e &&
                                                                            e.userId === We.default.sendToMeId &&
                                                                            (St.g.getFlagForCurrentUser(
                                                                                this.currUser.userId,
                                                                                us
                                                                            ) ||
                                                                                (wt.p.getHasShownSendToMeTip()
                                                                                    ? St.g.setFlagForCurrentUser(
                                                                                          this.currUser.userId,
                                                                                          us,
                                                                                          1
                                                                                      )
                                                                                    : setTimeout(() => {
                                                                                          Je.default.send(
                                                                                              Ze.ConversationListActions
                                                                                                  .SHOW_BUBBLE_DOT
                                                                                          ),
                                                                                              wt.p.setHasShownSendToMeTip(
                                                                                                  !0
                                                                                              );
                                                                                      }, 144e5)));
                                                                }
                                                                showAddFriendModal() {
                                                                    vt.e.logAction(1020203),
                                                                        vt.e.logAction(12316),
                                                                        Tt.ModalManagerV2.openModal({
                                                                            windowId: Mt.c,
                                                                            name: v.ModalIdentitiesDefine.FIND_FRIEND,
                                                                        });
                                                                }
                                                                showGroupCompose() {
                                                                    vt.e.logAction(1020202),
                                                                        rs.c.markStart(
                                                                            rs.a.CREATE_GROUP,
                                                                            rs.b.Group.CREATE_GR_HEADER_ICON
                                                                        );
                                                                    const e = wt.p.getSessionUserId(),
                                                                        t = function (e) {
                                                                            void 0 === e && (e = !0),
                                                                                Tt.ModalManagerV2.openModal({
                                                                                    windowId: Mt.c,
                                                                                    name: v.ModalIdentitiesDefine
                                                                                        .CREATE_GROUP_COMPOSE,
                                                                                    params: { needInitE2ee: e },
                                                                                    forceCloseAll: !1,
                                                                                });
                                                                        };
                                                                    !St.g.getTimeEntryPointE2eGroup(
                                                                        e,
                                                                        rs.b.Group.CREATE_GR_HEADER_ICON
                                                                    ) &&
                                                                    We.default.e2ee.enable_group &&
                                                                    We.default.e2ee.group
                                                                        .can_enable_right_in_creation_step
                                                                        ? Tt.ModalManagerV2.openModal({
                                                                              windowId: Mt.c,
                                                                              name: v.ModalIdentitiesDefine
                                                                                  .E2EE_ONBOARDING,
                                                                              params: {
                                                                                  entry: ds.e.CREATE_GROUP,
                                                                                  entrySrc:
                                                                                      rs.b.Group.CREATE_GR_HEADER_ICON,
                                                                                  isGroup: !0,
                                                                                  userId: '',
                                                                                  callback: t,
                                                                                  callbackCancel: t,
                                                                              },
                                                                              forceCloseAll: !1,
                                                                          })
                                                                        : t(!1);
                                                                }
                                                                enableAutoJupmFC() {
                                                                    this._allowAutoJumpFC = !0;
                                                                }
                                                                disableAutoJupmFC() {
                                                                    this._allowAutoJumpFC = !1;
                                                                }
                                                                init() {}
                                                                getItem(e) {
                                                                    const t = e.key;
                                                                    return this._getStateByWindowId(t);
                                                                }
                                                                getList(e) {
                                                                    return Array.from(this.data.keys());
                                                                }
                                                                onGetItemFailure(e) {}
                                                                onGetListFailure(e) {}
                                                                updateState(e, t, s) {
                                                                    void 0 === t && (t = Mt.c),
                                                                        void 0 === s && (s = !0),
                                                                        this.data.set(t, e),
                                                                        s && Object(Pe.g)(this.name, t);
                                                                }
                                                                _getStateByWindowId(e) {
                                                                    let t = this.data.get(e);
                                                                    return (
                                                                        t ||
                                                                            ((t = Object(i.a)({}, hs)),
                                                                            this.data.set(e, t)),
                                                                        t
                                                                    );
                                                                }
                                                                _onChangeTab(e) {
                                                                    switch (
                                                                        ((function () {
                                                                            switch (e) {
                                                                                case ft.SidebarTab.MESSAGE_TAB:
                                                                                    vt.e.logAction(12801);
                                                                                    break;
                                                                                case ft.SidebarTab.CONTACT_TAB:
                                                                                    vt.e.logAction(12802),
                                                                                        3 ===
                                                                                            We.default
                                                                                                .noti_center_config
                                                                                                .entry_position &&
                                                                                            vt.e.logAction(1281205);
                                                                                    break;
                                                                                case ft.SidebarTab.MENTION_TAB:
                                                                                    vt.e.logAction(12805);
                                                                                    break;
                                                                                case ft.SidebarTab.STAR_TAB:
                                                                                    vt.e.logAction(12806);
                                                                                    break;
                                                                                case ft.SidebarTab.FILE_TAB:
                                                                                    vt.e.logAction(133);
                                                                                    break;
                                                                                case ft.SidebarTab.TODO_TAB:
                                                                                    3 ===
                                                                                        We.default.noti_center_config
                                                                                            .entry_position &&
                                                                                        vt.e.logAction(1281206);
                                                                                    break;
                                                                                case ft.SidebarTab.ZAVI_TAB:
                                                                                    vt.e.logAction(20701);
                                                                            }
                                                                        })(),
                                                                        wt.p.resetGlobalSearchMode(),
                                                                        this.searchController.clearSearch(!0),
                                                                        e)
                                                                    ) {
                                                                        case ft.SidebarTab.MESSAGE_TAB: {
                                                                            this._resetConversationList();
                                                                            const e = this.getState();
                                                                            !e.selectedId &&
                                                                                e.previousId &&
                                                                                this.updateSelectedId(e.previousId),
                                                                                Object(Te.f)({
                                                                                    type: Ze.SideBarActions
                                                                                        .SHOW_CHAT_VIEW,
                                                                                });
                                                                            break;
                                                                        }
                                                                        case ft.SidebarTab.ZAVI_TAB:
                                                                            Object(Te.f)({
                                                                                type: Ze.SideBarActions.SELECT_ZAVI,
                                                                            });
                                                                        case ft.SidebarTab.TODO_TAB:
                                                                    }
                                                                }
                                                                _showMyProfile() {
                                                                    Tt.ModalManagerV2.openModal({
                                                                        windowId: Mt.c,
                                                                        name: v.ModalIdentitiesDefine.FRIEND_PROFILE,
                                                                        params: this.currUser.userId,
                                                                    });
                                                                }
                                                                _resetConversationList() {}
                                                                _getQueryParams() {
                                                                    let e = {},
                                                                        t = window.location.search;
                                                                    if (((t = t ? t.substr(1).split('&') : null), t))
                                                                        for (let s = 0; s < t.length; s++) {
                                                                            let i = t[s].indexOf('=');
                                                                            if (i >= 0) {
                                                                                let n = t[s].slice(0, i),
                                                                                    r = t[s].slice(i + 1, t[s].length);
                                                                                n &&
                                                                                    n.length > 0 &&
                                                                                    r &&
                                                                                    r.length > 0 &&
                                                                                    (e[n] = decodeURIComponent(r));
                                                                            }
                                                                        }
                                                                    return e;
                                                                }
                                                                _autoSelectConv() {
                                                                    this._querySelect &&
                                                                        this._convsLoaded &&
                                                                        (He.default.logCoreInfo(
                                                                            `[${this.name}] - auto select conv start`
                                                                        ),
                                                                        this._querySelect(),
                                                                        (this._querySelect = null));
                                                                }
                                                            })
                                                        ) || ss)
                                                ) || ss)
                                        ) || ss)
                                ) || ss)
                        ) || ss)
                );
                var ps;
                const fs = {
                    id: ht.g,
                    color: '#EA87FF',
                    conversations: [],
                    createTime: 1634956772046,
                    emoij: '',
                    offset: 100,
                    text: 'default',
                };
                var vs;
                !(function (e) {
                    (e.ALL = 'all'), (e.SELECTED = 'selected');
                })(vs || (vs = {}));
                Object(pt.b)(ft.LabelDataManager)(
                    (ps =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (ps =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (ps = class extends G.b {
                                        constructor() {
                                            super(),
                                                (this.allLabels = void 0),
                                                (this.selectedLabel = void 0),
                                                (this.name = ft.LABEL_DATA_MANAGER),
                                                (this.data = new Map()),
                                                (this.key = 'labelId'),
                                                (this.allLabels = []),
                                                (this.selectedLabel = []);
                                        }
                                        onLabelChange(e) {
                                            const {
                                                    color: t,
                                                    conversations: s,
                                                    createTime: i,
                                                    emoij: n,
                                                    offset: r,
                                                    text: a,
                                                } = e,
                                                o = '' + e.id,
                                                d = this.data.get(o);
                                            if (
                                                (!o ||
                                                    (d &&
                                                        s === d.conversations &&
                                                        i == (null == d ? void 0 : d.createTime) &&
                                                        n == d.emoij &&
                                                        r == d.offset &&
                                                        a === d.text &&
                                                        t == d.color) ||
                                                    (this.data.set(o, e),
                                                    Object(Pe.g)(this.name, o),
                                                    Object(Pe.h)(this.name, 'all')),
                                                d && d.conversations && d.conversations.length !== s.length)
                                            ) {
                                                let e = [];
                                                s.length > d.conversations.length
                                                    ? ((e = s.filter((e) => !d.conversations.includes(e))),
                                                      this.dispatchEvent(
                                                          new bt.c(bt.d.LabelAddConvs, { labelId: o, convIds: e })
                                                      ))
                                                    : ((e = d.conversations.filter((e) => !s.includes(e))),
                                                      this.dispatchEvent(
                                                          new bt.c(bt.d.LabelRemoveConvs, { labelId: o, convIds: e })
                                                      ));
                                            }
                                        }
                                        onFetchLabels(e) {
                                            if (Array.isArray(e) && !(e.length < 0)) {
                                                for (let t = 0; t < e.length; t++) this.onLabelChange(e[t]);
                                                this.data.forEach((t) => {
                                                    const s = '' + t.id;
                                                    e.some((e) => e.id == s) || this.data.delete(s);
                                                }),
                                                    this._updateAllLabels(e.map((e) => e.id));
                                            }
                                        }
                                        onLabelDeleted(e) {
                                            'string' != typeof e &&
                                                (He.default.logCoreError(
                                                    `[${this.name}] - delete label invalid lid type ${e}`
                                                ),
                                                (e = '' + e)),
                                                this.data.has(e)
                                                    ? (this.data.delete(e),
                                                      this._updateAllLabels(this.allLabels.filter((t) => t !== e)),
                                                      this.selectedLabel.includes(e) && this.onDeSelectLabel(e),
                                                      Object(Pe.e)(this.name, e))
                                                    : He.default.logCoreError(this.name + 'Deleted not exists item!!!');
                                        }
                                        _updateAllLabels(e) {
                                            return (
                                                !He.default.shallowEqual(this.allLabels, e) &&
                                                ((this.allLabels = e), Object(Pe.h)(this.name, vs.ALL), !0)
                                            );
                                        }
                                        onSelectLabel(e) {
                                            (this.selectedLabel = ['' + e]),
                                                Object(Pe.h)(this.name, vs.SELECTED),
                                                this.selectedLabelChanged();
                                        }
                                        onDeSelectLabel(e) {
                                            (this.selectedLabel = this.selectedLabel.filter((t) => t !== e)),
                                                Object(Pe.h)(this.name, vs.SELECTED),
                                                this.selectedLabelChanged();
                                        }
                                        onClearFilter() {
                                            (this.selectedLabel = []),
                                                Object(Pe.h)(this.name, vs.SELECTED),
                                                this.selectedLabelChanged();
                                        }
                                        getLabelById(e) {
                                            return e
                                                ? ('string' != typeof e && (e = e.toString()),
                                                  e == ht.g ? fs : e == ht.h ? { id: ht.h } : this.data.get(e) || null)
                                                : null;
                                        }
                                        getAllLabels() {
                                            return Array.from(this.data.values());
                                        }
                                        getAllLabelIds() {
                                            return this.allLabels;
                                        }
                                        applyNewFilter(e) {
                                            (this.selectedLabel = e),
                                                Object(Pe.h)(this.name, vs.SELECTED),
                                                this.selectedLabelChanged();
                                        }
                                        selectedLabelChanged() {
                                            this.dispatchEvent(new bt.c(bt.d.SelectedLabelChange, this.selectedLabel));
                                        }
                                        init() {
                                            Ct.b.getAll().then((e) => {
                                                this.onFetchLabels(e);
                                            });
                                        }
                                        getItem(e) {
                                            const t = e.key;
                                            return this.getLabelById(t);
                                        }
                                        getList(e) {
                                            const t = e.key;
                                            return t === vs.ALL
                                                ? this.allLabels
                                                : t === vs.SELECTED
                                                ? this.selectedLabel
                                                : [];
                                        }
                                        onGetItemFailure(e) {}
                                        onGetListFailure(e) {}
                                    })
                                ) || ps)
                        ) || ps)
                );
                d.ModuleContainer.register(lt.b, gt);
                var bs = s('k+R1'),
                    ys = s('Py3H');
                let Is;
                !(function (e) {
                    (e[(e.FULL = 0)] = 'FULL'), (e[(e.WINDOWED = 1)] = 'WINDOWED');
                })(Is || (Is = {}));
                var _s,
                    Ms = s('tQbm'),
                    Cs = s('qzuk'),
                    Ts = s('NMlV'),
                    Os = s('4HQc'),
                    Es = s('8RMw'),
                    Ss = s('lPX+'),
                    ws = s('OU7N'),
                    Ds = s('UYGI'),
                    Ls = s('X4fA'),
                    Fs = s('V8Oy'),
                    Rs = s('7WX+');
                let As;
                He.default.isWeb() || (As = s('Dprd').default);
                const Ps = { conversationId: null, mode: Is.FULL, windowId: Mt.c };
                Object(pt.b)(Ms.b)(
                    (_s =
                        (function (e, t) {
                            return d.ModuleContainer.inject(ft.SidebarController)(e, void 0, 0);
                        })(
                            (_s =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (_s =
                                        Reflect.metadata('design:paramtypes', [
                                            void 0 === ft.SidebarController ? Object : ft.SidebarController,
                                        ])(
                                            (_s = class extends G.b {
                                                constructor(e) {
                                                    super(),
                                                        (this.sidebar = e),
                                                        (this.data = new Map()),
                                                        (this.onLogOut = () => {
                                                            if (ws.c.isCalling())
                                                                return void Ft.a.createWarning(
                                                                    Rt.default.str('STR_SIGNOUT_WITH_CALL')
                                                                );
                                                            let e = wt.p.getSessionUserId(),
                                                                t = 'STR_LOGOUT_CONFIRM',
                                                                s = +Ds.a.isUploading();
                                                            if ((!s && As && As.isDownloading() && (s = 2), s > 0)) {
                                                                const e =
                                                                    1 === s
                                                                        ? Rt.default.str('STR_TITLE_BAR_SEND')
                                                                        : Rt.default.str('STR_TITLE_BAR_RECEIVE');
                                                                t =
                                                                    Rt.default.str('STR_LOGOUT_CANCEL_FILE') +
                                                                    ` ${e} ` +
                                                                    Rt.default.str('STR_TITLE_BAR_EXIT_ZALO_P2');
                                                            }
                                                            Ls.a.getLogoutToken(),
                                                                At.a.openConfirm({
                                                                    windowId: Mt.c,
                                                                    name: v.MODAL_CONFIRM.confirmIdentities,
                                                                    params: {
                                                                        message: Rt.default.str(t),
                                                                        okText: Rt.default.str('STR_LOGOUT_YES'),
                                                                        cancelText: Rt.default.str('STR_LOGOUT_NO'),
                                                                        onOk: this.doLogout,
                                                                        options: [
                                                                            {
                                                                                default_val: St.g.isSetClearData(e),
                                                                                key: 'del_history',
                                                                                title: 'STR_LOGOUT_DEL_HISTORY',
                                                                            },
                                                                        ],
                                                                        'data-id': {
                                                                            confirmBtn: 'btn_Logout_Logout',
                                                                            cancelBtn: 'btn_Logout_No',
                                                                        },
                                                                    },
                                                                });
                                                        }),
                                                        (this.openConversationInNewWindow = async (e) => {
                                                            throw new Error('Method not implemented.');
                                                        }),
                                                        (this.openScreenCapture = async () => {
                                                            vt.e.logAction(12808),
                                                                Je.default.send(Ze.ChatBoxActions.SIDEBAR_CAPTURE);
                                                        }),
                                                        (this.openZaloSupport = async () => {
                                                            const e = We.default.supportPage;
                                                            return e
                                                                ? d.ModuleContainer.resolve(Nt.b).openConversation(
                                                                      e,
                                                                      Nt.c.fromSupport()
                                                                  )
                                                                : Promise.resolve(!1);
                                                        }),
                                                        (this.openUpdateMyProfile = async () => {
                                                            Tt.ModalManagerV2.openModal({
                                                                windowId: Mt.c,
                                                                name: v.ModalIdentitiesDefine.UPDATE_PROFILE,
                                                                params: { showCloseButton: !0 },
                                                            });
                                                        }),
                                                        (this.openUserInfo = async (e) => {
                                                            ys.a.setFriendRequestSource(
                                                                e,
                                                                v.FRIEND_REQUEST_SRC_CONTACT_LIST_SUGGESTION
                                                            ),
                                                                wt.p.setSelectConversationSource(178012),
                                                                Tt.ModalManagerV2.openModal({
                                                                    windowId: Mt.c,
                                                                    name: v.ModalIdentitiesDefine.FRIEND_PROFILE,
                                                                    params: e,
                                                                });
                                                        }),
                                                        (this.openEditAlias = async (e) => {
                                                            const t = {
                                                                windowId: Mt.c,
                                                                name: v.ModalIdentitiesDefine.EDIT_ALIAS,
                                                                params: Object(i.a)({}, e),
                                                            };
                                                            Tt.ModalManagerV2.openModal(t);
                                                        }),
                                                        (this.sendFile = async (e, t) => {
                                                            const s = this._getStateByWindowId(Mt.c),
                                                                i = bs.default.getChatBoxControllerByConvId(
                                                                    t || s.conversationId
                                                                );
                                                            null == i || i._uploadDragFile(e, null, t);
                                                        }),
                                                        (this.getConvId = () =>
                                                            this._getStateByWindowId(Mt.c).conversationId),
                                                        (this.sendDirectMsgToSendToMe = (e, t) => {
                                                            !We.default.isOffSendToMe &&
                                                                this.chatboxController &&
                                                                le.default
                                                                    .getConversation(We.default.sendToMeId)
                                                                    .then((s) => {
                                                                        if (e === v.MSG_GIF && t.url) {
                                                                            var i;
                                                                            let e = {
                                                                                hd: {
                                                                                    width: t.width ? t.width : 0,
                                                                                    height: t.height ? t.height : 0,
                                                                                    url: t.url,
                                                                                },
                                                                                original: {
                                                                                    width: t.width ? t.width : 0,
                                                                                    height: t.height ? t.height : 0,
                                                                                    url: t.url,
                                                                                },
                                                                                normal: {
                                                                                    width: t.width ? t.width : 0,
                                                                                    height: t.height ? t.height : 0,
                                                                                    url: t.url,
                                                                                },
                                                                            };
                                                                            null === (i = this.chatboxController) ||
                                                                                void 0 === i ||
                                                                                i._sendMessage(
                                                                                    s,
                                                                                    v.MSG_GIF,
                                                                                    e,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null
                                                                                );
                                                                        }
                                                                        Object(Te.e)({
                                                                            type: Ze.ConversationListActions
                                                                                .SELECT_CONVERSATION,
                                                                            payload: s,
                                                                        }),
                                                                            this.sidebar.updateSelectedId(
                                                                                We.default.sendToMeId
                                                                            );
                                                                    });
                                                        }),
                                                        (this.handleSendMessageError = (e, t, s) => {
                                                            var i, n;
                                                            if (
                                                                (le.default.deleteMessageById(t.msgId),
                                                                null === (i = this.chatboxController) ||
                                                                    void 0 === i ||
                                                                    i._cleanUpLocalTTLItem(t),
                                                                wt.p.isDelSendingMsg(t.clientId))
                                                            )
                                                                return;
                                                            const r = t.convertToUIMessageObject();
                                                            return (
                                                                null === (n = this.chatboxController) ||
                                                                    void 0 === n ||
                                                                    n._handleMessageFailure(e, t, r, s, !0),
                                                                e
                                                            );
                                                        }),
                                                        (this.broadCastMessage = (e, t, s, i) => {
                                                            if (e && t)
                                                                for (let l = 0; l < e.length; l++) {
                                                                    const c = e[l];
                                                                    if (c) {
                                                                        let e = c.userId,
                                                                            l = e.startsWith(v.GROUPID_PREFIX);
                                                                        if (t.msgType === v.MSG_STICKER) {
                                                                            var n, r;
                                                                            const d = Ts.a.next();
                                                                            t && t.sendSrc && rs.c.track(d, t.sendSrc);
                                                                            const h =
                                                                                    He.default.getMsgIdSendingFromCliMsgId(
                                                                                        d
                                                                                    ),
                                                                                u = new Os.b(
                                                                                    wt.p.getSessionUserId(),
                                                                                    e,
                                                                                    h,
                                                                                    d,
                                                                                    v.MSG_STICKER,
                                                                                    l
                                                                                ),
                                                                                g =
                                                                                    null === Es.default ||
                                                                                    void 0 === Es.default ||
                                                                                    null ===
                                                                                        (n =
                                                                                            Es.default
                                                                                                .signalProtocolManager) ||
                                                                                    void 0 === n
                                                                                        ? void 0
                                                                                        : n.isOnE2ee(c.userId);
                                                                            if (
                                                                                (u.updateMessageContentProp(
                                                                                    Os.a.STICKER,
                                                                                    t.message
                                                                                ),
                                                                                g)
                                                                            ) {
                                                                                var a;
                                                                                const e = {
                                                                                    id: u.content.sticker.id,
                                                                                    catId: u.content.sticker.cateId,
                                                                                    type: u.content.sticker.type,
                                                                                };
                                                                                var o;
                                                                                if (
                                                                                    null !== (a = t.message) &&
                                                                                    void 0 !== a &&
                                                                                    a.fssInfo
                                                                                )
                                                                                    e.extInfo =
                                                                                        null === (o = t.message) ||
                                                                                        void 0 === o
                                                                                            ? void 0
                                                                                            : o.fssInfo;
                                                                                u.updateMessageContentProp(
                                                                                    Os.a.STICKER,
                                                                                    e
                                                                                ),
                                                                                    (u.e2eeStatus = v.MSG_E2EE);
                                                                            }
                                                                            qe.default
                                                                                .sendMsgObject(
                                                                                    u,
                                                                                    null,
                                                                                    null,
                                                                                    v.RETRY_MSG_TIMEOUT_DEFAULT
                                                                                )
                                                                                .then((t) => {
                                                                                    if (s) {
                                                                                        var n;
                                                                                        const t = Ts.a.next(),
                                                                                            i =
                                                                                                He.default.getMsgIdSendingFromCliMsgId(
                                                                                                    t
                                                                                                );
                                                                                        let r = new Os.b(
                                                                                            wt.p.getSessionUserId(),
                                                                                            e,
                                                                                            i,
                                                                                            t,
                                                                                            v.MSG_TEXT,
                                                                                            l
                                                                                        );
                                                                                        r.updateMessageContentProp(
                                                                                            Os.a.TEXT,
                                                                                            s
                                                                                        ),
                                                                                            g &&
                                                                                                (r.e2eeStatus =
                                                                                                    v.MSG_E2EE),
                                                                                            qe.default
                                                                                                .sendMsgObject(
                                                                                                    r,
                                                                                                    null,
                                                                                                    null,
                                                                                                    v.RETRY_MSG_TIMEOUT_DEFAULT
                                                                                                )
                                                                                                .then((e) => {
                                                                                                    g &&
                                                                                                        ((e =
                                                                                                            He.default.parseE2eeResp(
                                                                                                                e
                                                                                                            )),
                                                                                                        this.chatboxController._sentMessage(
                                                                                                            r,
                                                                                                            e
                                                                                                        ));
                                                                                                })
                                                                                                .catch((e) => {
                                                                                                    this.handleSendMessageError(
                                                                                                        e,
                                                                                                        r,
                                                                                                        c
                                                                                                    );
                                                                                                }),
                                                                                            null ===
                                                                                                (n =
                                                                                                    this
                                                                                                        .chatboxController) ||
                                                                                                void 0 === n ||
                                                                                                n._showLocalMessage(
                                                                                                    r,
                                                                                                    c
                                                                                                );
                                                                                    }
                                                                                    g &&
                                                                                        ((t =
                                                                                            He.default.parseE2eeResp(
                                                                                                t
                                                                                            )),
                                                                                        this.chatboxController._sentMessage(
                                                                                            u,
                                                                                            t
                                                                                        )),
                                                                                        i && i(t);
                                                                                })
                                                                                .catch((e) => {
                                                                                    He.default.logCoreError(
                                                                                        'BroadcastErr: ',
                                                                                        e
                                                                                    ),
                                                                                        this.handleSendMessageError(
                                                                                            e,
                                                                                            u,
                                                                                            c
                                                                                        ),
                                                                                        i && i(e);
                                                                                }),
                                                                                null === (r = this.chatboxController) ||
                                                                                    void 0 === r ||
                                                                                    r._showLocalMessage(u, c);
                                                                        } else if (t.msgType === v.MSG_TEXT && s) {
                                                                            var d;
                                                                            const t = Ts.a.next(),
                                                                                n =
                                                                                    He.default.getMsgIdSendingFromCliMsgId(
                                                                                        t
                                                                                    );
                                                                            let r = new Os.b(
                                                                                wt.p.getSessionUserId(),
                                                                                e,
                                                                                n,
                                                                                t,
                                                                                v.MSG_TEXT,
                                                                                l
                                                                            );
                                                                            r.updateMessageContentProp(Os.a.TEXT, s);
                                                                            (null === Es.default ||
                                                                            void 0 === Es.default ||
                                                                            null ===
                                                                                (d =
                                                                                    Es.default.signalProtocolManager) ||
                                                                            void 0 === d
                                                                                ? void 0
                                                                                : d.isOnE2ee(c.userId)) &&
                                                                                (r.e2eeStatus = v.MSG_E2EE),
                                                                                qe.default
                                                                                    .sendMsgObject(
                                                                                        r,
                                                                                        null,
                                                                                        null,
                                                                                        v.RETRY_MSG_TIMEOUT_DEFAULT
                                                                                    )
                                                                                    .then((e) => {
                                                                                        i && i(e);
                                                                                    })
                                                                                    .catch((e) => {
                                                                                        this.handleSendMessageError(
                                                                                            e,
                                                                                            r,
                                                                                            c
                                                                                        ),
                                                                                            i && i(e);
                                                                                    });
                                                                        }
                                                                    }
                                                                }
                                                        }),
                                                        (this.handleEvent = (e, t) => {
                                                            if (e === Ze.ConversationListActions.SELECT_CONVERSATION) {
                                                                const e = this._getStateByWindowId(Mt.c);
                                                                if (t.userId !== e.conversationId)
                                                                    return (
                                                                        this._updateStateByWindowId(Mt.c, (e) =>
                                                                            Object(i.a)(
                                                                                Object(i.a)({}, e),
                                                                                {},
                                                                                { conversationId: t.userId }
                                                                            )
                                                                        ),
                                                                        Object(Pe.g)(this.name, Mt.c),
                                                                        void this.dispatchEvent(
                                                                            new Cs.a(t.userId, Mt.c)
                                                                        )
                                                                    );
                                                            }
                                                        }),
                                                        (this.name = Ms.a),
                                                        (this.key = 'windowId'),
                                                        this.init();
                                                }
                                                get chatboxController() {
                                                    const e = this.sidebar.getState().selectedId;
                                                    return bs.default.getChatBoxControllerByConvId(e || Mt.b);
                                                }
                                                onInviteFriend() {
                                                    const e = [Ss.a];
                                                    Tt.ModalManagerV2.openModal({
                                                        windowId: Mt.c,
                                                        name: v.ModalIdentitiesDefine.SHARE_MSG_COMPOSE,
                                                        params: {
                                                            messages: e,
                                                            title: Rt.default.str('STR_INVITE_FRIEND_1'),
                                                            disableGroup: !0,
                                                            disablePcUser: !0,
                                                            callback: (e, t) => {
                                                                Je.default.send(Ze.SideBarActions.SEND_INVITATION, {
                                                                    target: e,
                                                                    message:
                                                                        (null == t ? void 0 : t.length) > 0 ? t[0] : '',
                                                                    link: `https://${We.default.CONFIG_DOMAIN}/may-tinh`,
                                                                });
                                                            },
                                                        },
                                                    });
                                                }
                                                onWhatNew() {
                                                    Tt.ModalManagerV2.openModal({
                                                        windowId: Mt.c,
                                                        name: v.ModalIdentitiesDefine.APP_UPDATE_INFO,
                                                        params: {
                                                            data: le.default.getCacheRecentUpdate(),
                                                            isManual: !0,
                                                        },
                                                    });
                                                }
                                                showMyProfile() {
                                                    let e = wt.p.getSessionUserId();
                                                    Tt.ModalManagerV2.openModal({
                                                        windowId: Mt.c,
                                                        name: v.ModalIdentitiesDefine.FRIEND_PROFILE,
                                                        params: e,
                                                    });
                                                }
                                                get mainWindowConversationId() {
                                                    return this._getStateByWindowId(Mt.c).conversationId;
                                                }
                                                doLogout(e) {
                                                    let t = wt.p.getSessionUserId();
                                                    e && e.del_history
                                                        ? St.g.setClearData(t, 1)
                                                        : St.g.setClearData(t, 0),
                                                        Fs.a.logout(),
                                                        Rs.a.logout(),
                                                        Ls.a.logout().catch((e) => {
                                                            e.error_code &&
                                                                18032 === e.error_code &&
                                                                Tt.ModalManagerV2.openModal({
                                                                    windowId: Mt.c,
                                                                    name: v.ModalIdentitiesDefine.CHANGE_PW,
                                                                });
                                                        });
                                                }
                                                init() {
                                                    Je.default.subscribe(this.handleEvent);
                                                }
                                                getItem(e, t) {
                                                    return this._getStateByWindowId(e.key);
                                                }
                                                getList(e, t) {
                                                    return Array.from(this.data.keys());
                                                }
                                                onGetItemFailure(e) {}
                                                onGetListFailure(e) {}
                                                _getStateByWindowId(e) {
                                                    let t = this.data.get(e);
                                                    return t || ((t = Object(i.a)({}, Ps)), this.data.set(e, t)), t;
                                                }
                                                _updateStateByWindowId(e, t) {
                                                    const s = t(this._getStateByWindowId(e));
                                                    this.data.set(e, s);
                                                }
                                            })
                                        ) || _s)
                                ) || _s)
                        ) || _s)
                );
                var Ns,
                    js = s('OI//');
                let Us =
                    d.ModuleContainer.injectable()(
                        (Ns = class {
                            async get(e) {
                                return jt.default.getGroupByIdSync(e);
                            }
                            async getAll() {
                                return await jt.default.getGroupsListSync();
                            }
                        })
                    ) || Ns;
                var Bs;
                let ks =
                    d.ModuleContainer.injectable()(
                        (Bs =
                            (function (e, t) {
                                return d.ModuleContainer.inject(js.c)(e, void 0, 0);
                            })(
                                (Bs =
                                    (function (e, t) {
                                        return d.ModuleContainer.inject(N.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (Bs =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (Bs =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === js.c ? Object : js.c,
                                                        void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                    ])(
                                                        (Bs = class {
                                                            constructor(e, t) {
                                                                (this.groupRepository = e),
                                                                    (this.logger = void 0),
                                                                    (this.logger = t.createZLogger('groups', [
                                                                        'group-manager',
                                                                    ]));
                                                            }
                                                            getAll() {
                                                                return this.groupRepository
                                                                    .getAll()
                                                                    .then((e) => e.map((e) => new js.a(e)))
                                                                    .catch(
                                                                        (e) => (
                                                                            this.logger.zsymb(18, 8176, 3e4, () => [
                                                                                'getAll error. return [].',
                                                                                { reason: e },
                                                                            ]),
                                                                            []
                                                                        )
                                                                    );
                                                            }
                                                            get(e) {
                                                                return this.groupRepository
                                                                    .get(e)
                                                                    .then((e) => (e ? new js.a(e) : void 0))
                                                                    .catch((e) => {
                                                                        this.logger.zsymb(18, 8176, 30001, () => [
                                                                            'get error. return undefined.',
                                                                            { reason: e },
                                                                        ]);
                                                                    });
                                                            }
                                                        })
                                                    ) || Bs)
                                            ) || Bs)
                                    ) || Bs)
                            ) || Bs)
                    ) || Bs;
                d.ModuleContainer.registerSingleton(js.c, Us), d.ModuleContainer.registerSingleton(js.b, ks);
                var Gs,
                    xs = s('MqnV'),
                    zs = s('yEZN');
                let Vs =
                    d.ModuleContainer.injectable()(
                        (Gs =
                            (function (e, t) {
                                return d.ModuleContainer.inject(ut.d)(e, void 0, 0);
                            })(
                                (Gs =
                                    (function (e, t) {
                                        return d.ModuleContainer.inject(zs.b)(e, void 0, 1);
                                    })(
                                        (Gs =
                                            (function (e, t) {
                                                return d.ModuleContainer.inject(ut.f)(e, void 0, 2);
                                            })(
                                                (Gs =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (Gs =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === ut.d ? Object : ut.d,
                                                                void 0 === zs.b ? Object : zs.b,
                                                                void 0 === ut.f ? Object : ut.f,
                                                            ])(
                                                                (Gs = class {
                                                                    constructor(e, t, s) {
                                                                        (this.conversationRepository = e),
                                                                            (this.messageManager = t),
                                                                            (this.muteManager = s);
                                                                    }
                                                                    async get(e) {
                                                                        const t = await this.conversationRepository
                                                                            .get(e)
                                                                            .catch(() => {});
                                                                        if (t)
                                                                            return new ut.c(
                                                                                t,
                                                                                this,
                                                                                this.messageManager
                                                                            );
                                                                    }
                                                                    isPinned(e) {
                                                                        return this.conversationRepository
                                                                            .get(e)
                                                                            .then((e) => !(null == e || !e.pinned))
                                                                            .catch(() => !1);
                                                                    }
                                                                    isMuted(e) {
                                                                        return !!this.muteManager.isMuted(e);
                                                                    }
                                                                })
                                                            ) || Gs)
                                                    ) || Gs)
                                            ) || Gs)
                                    ) || Gs)
                            ) || Gs)
                    ) || Gs;
                var $s;
                let Ws =
                    d.ModuleContainer.injectable()(
                        ($s =
                            (function (e, t) {
                                return d.ModuleContainer.inject(ut.b)(e, void 0, 0);
                            })(
                                ($s =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        ($s =
                                            Reflect.metadata('design:paramtypes', [void 0 === ut.b ? Object : ut.b])(
                                                ($s = class {
                                                    constructor(e) {
                                                        this.convManager = e;
                                                    }
                                                    get(e) {
                                                        return this.convManager.getConvById(e);
                                                    }
                                                })
                                            ) || $s)
                                    ) || $s)
                            ) || $s)
                    ) || $s;
                var Ks = s('SVh1');
                var qs,
                    Hs = new (class {
                        constructor() {}
                        showMyProfile() {
                            Tt.ModalManagerV2.openModal({
                                windowId: Mt.c,
                                name: v.ModalIdentitiesDefine.FRIEND_PROFILE,
                                params: wt.p.getSessionUserId(),
                            });
                        }
                    })(),
                    Qs = s('idnp'),
                    Js = s('SWHF'),
                    Zs = s('rkiK');
                function Xs() {
                    for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                    He.default.logCoreInfo('[Conversation controller] - ', t);
                }
                let Ys =
                    Object(d.singleton)()(
                        (qs =
                            Object(d.injectable)()(
                                (qs =
                                    (function (e, t) {
                                        return Object(d.inject)(ut.h)(e, void 0, 0);
                                    })(
                                        (qs =
                                            (function (e, t) {
                                                return Object(d.inject)(Js.b)(e, void 0, 1);
                                            })(
                                                (qs =
                                                    (function (e, t) {
                                                        return Object(d.inject)(ft.SidebarController)(e, void 0, 2);
                                                    })(
                                                        (qs =
                                                            (function (e, t) {
                                                                return Object(d.inject)(ut.b)(e, void 0, 3);
                                                            })(
                                                                (qs =
                                                                    Reflect.metadata(
                                                                        'design:type',
                                                                        Function
                                                                    )(
                                                                        (qs =
                                                                            Reflect.metadata('design:paramtypes', [
                                                                                void 0 === ut.h ? Object : ut.h,
                                                                                void 0 === Js.b ? Object : Js.b,
                                                                                void 0 === ft.SidebarController
                                                                                    ? Object
                                                                                    : ft.SidebarController,
                                                                                void 0 === ut.b ? Object : ut.b,
                                                                            ])(
                                                                                (qs = class {
                                                                                    constructor(e, t, s, i) {
                                                                                        (this.previewManager = e),
                                                                                            (this.adminSettingController =
                                                                                                t),
                                                                                            (this.sidebar = s),
                                                                                            (this.convDataManager = i),
                                                                                            (this.ipc = void 0),
                                                                                            (this.lastOpenConv =
                                                                                                new Map()),
                                                                                            (this._es = void 0),
                                                                                            (this.onRequestJumtoMsg = (
                                                                                                e,
                                                                                                t
                                                                                            ) => {
                                                                                                const s =
                                                                                                        t.conversation,
                                                                                                    i =
                                                                                                        e ===
                                                                                                            Ze
                                                                                                                .ChatBoxActions
                                                                                                                .JUMP_TO_MESSAGE_SEARCH_HIDDEN_CHAT ||
                                                                                                        _t.a
                                                                                                            .getListChatBoxViewCurrent()
                                                                                                            .includes(
                                                                                                                null ==
                                                                                                                    s
                                                                                                                    ? void 0
                                                                                                                    : s.userId
                                                                                                            ) ||
                                                                                                        s.byPassPIN;
                                                                                                if (!s) return;
                                                                                                if (
                                                                                                    s &&
                                                                                                    !i &&
                                                                                                    _t.a.isThreadHidden(
                                                                                                        s.userId
                                                                                                    )
                                                                                                )
                                                                                                    return (
                                                                                                        Object(Lt.b)(
                                                                                                            {
                                                                                                                type: e,
                                                                                                                payload:
                                                                                                                    t,
                                                                                                            },
                                                                                                            !0
                                                                                                        ),
                                                                                                        void Xs(
                                                                                                            'req jum to msg rejected because hidden chat'
                                                                                                        )
                                                                                                    );
                                                                                                Zs.e.Fps.record(
                                                                                                    Zs.b.fps_jump_to_msg
                                                                                                ),
                                                                                                    Xs(
                                                                                                        'req jum to msg open on main'
                                                                                                    ),
                                                                                                    Object(Lt.b)(
                                                                                                        {
                                                                                                            type: e,
                                                                                                            payload: t,
                                                                                                        },
                                                                                                        !0
                                                                                                    );
                                                                                                const n =
                                                                                                    Qs.b.fromJumpMessage();
                                                                                                this.openConversationForJump(
                                                                                                    s.userId,
                                                                                                    n
                                                                                                );
                                                                                            }),
                                                                                            (this.tryToFocusChild = (
                                                                                                e,
                                                                                                t
                                                                                            ) =>
                                                                                                !!bs.default.isOpenChildWindowByConvId(
                                                                                                    e
                                                                                                ) &&
                                                                                                (Xs(
                                                                                                    'Open conv forward because already open in child => call focus'
                                                                                                ),
                                                                                                bs.default.focusOnChildWindow(
                                                                                                    e,
                                                                                                    null == t
                                                                                                        ? void 0
                                                                                                        : t.callPoint
                                                                                                ),
                                                                                                !0)),
                                                                                            (this.handleOutConversation =
                                                                                                (e) => {
                                                                                                    this.closeConversation(
                                                                                                        e.convId
                                                                                                    );
                                                                                                }),
                                                                                            this.listenEvent();
                                                                                    }
                                                                                    get eventStore() {
                                                                                        return (
                                                                                            this._es ||
                                                                                                (this._es =
                                                                                                    s('emRR').default),
                                                                                            this._es
                                                                                        );
                                                                                    }
                                                                                    listenEvent() {
                                                                                        Je.default.subscribe((e, t) => {
                                                                                            switch (e) {
                                                                                                case Ze
                                                                                                    .ConversationListActions
                                                                                                    .SELECT_CONVERSATION_HIDDEN:
                                                                                                    this.sidebar.updateSelectedId(
                                                                                                        t.userId
                                                                                                    );
                                                                                                    break;
                                                                                                case Ze.ChatBoxActions
                                                                                                    .OPEN_CONV_JUMP_TO_MESSAGE_SEARCH:
                                                                                                    this.onRequestJumtoMsg(
                                                                                                        Ze
                                                                                                            .ChatBoxActions
                                                                                                            .JUMP_TO_MESSAGE_SEARCH,
                                                                                                        t
                                                                                                    );
                                                                                                    break;
                                                                                                case Ze.ChatBoxActions
                                                                                                    .OPEN_CONV_JUMP_TO_MESSAGE_SEARCH_HIDDEN_CHAT:
                                                                                                    this.onRequestJumtoMsg(
                                                                                                        Ze
                                                                                                            .ChatBoxActions
                                                                                                            .JUMP_TO_MESSAGE_SEARCH_HIDDEN_CHAT,
                                                                                                        t
                                                                                                    );
                                                                                            }
                                                                                        }),
                                                                                            this.convDataManager.addEventListener(
                                                                                                It.b.DeleteConv,
                                                                                                this
                                                                                                    .handleOutConversation
                                                                                            ),
                                                                                            this.convDataManager.addEventListener(
                                                                                                It.b.EmptyConv,
                                                                                                this
                                                                                                    .handleOutConversation
                                                                                            ),
                                                                                            this.convDataManager.addEventListener(
                                                                                                It.b.LeaveGroup,
                                                                                                this
                                                                                                    .handleOutConversation
                                                                                            );
                                                                                    }
                                                                                    isConvOpeningInMain(e) {
                                                                                        const t =
                                                                                                this.eventStore.getState(),
                                                                                            s =
                                                                                                this.sidebar.getState()
                                                                                                    .selectedId;
                                                                                        return (
                                                                                            t &&
                                                                                            t.chatview.view ===
                                                                                                cs.c.CHAT_VIEW &&
                                                                                            s === e
                                                                                        );
                                                                                    }
                                                                                    openConversationForJump(e, t) {
                                                                                        return (
                                                                                            void 0 === t && (t = Qs.a),
                                                                                            new Promise(async (s) => {
                                                                                                if (
                                                                                                    (Xs(
                                                                                                        `Request open conv for jum: ${e}`
                                                                                                    ),
                                                                                                    !e ||
                                                                                                        this.isConvOpeningInMain(
                                                                                                            e
                                                                                                        ))
                                                                                                ) {
                                                                                                    if (
                                                                                                        (Xs(
                                                                                                            `Open conv rejected because null or opened: ${e}`
                                                                                                        ),
                                                                                                        e)
                                                                                                    ) {
                                                                                                        this.tryToFocusChild(
                                                                                                            e,
                                                                                                            t
                                                                                                        ) ||
                                                                                                            bs.default.focusOnMainWindow();
                                                                                                    }
                                                                                                    return s(!1);
                                                                                                }
                                                                                                if (
                                                                                                    !(await this.conversationWillOpen(
                                                                                                        e
                                                                                                    ))
                                                                                                )
                                                                                                    return s(!1);
                                                                                                let i = !1;
                                                                                                if (
                                                                                                    t.window ===
                                                                                                    Ks.b.Child
                                                                                                )
                                                                                                    return (
                                                                                                        (i =
                                                                                                            this.tryToFocusChild(
                                                                                                                e,
                                                                                                                t
                                                                                                            )),
                                                                                                        s(i)
                                                                                                    );
                                                                                                if (
                                                                                                    t.window ===
                                                                                                    Ks.b.PreferChild
                                                                                                ) {
                                                                                                    if (
                                                                                                        ((i =
                                                                                                            this.tryToFocusChild(
                                                                                                                e,
                                                                                                                t
                                                                                                            )),
                                                                                                        i)
                                                                                                    )
                                                                                                        return s(!0);
                                                                                                } else
                                                                                                    t.window ===
                                                                                                        Ks.b
                                                                                                            .MainAndChild &&
                                                                                                        (i =
                                                                                                            this.tryToFocusChild(
                                                                                                                e,
                                                                                                                t
                                                                                                            ));
                                                                                                i ||
                                                                                                    bs.default.focusOnMainWindow(),
                                                                                                    Je.default.send(
                                                                                                        Ze
                                                                                                            .ConversationListActions
                                                                                                            .SELECT_CONV_MINOR,
                                                                                                        { userId: e }
                                                                                                    ),
                                                                                                    Object(Lt.b)({
                                                                                                        type: Ze
                                                                                                            .ConversationListActions
                                                                                                            .OPEN_CONV_FOR_JUMP,
                                                                                                        payload: {
                                                                                                            userId: e,
                                                                                                        },
                                                                                                    }),
                                                                                                    this.sidebar.updateSelectedId(
                                                                                                        e
                                                                                                    ),
                                                                                                    s(!0),
                                                                                                    this.conversationDidOpen(
                                                                                                        e
                                                                                                    );
                                                                                            })
                                                                                        );
                                                                                    }
                                                                                    openConversation(e, t) {
                                                                                        return (
                                                                                            void 0 === t && (t = Qs.a),
                                                                                            new Promise(
                                                                                                async (s, n) => {
                                                                                                    if (
                                                                                                        (Xs(
                                                                                                            `Request open conv from: ${e} - ${t.callPoint}`
                                                                                                        ),
                                                                                                        !e ||
                                                                                                            (this.isConvOpeningInMain(
                                                                                                                e
                                                                                                            ) &&
                                                                                                                !t.force))
                                                                                                    ) {
                                                                                                        if (
                                                                                                            (Xs(
                                                                                                                `Open conv rejected because null or opened: ${e}`
                                                                                                            ),
                                                                                                            e)
                                                                                                        ) {
                                                                                                            this.tryToFocusChild(
                                                                                                                e,
                                                                                                                t
                                                                                                            ) ||
                                                                                                                bs.default.focusOnMainWindow();
                                                                                                        }
                                                                                                        return s(!1);
                                                                                                    }
                                                                                                    const r =
                                                                                                        wt.p.getSessionUserId();
                                                                                                    if (e == r)
                                                                                                        return (
                                                                                                            Hs.showMyProfile(),
                                                                                                            s(!1)
                                                                                                        );
                                                                                                    Zs.e.Fps.record(
                                                                                                        Zs.b
                                                                                                            .fps_switch_conv
                                                                                                    );
                                                                                                    if (
                                                                                                        !(await this.conversationWillOpen(
                                                                                                            e
                                                                                                        ))
                                                                                                    )
                                                                                                        return s(!1);
                                                                                                    let a = !1;
                                                                                                    if (
                                                                                                        t.window ===
                                                                                                        Ks.b.Child
                                                                                                    )
                                                                                                        return (
                                                                                                            (a =
                                                                                                                this.tryToFocusChild(
                                                                                                                    e,
                                                                                                                    t
                                                                                                                )),
                                                                                                            s(a)
                                                                                                        );
                                                                                                    if (
                                                                                                        t.window ===
                                                                                                        Ks.b.PreferChild
                                                                                                    ) {
                                                                                                        if (
                                                                                                            ((a =
                                                                                                                this.tryToFocusChild(
                                                                                                                    e,
                                                                                                                    t
                                                                                                                )),
                                                                                                            a)
                                                                                                        )
                                                                                                            return s(
                                                                                                                !0
                                                                                                            );
                                                                                                    } else
                                                                                                        t.window ===
                                                                                                            Ks.b
                                                                                                                .MainAndChild &&
                                                                                                            (a =
                                                                                                                this.tryToFocusChild(
                                                                                                                    e,
                                                                                                                    t
                                                                                                                ));
                                                                                                    let o =
                                                                                                        t.credentConv;
                                                                                                    if (
                                                                                                        (o ||
                                                                                                            ((o =
                                                                                                                await le.default
                                                                                                                    .getLikeConversation(
                                                                                                                        e
                                                                                                                    )
                                                                                                                    .catch(
                                                                                                                        (
                                                                                                                            e
                                                                                                                        ) => {
                                                                                                                            Xs(
                                                                                                                                `Failure to load conv from store ${e}`
                                                                                                                            );
                                                                                                                        }
                                                                                                                    )),
                                                                                                            Xs(
                                                                                                                `Try to use storage conv: ${!!o}`
                                                                                                            )),
                                                                                                        o ||
                                                                                                            ((o =
                                                                                                                t.defaultConv),
                                                                                                            Xs(
                                                                                                                `Try to use default conv: ${!!o}`
                                                                                                            )),
                                                                                                        !o)
                                                                                                    )
                                                                                                        return (
                                                                                                            Xs(
                                                                                                                `Open conv not exists: ${e}`
                                                                                                            ),
                                                                                                            s(!1)
                                                                                                        );
                                                                                                    a ||
                                                                                                        bs.default.focusOnMainWindow(),
                                                                                                        Je.default.send(
                                                                                                            Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONV_MINOR,
                                                                                                            o
                                                                                                        );
                                                                                                    const d =
                                                                                                        _t.a.isThreadHidden(
                                                                                                            e
                                                                                                        );
                                                                                                    d &&
                                                                                                        _t.a.checkShowUnreadHiddenChat(
                                                                                                            e
                                                                                                        ),
                                                                                                        t.byPassPIN
                                                                                                            ? ((o =
                                                                                                                  Object(
                                                                                                                      i.a
                                                                                                                  )(
                                                                                                                      {},
                                                                                                                      o
                                                                                                                  )),
                                                                                                              (o.byPassPIN = 1))
                                                                                                            : delete o.byPassPIN,
                                                                                                        this.eventStore.dispatch(
                                                                                                            {
                                                                                                                type: Ze
                                                                                                                    .ConversationListActions
                                                                                                                    .SELECT_CONVERSATION,
                                                                                                                payload:
                                                                                                                    o,
                                                                                                            }
                                                                                                        ),
                                                                                                        Je.default.send(
                                                                                                            Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONVERSATION,
                                                                                                            {
                                                                                                                userId: o.userId,
                                                                                                                needScroll:
                                                                                                                    t.callPoint !==
                                                                                                                    Ks.a
                                                                                                                        .ConvItem,
                                                                                                                callPoint:
                                                                                                                    t.callPoint,
                                                                                                            }
                                                                                                        );
                                                                                                    (!d ||
                                                                                                        t.byPassPIN ||
                                                                                                        _t.a
                                                                                                            .getListChatBoxViewCurrent()
                                                                                                            .includes(
                                                                                                                o.userId
                                                                                                            )) &&
                                                                                                        this.sidebar.updateSelectedId(
                                                                                                            e
                                                                                                        ),
                                                                                                        s(!0),
                                                                                                        this.conversationDidOpen(
                                                                                                            e
                                                                                                        );
                                                                                                }
                                                                                            )
                                                                                        );
                                                                                    }
                                                                                    closeConversation(e, t) {
                                                                                        return (
                                                                                            void 0 === t && (t = Mt.c),
                                                                                            new Promise((s) => {
                                                                                                if (
                                                                                                    e &&
                                                                                                    this.sidebar.getState()
                                                                                                        .selectedId !==
                                                                                                        e
                                                                                                )
                                                                                                    return s(!1);
                                                                                                if (t === Mt.c) {
                                                                                                    const e = {
                                                                                                        conversation:
                                                                                                            null,
                                                                                                        convId: null,
                                                                                                    };
                                                                                                    this.eventStore.dispatch(
                                                                                                        {
                                                                                                            type: Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONVERSATION,
                                                                                                            payload: e,
                                                                                                        }
                                                                                                    ),
                                                                                                        Je.default.send(
                                                                                                            Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONVERSATION,
                                                                                                            e
                                                                                                        ),
                                                                                                        this.sidebar.updateSelectedId(
                                                                                                            null
                                                                                                        );
                                                                                                }
                                                                                                s(!0);
                                                                                            })
                                                                                        );
                                                                                    }
                                                                                    closeAllConversations() {
                                                                                        return Promise.resolve(!0);
                                                                                    }
                                                                                    deleteConversation(e, t) {
                                                                                        return (
                                                                                            void 0 === t && (t = Mt.c),
                                                                                            new Promise(async (s) => {
                                                                                                if (
                                                                                                    (this.conversationWillDelete(
                                                                                                        e
                                                                                                    ),
                                                                                                    await ct.a.deleteConversation(
                                                                                                        e,
                                                                                                        !0,
                                                                                                        t
                                                                                                    ),
                                                                                                    t === Mt.c)
                                                                                                ) {
                                                                                                    const t = {
                                                                                                        userId: null,
                                                                                                    };
                                                                                                    this.eventStore.dispatch(
                                                                                                        {
                                                                                                            type: Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONVERSATION,
                                                                                                            payload: t,
                                                                                                        }
                                                                                                    ),
                                                                                                        Je.default.send(
                                                                                                            Ze
                                                                                                                .ConversationListActions
                                                                                                                .SELECT_CONVERSATION,
                                                                                                            t
                                                                                                        ),
                                                                                                        this.sidebar.updateSelectedId(
                                                                                                            null
                                                                                                        ),
                                                                                                        s(!0),
                                                                                                        this.conversationDidDelete(
                                                                                                            e
                                                                                                        );
                                                                                                } else s(!1);
                                                                                            })
                                                                                        );
                                                                                    }
                                                                                    pinConversation(e) {
                                                                                        return Promise.resolve(!0);
                                                                                    }
                                                                                    renameConversation(e) {
                                                                                        return Promise.resolve(!0);
                                                                                    }
                                                                                    getLastOpenConv(e) {
                                                                                        return this.lastOpenConv.get(e);
                                                                                    }
                                                                                    conversationWillOpen(e) {
                                                                                        return (
                                                                                            Xs(`Will open conv ${e}`),
                                                                                            this.lastOpenConv.set(
                                                                                                e,
                                                                                                Date.now()
                                                                                            ),
                                                                                            Promise.resolve(!0)
                                                                                        );
                                                                                    }
                                                                                    conversationDidOpen(e) {
                                                                                        Zs.e.start(
                                                                                            Zs.b.open_conversation,
                                                                                            e
                                                                                        ),
                                                                                            Xs(`Did open conv ${e}`),
                                                                                            this.adminSettingController.onLoadSetting(
                                                                                                e
                                                                                            ),
                                                                                            setTimeout(() => {
                                                                                                this.previewManager.revalidate(
                                                                                                    e
                                                                                                );
                                                                                            }, 0);
                                                                                    }
                                                                                    conversationWillDelete(e) {
                                                                                        return (
                                                                                            Xs(`Will delete conv ${e}`),
                                                                                            Promise.resolve()
                                                                                        );
                                                                                    }
                                                                                    conversationDidDelete(e) {
                                                                                        Xs(`Did delete conv ${e}`),
                                                                                            this.lastOpenConv.delete(e);
                                                                                    }
                                                                                })
                                                                            ) || qs)
                                                                    ) || qs)
                                                            ) || qs)
                                                    ) || qs)
                                            ) || qs)
                                    ) || qs)
                            ) || qs)
                    ) || qs;
                var ei,
                    ti = s('s9sK'),
                    si = s('TeMN'),
                    ii = s('bUXd'),
                    ni = (s('EHdh'), s('Ln14')),
                    ri = s('bdot'),
                    ai = s('cfFl'),
                    oi = s.n(ai);
                const di = {
                        userId: v.CONV_FILTER.STRANGER,
                        label: null,
                        isGroup: !1,
                        respondedByMe: !1,
                        numMsg: 0,
                        pinned: 0,
                        outside: 0,
                        topOut: !1,
                        infoCheckSearch: null,
                    },
                    li = [
                        'userId',
                        'label',
                        'firstSmsLocalId',
                        'lastSmsLocalId',
                        'isGroup',
                        'respondedByMe',
                        'numMsg',
                        'pinned',
                        'outside',
                        'lastActionId',
                        'topOutImprTimeOut',
                        'topOutTimeOut',
                        'syncFromMobile',
                        'topOut',
                        'localType',
                        'infoCheckSearch',
                        'preLastSmsLocalId',
                    ];
                Object(pt.b)(ni.c)(
                    (ei =
                        (function (e, t) {
                            return d.ModuleContainer.inject(si.b)(e, void 0, 0);
                        })(
                            (ei =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (ei =
                                        Reflect.metadata('design:paramtypes', [
                                            void 0 === It.IReactiveDB ? Object : It.IReactiveDB,
                                        ])(
                                            (ei = class extends G.b {
                                                constructor(e) {
                                                    super(),
                                                        (this.DBConvInfo = e),
                                                        (this.name = void 0),
                                                        (this.key = void 0),
                                                        (this.data = void 0),
                                                        (this.didInit = void 0),
                                                        (this.doneLoadDB = void 0),
                                                        (this.fetchAllHolder = void 0),
                                                        (this.preloadCached = void 0),
                                                        (this._pm = void 0),
                                                        (this.pinEventQueue = void 0),
                                                        (this.labelEventQueue = void 0),
                                                        (this.doneEventQueue = void 0),
                                                        (this.name = ni.a),
                                                        (this.key = 'convId'),
                                                        (this.data = new Map()),
                                                        (this.didInit = !1),
                                                        (this.doneLoadDB = !1),
                                                        (this.fetchAllHolder = null),
                                                        (this.preloadCached = null),
                                                        (this._pm = null),
                                                        (this.pinEventQueue = []),
                                                        (this.labelEventQueue = []),
                                                        (this.doneEventQueue = !1);
                                                }
                                                get previewManager() {
                                                    return (
                                                        this._pm || (this._pm = d.ModuleContainer.resolve(ut.h)),
                                                        this._pm
                                                    );
                                                }
                                                get unreadManager() {
                                                    return ot.a.UnreadDataManager;
                                                }
                                                init() {
                                                    return this.didInit
                                                        ? Promise.resolve()
                                                        : ((this.didInit = !0), this.loadData());
                                                }
                                                async loadData() {
                                                    this.fetchAllHolder ||
                                                        (this.fetchAllHolder = this.DBConvInfo.getAll());
                                                    const e =
                                                            (await this.fetchAllHolder.catch((e) => {
                                                                He.default.logCoreInfo(
                                                                    `[${this.name}] - load conv from DB got error ${e}`
                                                                );
                                                            })) || [],
                                                        t = await this.onLoadDataFromDB(e);
                                                    He.default.logCoreInfo(`[${this.name}] - done load db ${e.length}`),
                                                        (this.doneLoadDB = !0),
                                                        this.doIdleTask(),
                                                        this.broadcastEvent(It.b.DoneLoadDB, '', e),
                                                        this.previewManager.migrate(t.map((e) => e.userId)),
                                                        this.setCacheData(v.CONV_FILTER.STRANGER, di, !0);
                                                }
                                                async doIdleTask() {
                                                    const e = this.pinEventQueue.slice(),
                                                        t = this.labelEventQueue.slice();
                                                    (this.pinEventQueue = []), (this.labelEventQueue = []);
                                                    const s = oi.a.series(e),
                                                        i = oi.a.series(t);
                                                    return Promise.all([s, i]).then((e) =>
                                                        this.pinEventQueue.length || this.labelEventQueue.length
                                                            ? this.doIdleTask()
                                                            : ((this.doneEventQueue = !0), e)
                                                    );
                                                }
                                                getItem(e, t) {
                                                    return this.data.get(e.key);
                                                }
                                                getList(e, t) {
                                                    return e.key === ni.b.ALL ? Array.from(this.data.keys()) : [];
                                                }
                                                onGetItemFailure(e) {}
                                                onGetListFailure(e) {}
                                                async onLoadDataFromDB(e) {
                                                    const t = await yt.a.filterOutdatedConv(e);
                                                    He.default.logCoreInfo(
                                                        `[${this.name}] - done filter outdate ${e.length} ${t.length}`
                                                    );
                                                    const s = new Date().getTime().toString(),
                                                        n = [];
                                                    Object(Pe.i)(s);
                                                    for (let r = 0; r < t.length; r++) {
                                                        if (!t[r].userId) continue;
                                                        const e = Object(i.a)({}, t[r]),
                                                            a = this.data.get(e.userId);
                                                        if (
                                                            ((e.verified = !0),
                                                            void 0 === e.isGroup &&
                                                                (e.isGroup = e.userId.startsWith(v.GROUPID_PREFIX)),
                                                            a)
                                                        ) {
                                                            if (!a.verified) {
                                                                const t = this.mergeConv(e, a);
                                                                (t.verified = !0),
                                                                    this.setCacheData(e.userId, t),
                                                                    Object(Pe.f)(s, this.name, e.userId),
                                                                    this.updateInDB(t);
                                                            }
                                                        } else
                                                            this.setCacheData(e.userId, e),
                                                                Object(Pe.f)(s, this.name, e.userId);
                                                        e.infoCheckSearch &&
                                                            (e.infoCheckSearch &&
                                                            He.default.msgTypeValid(e.infoCheckSearch.lastType)
                                                                ? qt.a.pushCacheLastChat(
                                                                      e.userId,
                                                                      e.infoCheckSearch.lastMessageTime
                                                                  )
                                                                : e.numMsg && e.numMsg > 1 && n.push(e.userId));
                                                    }
                                                    return (
                                                        n.length > 0 && qt.a.cacheCheckLastChatInDb(n),
                                                        Object(Pe.c)(s),
                                                        t
                                                    );
                                                }
                                                onReceiveNewMessages(e, t, s) {
                                                    return (
                                                        void 0 === s && (s = { outside: void 0, isGroup: !1 }),
                                                        new Promise((n, r) => {
                                                            var a;
                                                            if (!t || t.length < 0) return r('Empty msgs');
                                                            const o = t[t.length - 1],
                                                                d = t[0],
                                                                l = this.data.get(e),
                                                                c = yt.a.getLastValidMsg(t);
                                                            let h;
                                                            c &&
                                                                ((h = {
                                                                    lastMessageTime: Number(c.sendDttm),
                                                                    lastType: c.msgType,
                                                                }),
                                                                qt.a.pushCacheLastChat(e, h.lastMessageTime));
                                                            const u = {
                                                                userId: e,
                                                                firstSmsLocalId: d.msgId,
                                                                isGroup: s.isGroup || e.startsWith(v.GROUPID_PREFIX),
                                                                numMsg: t.length,
                                                                respondedByMe: Ut.b.includeMyMessage(t),
                                                                pinned: 0,
                                                                label: null,
                                                                topOut: o.topOut,
                                                                verified: !1,
                                                                lastSmsLocalId: o.msgId,
                                                                outside: s.outside,
                                                                cloudMore: !1,
                                                                infoCheckSearch: h,
                                                            };
                                                            if (
                                                                (this.preloadCached &&
                                                                    this.preloadCached.onNewMsg(e, o),
                                                                l)
                                                            ) {
                                                                const t = this.mergeConv(Object(i.a)({}, l), u);
                                                                this.setCacheData(e, t),
                                                                    this.shouldSignalUpdate(l, t) &&
                                                                        Object(Pe.g)(this.name, e),
                                                                    l.verified && this.updateInDB(t),
                                                                    n(t);
                                                            } else {
                                                                const t = Ct.b.getLabelObjByConversaionId(e);
                                                                if (
                                                                    ((u.label = t ? t.id : null),
                                                                    this.setCacheData(e, u, !0),
                                                                    this.doneLoadDB)
                                                                )
                                                                    return (u.verified = !0), this.updateInDB(u), n(u);
                                                                this.DBConvInfo.getById(e).then((t) => {
                                                                    const s = this.data.get(e);
                                                                    if (!s) return r('Internal logic handle wrong');
                                                                    let a = Object(i.a)({}, s);
                                                                    (a.verified = !0),
                                                                        t
                                                                            ? s.verified ||
                                                                              ((a = this.mergeConv(a, t)),
                                                                              this.setCacheData(e, a),
                                                                              this.shouldSignalUpdate(a, s) &&
                                                                                  Object(Pe.g)(this.name, e),
                                                                              this.updateInDB(a))
                                                                            : this.updateInDB(a),
                                                                        n(a);
                                                                });
                                                            }
                                                            (l && l.respondedByMe) ||
                                                                null === (a = this.data.get(e)) ||
                                                                void 0 === a ||
                                                                !a.respondedByMe ||
                                                                (He.default.logCoreInfo(
                                                                    `[${this.name}] - Detect first my msg ${e} ${o.msgId}`
                                                                ),
                                                                this.previewManager.forceChangeItem(e));
                                                        })
                                                    );
                                                }
                                                async onDeleteMessages(e, t) {
                                                    const s = this.data.get(e);
                                                    if (
                                                        (He.default.logCoreInfo(
                                                            `[${this.name}] - onDeleteMessages #1 ${e} ${t.length}`
                                                        ),
                                                        s && s.verified)
                                                    ) {
                                                        let n = !1;
                                                        if (
                                                            t.find((e) => {
                                                                let { msgId: t } = e;
                                                                return s.firstSmsLocalId === t;
                                                            })
                                                        ) {
                                                            const t = await (await ri.b.getFirstMessage(e)).firstMsg;
                                                            if (!t)
                                                                return (
                                                                    He.default.logCoreInfo(
                                                                        `[${this.name}] - onDeleteMessages #4 ${e} `
                                                                    ),
                                                                    this.forkDeleteCacheAndDB(e),
                                                                    { deletedId: e }
                                                                );
                                                            (s.firstSmsLocalId = null == t ? void 0 : t.msgId),
                                                                (n = !0);
                                                        }
                                                        if (
                                                            t.find((e) => {
                                                                let { msgId: t } = e;
                                                                return s.lastSmsLocalId === t;
                                                            })
                                                        ) {
                                                            const t = await ri.b.getLastMessage(e, s.lastSmsLocalId);
                                                            if (!t || t.length < 1)
                                                                return (
                                                                    He.default.logCoreInfo(
                                                                        `[${
                                                                            this.name
                                                                        }] - onDeleteMessages #5 ${e} ${!!t}`
                                                                    ),
                                                                    this.forkDeleteCacheAndDB(e),
                                                                    { deletedId: e }
                                                                );
                                                            (s.lastSmsLocalId = t[0].msgId), (n = !0);
                                                        }
                                                        return (
                                                            He.default.logCoreInfo(
                                                                `[${this.name}] - onDeleteMessages #6 ${e} ${n}`
                                                            ),
                                                            n &&
                                                                (this.setCacheData(e, Object(i.a)({}, s)),
                                                                this.updateInDB(s)),
                                                            { conversation: s, updated: n }
                                                        );
                                                    }
                                                    {
                                                        const t = await (await ri.b.getFirstMessage(e)).firstMsg,
                                                            s = await ri.b.getLastMessage(e),
                                                            n = s && s[0];
                                                        if (!t || !n)
                                                            return (
                                                                He.default.logCoreInfo(
                                                                    `[${
                                                                        this.name
                                                                    }] - onDeleteMessages #2 ${e} ${!!t} ${!!n}`
                                                                ),
                                                                ot.a.PinDataManager.isPinned(e) ||
                                                                    this.onDeleteConversation(e),
                                                                { deletedId: e }
                                                            );
                                                        const r = await this.DBConvInfo.getById(e);
                                                        let a = He.default.msgTypeValid(n)
                                                            ? { lastMessageTime: n.sendDttm, lastType: n.msgType }
                                                            : void 0;
                                                        if (
                                                            (He.default.logCoreInfo(
                                                                `[${this.name}] - onDeleteMessages #3 ${e} ${!!r}`
                                                            ),
                                                            r)
                                                        ) {
                                                            let s = !1;
                                                            r.firstSmsLocalId !== (null == t ? void 0 : t.msgId) &&
                                                                ((r.firstSmsLocalId = null == t ? void 0 : t.msgId),
                                                                (s = !0)),
                                                                r.lastSmsLocalId !== n.msgId &&
                                                                    ((r.lastSmsLocalId = null == n ? void 0 : n.msgId),
                                                                    (s = !0));
                                                            const a = Object(i.a)(
                                                                Object(i.a)({}, r),
                                                                {},
                                                                { verified: !0 }
                                                            );
                                                            return (
                                                                this.setCacheData(e, a, !0),
                                                                s && this.updateInDB(a),
                                                                { conversation: a, updated: !0 }
                                                            );
                                                        }
                                                        {
                                                            const s = {
                                                                userId: e,
                                                                isGroup: e.startsWith(v.GROUPID_PREFIX),
                                                                pinned: 0,
                                                                label: null,
                                                                topOut: void 0,
                                                                verified: !0,
                                                                outside: null,
                                                                cloudMore: !1,
                                                                firstSmsLocalId: t.msgId,
                                                                lastSmsLocalId: n.msgId,
                                                                numMsg: 2,
                                                                respondedByMe: '0' == t.fromUid || '0' == n.fromUid,
                                                                infoCheckSearch: a,
                                                            };
                                                            return (
                                                                this.setCacheData(e, s, !0),
                                                                this.updateInDB(s),
                                                                { conversation: s, updated: !0 }
                                                            );
                                                        }
                                                    }
                                                }
                                                mergeConv(e, t) {
                                                    return (
                                                        (!e.lastSmsLocalId ||
                                                            (t.lastSmsLocalId &&
                                                                t.lastSmsLocalId > e.lastSmsLocalId)) &&
                                                            ((e.preLastSmsLocalId =
                                                                e.lastSmsLocalId || t.lastSmsLocalId),
                                                            (e.lastSmsLocalId = t.lastSmsLocalId),
                                                            (e.outside = t.outside)),
                                                        (e.numMsg = (e.numMsg || 0) + t.numMsg),
                                                        (e.respondedByMe = e.respondedByMe || t.respondedByMe),
                                                        (!e.firstSmsLocalId ||
                                                            (t.firstSmsLocalId &&
                                                                t.firstSmsLocalId < e.firstSmsLocalId)) &&
                                                            (e.firstSmsLocalId = t.firstSmsLocalId),
                                                        (!e.infoCheckSearch ||
                                                            !e.infoCheckSearch.lastMessageTime ||
                                                            (t.infoCheckSearch &&
                                                                t.infoCheckSearch.lastMessageTime >
                                                                    e.infoCheckSearch.lastMessageTime)) &&
                                                            (e.infoCheckSearch = t.infoCheckSearch),
                                                        e.preLastSmsLocalId || (e.preLastSmsLocalId = t.lastSmsLocalId),
                                                        !t.respondedByMe && t.topOut && (e.topOut = t.topOut),
                                                        'string' != typeof e.firstSmsLocalId &&
                                                            (e.firstSmsLocalId = '' + e.firstSmsLocalId),
                                                        e
                                                    );
                                                }
                                                async onEmptyConversation(e) {
                                                    const t = await this.getConvById(e);
                                                    if (
                                                        (He.default.logCoreInfo(
                                                            `[${this.name}] - onEmptyConversation ${e} ${!!t}`
                                                        ),
                                                        !t)
                                                    )
                                                        return;
                                                    const s = Object(i.a)({}, t);
                                                    return (
                                                        delete s.firstSmsLocalId,
                                                        delete s.lastSmsLocalId,
                                                        (s.numMsg = 0),
                                                        (s.respondedByMe = !1),
                                                        this.setCacheData(e, s, !0),
                                                        this.broadcastEvent(It.b.EmptyConv, e),
                                                        Object(Pe.g)(this.name, e),
                                                        ot.a.PinDataManager.isPinned(e) &&
                                                            ot.a.PinDataManager.unpin([e]),
                                                        this.updateInDB(s)
                                                    );
                                                }
                                                onDeleteConversation(e) {
                                                    He.default.logCoreInfo(
                                                        `[${this.name}] - onDeleteConversation ${e}`
                                                    );
                                                    const t = this.data.get(e);
                                                    return this.doDeleteConversation(e).then((s) => {
                                                        this.broadcastEvent(It.b.DeleteConv, e, t);
                                                    });
                                                }
                                                doDeleteConversation(e) {
                                                    const t = this.data.get(e);
                                                    return (
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - doDeleteConversation ${e} ${!!t}`
                                                        ),
                                                        t && (this.data.delete(e), Object(Pe.e)(this.name, e)),
                                                        ot.a.PinDataManager.isPinned(e) &&
                                                            ot.a.PinDataManager.unpinLocal([e]),
                                                        this.deleteInDB(e)
                                                    );
                                                }
                                                onPinConversation(e, t) {
                                                    return new Promise((s) => {
                                                        this.doneEventQueue
                                                            ? this.doUpdatePin(e, t).then(s)
                                                            : this.pinEventQueue.push(async () => {
                                                                  const i = await this.doUpdatePin(e, t);
                                                                  s(i);
                                                              });
                                                    });
                                                }
                                                doUpdatePin(e, t) {
                                                    if (t && yt.a.isStrangerV2(e)) return Promise.resolve(null);
                                                    if (!this.data.get(e)) {
                                                        if (!t) return Promise.resolve(null);
                                                        const s = this.getEmptyConv(e);
                                                        (s.verified = !0), this.setCacheData(e, s);
                                                    }
                                                    const s = new Map();
                                                    return (
                                                        s.set('pinned', t),
                                                        this.updateFields(e, s)
                                                            .then(
                                                                (s) => (
                                                                    this.broadcastEvent(It.b.ChangePinConv, e, t), s
                                                                )
                                                            )
                                                            .catch(
                                                                (t) => (
                                                                    He.default.logCoreInfo(
                                                                        `[${this.name}] - doUpdatePin err`,
                                                                        t
                                                                    ),
                                                                    this.data.get(e)
                                                                )
                                                            )
                                                    );
                                                }
                                                onLeaveGroup(e) {
                                                    return (
                                                        He.default.logCoreInfo(`[${this.name}] - onLeaveGroup ${e}`),
                                                        this.doDeleteConversation(e).then((t) => {
                                                            this.broadcastEvent(It.b.LeaveGroup, e);
                                                        })
                                                    );
                                                }
                                                async onChangeConvLabel(e, t) {
                                                    return new Promise((s) => {
                                                        const i = this.data.get(e);
                                                        if (i && i.label === t) return s(i);
                                                        this.doneEventQueue
                                                            ? this.doUpdateConvLabel(e, t).then(s)
                                                            : this.labelEventQueue.push(async () => {
                                                                  const i = await this.doUpdateConvLabel(e, t);
                                                                  s(i);
                                                              });
                                                    });
                                                }
                                                doUpdateConvLabel(e, t) {
                                                    if (!e)
                                                        return (
                                                            He.default.logCoreInfo(
                                                                `[${this.name}] - doUpdateConvLabel with undefined ${t}`
                                                            ),
                                                            Promise.resolve(null)
                                                        );
                                                    const s = this.data.get(e);
                                                    if (s && s.label === t) return Promise.resolve(s);
                                                    if (!s) {
                                                        if (!t) return Promise.resolve(null);
                                                        const s = this.getEmptyConv(e);
                                                        (s.verified = !0), this.setCacheData(e, s);
                                                    }
                                                    const i = new Map();
                                                    return (
                                                        i.set('label', t),
                                                        this.updateFields(e, i).then(
                                                            (i) => (
                                                                this.unreadManager.onChangeConvLabel(
                                                                    e,
                                                                    null == s ? void 0 : s.label,
                                                                    t
                                                                ),
                                                                i
                                                            )
                                                        )
                                                    );
                                                }
                                                onFetchConvLabels(e) {
                                                    if (!e || !Array.isArray(e)) return;
                                                    He.default.logCoreInfo(
                                                        `[${this.name}] - onChangeConvLabel ${e.length}`
                                                    );
                                                    const t = {};
                                                    this.getAllConv().then((s) => {
                                                        for (let e = 0; e < s.length; e++) t[s[e].userId] = 1;
                                                        for (let i = 0; i < e.length; i++) {
                                                            const s = e[i].id,
                                                                n = e[i].conversations;
                                                            if (n)
                                                                for (let e = 0; e < n.length; e++) {
                                                                    const i = n[e];
                                                                    delete t[i], this.onChangeConvLabel(i, s);
                                                                }
                                                        }
                                                        for (const e in t)
                                                            Object.hasOwnProperty.call(t, e) &&
                                                                this.onChangeConvLabel(e, null);
                                                    });
                                                }
                                                onDeleteConvLabels(e) {
                                                    He.default.logCoreInfo(
                                                        `[${this.name}] - onDeleteConvLabels ${e.length}`
                                                    ),
                                                        e.forEach((e) => {
                                                            const t = e.conversations;
                                                            if (t && t.length)
                                                                for (let s = 0; s < t.length; s++)
                                                                    this.data.has(t[s]) &&
                                                                        this.onChangeConvLabel(t[s], null);
                                                        });
                                                }
                                                async onUpdateMsgId(e, t, s) {
                                                    if (!t || !s || t === s)
                                                        return Promise.reject(
                                                            '[Conv-info-manager]- call update with invalid params!'
                                                        );
                                                    const i = this.data.get(e);
                                                    let n = i || {},
                                                        r = !1;
                                                    if (!i || !i.verified) {
                                                        const t = await this.DBConvInfo.getById(e);
                                                        if (!i && !t) {
                                                            const t = await this.createEmptyConvForUser(e, 0, void 0, {
                                                                firstSmsLocalId: s,
                                                                lastSmsLocalId: s,
                                                            });
                                                            return this.setCacheData(e, t), t;
                                                        }
                                                        i && t
                                                            ? ((n = this.mergeConv(i, t)), (r = !0))
                                                            : ((n = i || t), (n.verified = !0), (r = !0));
                                                    }
                                                    return (
                                                        (n.firstSmsLocalId && n.firstSmsLocalId !== t) ||
                                                            ((r = !0), (n.firstSmsLocalId = s)),
                                                        (n.lastSmsLocalId && n.lastSmsLocalId !== t) ||
                                                            ((r = !0), (n.lastSmsLocalId = s)),
                                                        r && (this.setCacheData(e, n), this.updateInDB(n)),
                                                        n
                                                    );
                                                }
                                                async addOrUpdateConv(e, t, s, n, r, a) {
                                                    'number' == typeof t && (t = '' + t),
                                                        'number' == typeof s && (s = '' + s);
                                                    const o = this.data.get(e);
                                                    He.default.logCoreInfo(
                                                        `[${this.name}] - addOrUpdateConv ${e} ${!!o} ${s}`
                                                    );
                                                    const d = (e) => (
                                                        (!e.firstSmsLocalId || (t && t < e.firstSmsLocalId)) &&
                                                            (e.firstSmsLocalId = t),
                                                        (!e.lastSmsLocalId || (s && s > e.lastSmsLocalId)) &&
                                                            (e.lastSmsLocalId = s),
                                                        (e.cloudMore = n),
                                                        (e.respondedByMe = e.respondedByMe || r),
                                                        (e.numMsg = (e.numMsg || 0) + a),
                                                        e
                                                    );
                                                    if (o && o.verified) {
                                                        const t = d(o);
                                                        return (
                                                            this.setCacheData(e, Object(i.a)({}, t)),
                                                            this.updateInDB(t),
                                                            t
                                                        );
                                                    }
                                                    {
                                                        const o = await this.DBConvInfo.getById(e);
                                                        if (
                                                            (He.default.logCoreInfo(
                                                                `[${this.name}] - addOrUpdateConv #2 ${e} ${!!o}`
                                                            ),
                                                            o)
                                                        ) {
                                                            const t = d(o);
                                                            return (
                                                                this.setCacheData(
                                                                    e,
                                                                    Object(i.a)(
                                                                        Object(i.a)({}, t),
                                                                        {},
                                                                        { verified: !0 }
                                                                    )
                                                                ),
                                                                this.updateInDB(t),
                                                                t
                                                            );
                                                        }
                                                        {
                                                            const i = {
                                                                userId: e,
                                                                firstSmsLocalId: t,
                                                                lastSmsLocalId: s,
                                                                isGroup: e.startsWith(v.GROUPID_PREFIX),
                                                                respondedByMe: r,
                                                                numMsg: a || 2,
                                                                label: null,
                                                                pinned: 0,
                                                                verified: !0,
                                                                cloudMore: n,
                                                                outside: null,
                                                                topOut: null,
                                                                infoCheckSearch: void 0,
                                                            };
                                                            return this.setCacheData(e, i, !0), this.updateInDB(i), i;
                                                        }
                                                    }
                                                }
                                                async addIfNotExistsConv(e, t, s, i, n, r) {
                                                    const a = this.data.get(e);
                                                    if (
                                                        (He.default.logCoreInfo(
                                                            `[${this.name}] - addIfNotExistsConv #1 ${e} ${!!a} ${i}`
                                                        ),
                                                        a)
                                                    )
                                                        return !1;
                                                    const o = await this.DBConvInfo.getById(e);
                                                    if (
                                                        (He.default.logCoreInfo(
                                                            `[${this.name}] - addIfNotExistsConv #2 ${!!o}`
                                                        ),
                                                        o)
                                                    )
                                                        return !1;
                                                    {
                                                        const a = {
                                                            userId: e,
                                                            firstSmsLocalId: s,
                                                            lastSmsLocalId: i,
                                                            isGroup: t || e.startsWith(v.GROUPID_PREFIX),
                                                            respondedByMe: n,
                                                            numMsg: r || 1,
                                                            label: null,
                                                            pinned: 0,
                                                            verified: !0,
                                                            outside: null,
                                                            topOut: null,
                                                            infoCheckSearch: void 0,
                                                        };
                                                        return this.setCacheData(e, a, !0), this.updateInDB(a), !0;
                                                    }
                                                }
                                                createEmptyConvForUser(e, t, s, n) {
                                                    return (
                                                        void 0 === s && (s = v.CONV_OT_STATE.none),
                                                        new Promise((r, a) => {
                                                            this.getConvById(e)
                                                                .then((r) => {
                                                                    let a;
                                                                    if (
                                                                        (He.default.logCoreInfo(
                                                                            `[${
                                                                                this.name
                                                                            }] - createEmptyConvForUser ${e} ${!!r}`
                                                                        ),
                                                                        r)
                                                                    ) {
                                                                        const i = new Map();
                                                                        return (
                                                                            (a = r),
                                                                            s !== v.CONV_OT_STATE.none &&
                                                                                void 0 !== s &&
                                                                                ((a.outside = s), i.set('outside', s)),
                                                                            t &&
                                                                                !ot.a.PinDataManager.isPinned(
                                                                                    a.userId
                                                                                ) &&
                                                                                ot.a.PinDataManager.pin([a.userId]),
                                                                            this.updateFields(e, i),
                                                                            a
                                                                        );
                                                                    }
                                                                    return (
                                                                        (a = Object(i.a)(
                                                                            {
                                                                                userId: e,
                                                                                lastMessageTime: t
                                                                                    ? 0
                                                                                    : ii.a.getTimeNow(),
                                                                                isGroup: e.startsWith(v.GROUPID_PREFIX),
                                                                            },
                                                                            n
                                                                        )),
                                                                        s !== v.CONV_OT_STATE.none &&
                                                                            void 0 !== s &&
                                                                            (a.outside = s),
                                                                        t && ot.a.PinDataManager.pin([a.userId]),
                                                                        (a.verified = !0),
                                                                        this.setCacheData(e, a, !0),
                                                                        this.updateInDB(a),
                                                                        a
                                                                    );
                                                                })
                                                                .then((e) => {
                                                                    r(e);
                                                                })
                                                                .catch((e) => {
                                                                    He.default.logCoreError(e), a(e);
                                                                });
                                                        })
                                                    );
                                                }
                                                updateLastMsgId(e, t) {
                                                    const s = this.data.get(e);
                                                    if (s && s.lastSmsLocalId === t) return Promise.resolve(s);
                                                    const i = new Map();
                                                    return i.set('lastSmsLocalId', t), this.updateFields(e, i);
                                                }
                                                updateInfoCheckSearch(e, t, s) {
                                                    const i = this.data.get(e);
                                                    if (
                                                        i &&
                                                        i.infoCheckSearch &&
                                                        i.infoCheckSearch.lastMessageTime === t
                                                    )
                                                        return Promise.resolve(i);
                                                    const n = new Map();
                                                    return (
                                                        n.set('infoCheckSearch', { lastMessageTime: t, lastType: s }),
                                                        this.updateFields(e, n)
                                                    );
                                                }
                                                updateConvSetting(e, t) {
                                                    let s = this.data.get(e);
                                                    if (!s) {
                                                        const i = !!this.doneLoadDB;
                                                        (s = { userId: e, verified: i }),
                                                            i ||
                                                                He.default.logCoreInfo(
                                                                    `[${this.name}] - update conv setting before done load db ${e}`,
                                                                    t
                                                                );
                                                    }
                                                    He.default.shallowEqual(s.setting, t) ||
                                                        ((s.setting = t),
                                                        this.setCacheData(e, s, !0),
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - update conv setting for conv ${e}`,
                                                            t
                                                        ));
                                                }
                                                async isRespondedByMe(e) {
                                                    const t = await this.getConvById(e);
                                                    return !!t && Boolean(t.respondedByMe);
                                                }
                                                isRespondedByMeSync(e) {
                                                    const t = this.data.get(e);
                                                    return !!t && Boolean(t.respondedByMe);
                                                }
                                                isDoneLoadDB() {
                                                    return this.doneLoadDB;
                                                }
                                                getConvByIdSync(e) {
                                                    return (
                                                        'string' != typeof e &&
                                                            He.default.logCoreInfo(
                                                                `[${this.name}] - getConvByIdSync with invalid id type`,
                                                                e,
                                                                !!this.data.get(e),
                                                                !!this.data.get('' + e)
                                                            ),
                                                        this.data.get(e)
                                                    );
                                                }
                                                getConvById(e) {
                                                    return new Promise((t, s) => {
                                                        if (this.data.has(e)) return t(this.data.get(e));
                                                        this.DBConvInfo.getById(e)
                                                            .then((e) => {
                                                                t(e);
                                                            })
                                                            .catch(s);
                                                    });
                                                }
                                                getAllConvSync() {
                                                    return Array.from(this.data.values()) || [];
                                                }
                                                getAllConv() {
                                                    return new Promise((e, t) => {
                                                        if (this.doneLoadDB) {
                                                            return e(this.getAllConvSync());
                                                        }
                                                        this.fetchAllHolder ||
                                                            (this.fetchAllHolder = this.DBConvInfo.getAll()),
                                                            this.fetchAllHolder.then(e).catch(t);
                                                    });
                                                }
                                                getAllConvIdsSync() {
                                                    return Array.from(this.data.keys());
                                                }
                                                setPreloadCache(e) {
                                                    this.preloadCached = e;
                                                }
                                                onDoneSyncMobile() {
                                                    He.default.logCoreInfo(`[${this.name}] - onDoneSyncMobile`),
                                                        this.getAllConv().then((e) => {
                                                            e &&
                                                                this.previewManager.migrate(
                                                                    e.map((e) => e.userId),
                                                                    !0
                                                                );
                                                        });
                                                }
                                                setCacheData(e, t, s) {
                                                    void 0 === s && (s = !1),
                                                        this.data.set(t.userId, t),
                                                        s && Object(Pe.g)(this.name, e);
                                                }
                                                updateFields(e, t) {
                                                    return new Promise((s, n) => {
                                                        const r = this.data.get(e),
                                                            a = (r) => {
                                                                He.default.logCoreInfo(
                                                                    `[${this.name}] - updateFields #2`
                                                                );
                                                                const a = Object(i.a)({}, r);
                                                                t.forEach((e, t) => {
                                                                    a[t] = e;
                                                                }),
                                                                    this.setCacheData(e, a, !0),
                                                                    this.updateInDB(a)
                                                                        .then(() => {
                                                                            s(a);
                                                                        })
                                                                        .catch(n);
                                                            };
                                                        r
                                                            ? a(r)
                                                            : this.DBConvInfo.getById(e).then((e) => {
                                                                  e && a(e);
                                                              });
                                                    });
                                                }
                                                forkDeleteCacheAndDB(e) {
                                                    if (
                                                        (He.default.logCoreInfo(
                                                            `[${this.name}] - forkDeleteCacheAndDB ${e}`
                                                        ),
                                                        !ot.a.PinDataManager.isPinned(e))
                                                    ) {
                                                        const t = this.data.get(e);
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - forkDeleteCacheAndDB ${e} ${!!t}`
                                                        ),
                                                            this.data.delete(e),
                                                            Object(Pe.e)(this.name, e),
                                                            this.deleteInDB(e).then((s) => {
                                                                this.broadcastEvent(It.b.DeleteConv, e, t);
                                                            });
                                                    }
                                                }
                                                broadcastEvent(e, t, s) {
                                                    void 0 === t && (t = ''), this.dispatchEvent(new It.a(e, t, s));
                                                }
                                                shouldSignalUpdate(e, t) {
                                                    return (
                                                        ot.a.PinDataManager.isPinned(e.userId) !==
                                                            ot.a.PinDataManager.isPinned(t.userId) ||
                                                        e.label !== t.label ||
                                                        e.respondedByMe !== t.respondedByMe
                                                    );
                                                }
                                                cleanConversation(e) {
                                                    return (
                                                        Object.keys(e).forEach((t) => {
                                                            li.includes(t) || delete e[t];
                                                        }),
                                                        e
                                                    );
                                                }
                                                getEmptyConv(e) {
                                                    return {
                                                        userId: e,
                                                        isGroup: e.startsWith(v.GROUPID_PREFIX),
                                                        numMsg: 0,
                                                        respondedByMe: !1,
                                                        pinned: 0,
                                                        label: null,
                                                        outside: null,
                                                        infoCheckSearch: null,
                                                        topOut: null,
                                                    };
                                                }
                                                updateInDB(e) {
                                                    const t = this.cleanConversation(Object(i.a)({}, e));
                                                    return this.DBConvInfo.addOrUpdate(t).catch((e) => {
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - updateInDB got error ${e}`
                                                        );
                                                    });
                                                }
                                                deleteInDB(e) {
                                                    return this.DBConvInfo.remove(e).catch((e) => {
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - deleteInDB got error ${e}`
                                                        );
                                                    });
                                                }
                                            })
                                        ) || ei)
                                ) || ei)
                        ) || ei)
                );
                var ci = s('NSWB'),
                    hi = s('1Abx'),
                    ui = s('XEtq'),
                    gi = s('ZRfj'),
                    mi = s('EqtE'),
                    pi = s('oH3T'),
                    fi = s('13iL'),
                    vi = s('mea/'),
                    bi = s('MPLC'),
                    yi = s('WK05');
                var Ii,
                    _i = s('dwTj'),
                    Mi = s('RVT8'),
                    Ci = s('hkvp'),
                    Ti = s('6tnf'),
                    Oi = s('sg3c'),
                    Ei = s('4pY7'),
                    Si = s('ofhN'),
                    wi = s('D8f9');
                const Di = '9999999999999999',
                    Li = 'zum_m',
                    Fi = '1.0.0',
                    Ri = !1,
                    Ai = 'total',
                    Pi = (e) => ({
                        convId: e,
                        smsUnreadCount: 0,
                        smsUnreadNotCount: 0,
                        mentionUnreadCount: 0,
                        strangerUnreadCount: 0,
                        lastProcessMsgId: '',
                        lastSeenReactId: '',
                        unreadMark: void 0,
                    }),
                    Ni = { CALL_INIT: !1 },
                    ji = 1,
                    Ui = 2;
                Object(pt.b)(Mi.b)(
                    (Ii =
                        (function (e, t) {
                            return d.ModuleContainer.inject(Ci.b)(e, void 0, 0);
                        })(
                            (Ii =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (Ii =
                                        Reflect.metadata('design:paramtypes', [
                                            void 0 === It.IReactiveDB ? Object : It.IReactiveDB,
                                        ])(
                                            (Ii = class extends G.b {
                                                constructor(e) {
                                                    super(),
                                                        (this.DBConvUnread = e),
                                                        (this.name = void 0),
                                                        (this.key = void 0),
                                                        (this.didInit = void 0),
                                                        (this.doneLoadDB = void 0),
                                                        (this.data = void 0),
                                                        (this.pendingMessage = void 0),
                                                        (this.previewMsgs = void 0),
                                                        (this.pendingClearUnread = void 0),
                                                        (this.fetchAllHolder = void 0),
                                                        (this.total = void 0),
                                                        (this.loadState = Ni),
                                                        (this.isLoadDBStarted = void 0),
                                                        (this.updateTotalQueue = void 0),
                                                        (this._logger = void 0),
                                                        (this.setupQueue = () =>
                                                            Object(ai.queue)(async (e) => {
                                                                this.doneLoadDB &&
                                                                    (await this.calculateComputeUnreadCount(e));
                                                            }, 1)),
                                                        (this._getDeletedMsgByTTLItem = (e, t) => {
                                                            if (t)
                                                                return t.find((t) =>
                                                                    e.msgId
                                                                        ? e.msgId === t.msgId
                                                                        : e.cliMsgId === t.cliMsgId
                                                                );
                                                        }),
                                                        (this.name = Mi.a),
                                                        (this.key = 'convId'),
                                                        (this.didInit = !1),
                                                        (this.doneLoadDB = !1),
                                                        (this.data = new Map()),
                                                        (this.isLoadDBStarted = !1),
                                                        (this.pendingMessage = new Map()),
                                                        (this.previewMsgs = []),
                                                        (this.pendingClearUnread = new Map()),
                                                        (this.fetchAllHolder = null),
                                                        (this.total = this.getEmptyTotal()),
                                                        (this.updateTotalQueue = this.setupQueue());
                                                }
                                                init() {
                                                    this.didInit ||
                                                        (this.logger.zsymb(3, 9683, 3e4, 'call init unread'),
                                                        (this.didInit = !0),
                                                        this.addListener(),
                                                        this.onState('CALL_INIT'));
                                                }
                                                onState(e) {
                                                    this.loadState[e] = !0;
                                                    const t = Object.values(this.loadState).every((e) => !0 === e);
                                                    t &&
                                                        !this.isLoadDBStarted &&
                                                        (this.logger.zsymb(
                                                            3,
                                                            9683,
                                                            30001,
                                                            'done all state, ready to load db...'
                                                        ),
                                                        this.loadData());
                                                }
                                                get logger() {
                                                    return (
                                                        this._logger ||
                                                            (this._logger = d.ModuleContainer.resolve(
                                                                N.ZLoggerFactory
                                                            ).createZLogger(kt.b.conversation, [kt.b.unread])),
                                                        this._logger
                                                    );
                                                }
                                                getEmptyTotal() {
                                                    return {
                                                        convId: 'total',
                                                        smsUnreadCount: 0,
                                                        smsUnreadNotCount: 0,
                                                        mentionUnreadCount: 0,
                                                        strangerUnreadCount: 0,
                                                        lastProcessMsgId: '0',
                                                        lastSeenReactId: '0',
                                                        unreadMark: 0,
                                                        smsUnreadNomute: 0,
                                                    };
                                                }
                                                loadData() {
                                                    const e = u.a.getInstance().getItemForCurrentUser(Li);
                                                    if (e === Fi)
                                                        (this.isLoadDBStarted = !0),
                                                            this.logger.zsymb(
                                                                3,
                                                                9683,
                                                                30002,
                                                                'start load unread {}',
                                                                e
                                                            ),
                                                            this.fetchAllHolder ||
                                                                (this.fetchAllHolder = this.DBConvUnread.getAll()),
                                                            this.fetchAllHolder.then((e) => {
                                                                this.onLoadUnreadFromDBV2(Ui, e),
                                                                    this.doDoneLoadDBTask();
                                                            });
                                                    else {
                                                        ot.a.ConvInfoDataManager.isDoneLoadDB() &&
                                                            ((this.isLoadDBStarted = !0), this.migrateV2());
                                                    }
                                                }
                                                async migrateV2() {
                                                    const e = u.a.getInstance(),
                                                        t = e.getItemForCurrentUser(Li) === Fi;
                                                    if (
                                                        (this.logger.zsymb(3, 9683, 30003, 'call migrate unread {}', t),
                                                        t)
                                                    )
                                                        return;
                                                    const s = ot.a.ConvInfoDataManager.getAllConvSync(),
                                                        i = [];
                                                    s.forEach((e) => {
                                                        const t = e.smsUnreadCount || 0,
                                                            s = e.smsUnreadNotCount || 0,
                                                            n = e.mentionUnreadCount || 0,
                                                            r = e.unreadMark || null;
                                                        if (!(e && e.userId && (t || s || n || r))) return;
                                                        const a = {
                                                            convId: e.userId,
                                                            smsUnreadCount: t,
                                                            smsUnreadNotCount: s,
                                                            strangerUnreadCount: 0,
                                                            mentionUnreadCount: n,
                                                            lastProcessMsgId: e.lastMessageIdFromServerv2 || '0',
                                                            lastSeenReactId: e.lastSeenReactId || '0',
                                                            unreadMark: r,
                                                        };
                                                        i.push(a);
                                                    }),
                                                        this.onLoadUnreadFromDBV2(ji, i),
                                                        this.doDoneLoadDBTask(),
                                                        this.logger.zsymb(
                                                            3,
                                                            9683,
                                                            30004,
                                                            'done migrate unread {}',
                                                            i.length
                                                        ),
                                                        e.setItemForCurrentUser(Li, Fi);
                                                }
                                                doDoneLoadDBTask() {
                                                    const e = Array.from(this.data.values());
                                                    (this.doneLoadDB = !0),
                                                        this.broadcastEvent(It.b.DoneLoadDB, 'total', e),
                                                        this.logger.zsymb(
                                                            3,
                                                            9683,
                                                            30005,
                                                            'done load unread {}',
                                                            e.length
                                                        ),
                                                        d.ModuleContainer.resolve(Ei.a).onLoadUnreads(e),
                                                        setTimeout(() => {
                                                            this.unreadChanged('init');
                                                        }, 200);
                                                }
                                                addListener() {
                                                    ot.a.MuteDataManager.addEventListener(It.b.MuteChanged, (e) => {
                                                        this.onMuteConversation(e.convId, !!e.payload);
                                                    }),
                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                            It.b.LeaveGroup,
                                                            (e) => {
                                                                this.doDeleteUnread(e.convId);
                                                            }
                                                        ),
                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                            It.b.DeleteConv,
                                                            (e) => {
                                                                this.doDeleteUnread(e.convId);
                                                            }
                                                        ),
                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                            It.b.EmptyConv,
                                                            (e) => {
                                                                this.doDeleteUnread(e.convId);
                                                            }
                                                        ),
                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                            It.b.DoneLoadDB,
                                                            (e) => {
                                                                this.onState('CALL_INIT');
                                                            }
                                                        ),
                                                        ot.a.ArchivedChatManager.addEventListener(
                                                            It.b.UpdateListArchivedChat,
                                                            (e) => {
                                                                this.onArchivedChat(e.convId);
                                                            }
                                                        ),
                                                        Je.default.subscribe((e, t) => {
                                                            if (
                                                                null != t &&
                                                                t.length &&
                                                                e === Ze.ConversationListActions.CLEAR_MARK_AS_UNREAD
                                                            )
                                                                t.forEach((e) => {
                                                                    this.updateUnreadMark(e, null);
                                                                });
                                                            else if (
                                                                null != t &&
                                                                t.length &&
                                                                e === Ze.GeneralActions.UPDATE_HIDDEN_CHAT
                                                            )
                                                                for (let s = 0; s < t.length; s++) {
                                                                    const e = t[s];
                                                                    this.onHiddenConversation(e.uid, e.isHide);
                                                                }
                                                        });
                                                }
                                                getItem(e, t) {
                                                    if (e.key === Ai) return this.total;
                                                    return this.data.get(e.key);
                                                }
                                                getList(e, t) {
                                                    return Array.from(this.data.keys());
                                                }
                                                onGetItemFailure(e) {}
                                                onGetListFailure(e) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                onMuteConversation(e, t) {
                                                    const s = this.data.get(e);
                                                    !s ||
                                                        (s.smsUnreadCount < 1 && !s.unreadMark) ||
                                                        _t.a.isThreadHidden(e) ||
                                                        yt.a.isOAType({ userId: e }) ||
                                                        (this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30006,
                                                            'onMuteConversation:',
                                                            e,
                                                            t,
                                                            s.smsUnreadCount,
                                                            s.smsUnreadNotCount
                                                        ),
                                                        this.unreadChanged(e));
                                                }
                                                onHiddenConversation(e, t) {
                                                    const s = this.data.get(e);
                                                    !s ||
                                                        (s.smsUnreadCount < 1 && !s.unreadMark) ||
                                                        le.default.isMuted(e) ||
                                                        yt.a.isOAType({ userId: e }) ||
                                                        (this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30007,
                                                            'onHiddenConversation: ',
                                                            e,
                                                            t,
                                                            s.smsUnreadCount,
                                                            s.smsUnreadNotCount
                                                        ),
                                                        this.unreadChanged(e));
                                                }
                                                onArchivedChat(e) {
                                                    const t = this.data.get(e);
                                                    !t ||
                                                        (t.smsUnreadCount < 1 && !t.unreadMark) ||
                                                        le.default.isMuted(e) ||
                                                        yt.a.isOAType({ userId: e }) ||
                                                        this.unreadChanged(e);
                                                }
                                                onChangeConvLabel(e, t, s) {
                                                    const i = this.data.get(e);
                                                    t === s ||
                                                        !i ||
                                                        i.smsUnreadCount < 1 ||
                                                        le.default.isMuted(e) ||
                                                        this.unreadChanged(e);
                                                }
                                                onReceivePreviewMessages(e) {
                                                    e.length > 0 && (this.previewMsgs = [...this.previewMsgs, ...e]);
                                                }
                                                onReceiveNewMessagesOld(e, t, s) {
                                                    if (!s || !t) return;
                                                    const i = this.data.get(e);
                                                    if (i)
                                                        this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30008,
                                                            'receive msg',
                                                            e,
                                                            i.lastProcessMsgId,
                                                            s
                                                        ),
                                                            (!i.lastProcessMsgId || i.lastProcessMsgId < t) &&
                                                                (this.handleNewMessages(e, s, t),
                                                                Object(Pe.g)(this.name, e));
                                                    else {
                                                        const t = this.pendingMessage.get(e),
                                                            i = t ? s.concat(t) : s;
                                                        this.pendingMessage.set(e, i),
                                                            i.length === s.length &&
                                                                this.DBConvUnread.getById(e).then((t) => {
                                                                    if (!t) {
                                                                        const t = this.pendingMessage.get(e);
                                                                        if (t) {
                                                                            const s = t.filter(
                                                                                    (e, t, s) => s.indexOf(e) === t
                                                                                ),
                                                                                i = Ut.b.getLastMessageInList(s);
                                                                            if (!i) return;
                                                                            this.pendingMessage.delete(e),
                                                                                this.handleNewMessages(e, s, i.msgId),
                                                                                Object(Pe.g)(this.name, e);
                                                                        }
                                                                    }
                                                                });
                                                    }
                                                }
                                                onReceiveNewMessages(e, t, s) {
                                                    if (!s || !s.length || !t) return;
                                                    const i = this.data.get(e);
                                                    if (this.doneLoadDB) {
                                                        if (!i || !i.lastProcessMsgId || i.lastProcessMsgId < t) {
                                                            const n = s.map((e) => e.msgId).join('-');
                                                            this.logger.zsymb(
                                                                0,
                                                                9683,
                                                                30009,
                                                                `onReceiveNewMessages: ${
                                                                    null == i ? void 0 : i.lastProcessMsgId
                                                                } ${e} ${t} ${n}`
                                                            ),
                                                                this.handleNewMessages(e, s, t),
                                                                Object(Pe.g)(this.name, e);
                                                        }
                                                    } else {
                                                        const t = this.pendingMessage.get(e),
                                                            i = t ? s.concat(t) : s;
                                                        this.pendingMessage.set(e, i);
                                                    }
                                                }
                                                onDoneOffLineMessages() {
                                                    this.logger.zsymb(0, 9683, 30010, 'ph7 done offline'),
                                                        ns.b.onDoneEntry(ns.a.FIRST_FETCH),
                                                        this.previewMsgs.length > 0 &&
                                                            setTimeout(() => {
                                                                this.handlePreviewMsgs();
                                                            }, 0);
                                                }
                                                doDeleteUnread(e) {
                                                    if (!e) return;
                                                    const t = this.data.get(e);
                                                    this.logger.zsymb(0, 9683, 30011, `doDeleteUnread ${!!t}`),
                                                        this.data.delete(e) &&
                                                            (Object(Pe.e)(this.name, e), this.unreadChanged(e)),
                                                        this.deleteInDB(e);
                                                }
                                                onReceiveDeleteConvMsg(e, t) {
                                                    if (this.doneLoadDB) {
                                                        const s = this.safeGetUnreadCached(e);
                                                        if (0 === s.smsUnreadCount) return;
                                                        if (t >= +s.lastProcessMsgId) {
                                                            const t = Object(i.a)(
                                                                Object(i.a)({}, s),
                                                                {},
                                                                { smsUnreadCount: 0, smsUnreadNotCount: 0 }
                                                            );
                                                            this.data.set(t.convId, t),
                                                                Object(Pe.g)(this.name, e),
                                                                this.unreadChanged(e);
                                                        }
                                                    } else this.pendingClearUnread.set(e, t);
                                                }
                                                onClearUnreadConversations(e) {
                                                    if (!e || e.length < 0) return;
                                                    let t = [];
                                                    for (let s = 0; s < e.length; s++) {
                                                        const i = e[s],
                                                            n = this.data.get(i.userId) || Pi(i.userId);
                                                        this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30012,
                                                            'onClearUnreadConversations',
                                                            !!i,
                                                            null == n ? void 0 : n.smsUnreadCount
                                                        ),
                                                            i &&
                                                                (t.push(i.userId),
                                                                n.smsUnreadCount > 0 &&
                                                                    le.default
                                                                        .getLastMessageFrom(
                                                                            i.userId,
                                                                            i.lastSmsLocalId,
                                                                            Di,
                                                                            n.smsUnreadCount,
                                                                            !0
                                                                        )
                                                                        .then((e) => {
                                                                            let t = {};
                                                                            if (e && e.length > 0)
                                                                                for (let i = 0; i < e.length; i++) {
                                                                                    let s = e[i];
                                                                                    He.default.validMessageFromOther(
                                                                                        s
                                                                                    ) && (t[s.msgId] = s);
                                                                                }
                                                                            const s = {
                                                                                userId: i.userId,
                                                                                lastSmsLocalId: i.lastSmsLocalId,
                                                                                smsUnreadCount: n.smsUnreadCount,
                                                                            };
                                                                            this.clearUnreadConversation(s, t),
                                                                                this.resetUnreadToZero(
                                                                                    i.userId,
                                                                                    n.lastProcessMsgId
                                                                                );
                                                                        })
                                                                        .catch((e) => {
                                                                            this.logger.zsymb(
                                                                                21,
                                                                                9683,
                                                                                30013,
                                                                                'clear unread conv failure {}',
                                                                                e
                                                                            );
                                                                        }),
                                                                yi.a.clearUnreadIfExist({
                                                                    userId: i.userId,
                                                                    lastSeenReactId: n.lastSeenReactId,
                                                                }));
                                                    }
                                                    mi.a.clearUnreadMark(t, e.length);
                                                }
                                                onReadConversation(e, t) {
                                                    var s;
                                                    if (We.default.mark_unread.enable && !mi.a.canSendUnread(e))
                                                        return (
                                                            this.logger.zsymb(
                                                                0,
                                                                9683,
                                                                30014,
                                                                `[read-message] dont clear ${e}`,
                                                                We.default.mark_unread.enable,
                                                                mi.a.canSendUnread(e)
                                                            ),
                                                            !1
                                                        );
                                                    mi.a.getUnreadMark(e) &&
                                                        (e.startsWith(v.GROUPID_PREFIX)
                                                            ? vt.e.logAction(2160024)
                                                            : vt.e.logAction(2160023),
                                                        vt.e.logAction(2160022));
                                                    const n = this.data.get(e) || Pi(e),
                                                        r = n.smsUnreadCount;
                                                    if (!t && !r) {
                                                        this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30015,
                                                            `[read-message] dont clear ${e} unread `,
                                                            r,
                                                            t
                                                        );
                                                        const s = yi.a.sendClearUnread(e, n.lastSeenReactId);
                                                        return (
                                                            mi.a.clearUnreadMark([e], 0),
                                                            s != n.lastSeenReactId &&
                                                                ((n.lastSeenReactId = s),
                                                                this.data.set(e, Object(i.a)({}, n)),
                                                                Object(Pe.g)(this.name, e),
                                                                this.updateInDB(n)),
                                                            !1
                                                        );
                                                    }
                                                    const a = this.acquireConvManager().getConvByIdSync(e);
                                                    if (!a)
                                                        return (
                                                            this.logger.zsymb(
                                                                0,
                                                                9683,
                                                                30016,
                                                                `[read-message] convinfo not exists ${e}`
                                                            ),
                                                            !1
                                                        );
                                                    const o = [],
                                                        d = {},
                                                        l = a.lastSmsLocalId
                                                            ? a.lastSmsLocalId.toString().split('_')[0]
                                                            : '';
                                                    let c = !1;
                                                    const h =
                                                        null === (s = bi.b.messageCache) || void 0 === s
                                                            ? void 0
                                                            : s.getLast({ userId: e }, r);
                                                    for (let i = h.length - 1; i > -1; i--) {
                                                        let e = h[i];
                                                        if (
                                                            He.default.validMessageFromOther(e) &&
                                                            e.zglobalMsgId &&
                                                            -1 != e.zglobalMsgId &&
                                                            !o.includes(e.zglobalMsgId) &&
                                                            (o.push(e.zglobalMsgId),
                                                            (d[e.zglobalMsgId] = e),
                                                            e.zglobalMsgId == l && (c = !0),
                                                            o.length == r)
                                                        )
                                                            break;
                                                    }
                                                    const u = {
                                                        userId: e,
                                                        lastSmsLocalId: a.lastSmsLocalId,
                                                        smsUnreadCount: r,
                                                    };
                                                    var g;
                                                    !l || c || d[l]
                                                        ? this.clearUnreadConversation(u, d)
                                                        : (this.logger.zsymb(
                                                              0,
                                                              9683,
                                                              30017,
                                                              `[read-message] append lastMsgIdInConv ${l} ${
                                                                  Object.keys(d).length
                                                              }`
                                                          ),
                                                          null === (g = bi.b.messageCache) ||
                                                              void 0 === g ||
                                                              g
                                                                  .getMessageByMsgIdAsync(l)
                                                                  .then((e) => {
                                                                      (d[l] = Object(i.a)({}, e)),
                                                                          this.clearUnreadConversation(u, d);
                                                                  })
                                                                  .catch((e) => {
                                                                      this.clearUnreadConversation(u, d);
                                                                  }));
                                                    return (
                                                        mi.a.clearUnreadMark([e], 0),
                                                        (n.lastSeenReactId = yi.a.sendClearUnread(
                                                            e,
                                                            n.lastSeenReactId
                                                        )),
                                                        this.resetUnreadToZero(e, n.lastProcessMsgId),
                                                        !0
                                                    );
                                                }
                                                getUnreadByConvIdSync(e) {
                                                    return this.data.get(e);
                                                }
                                                getUnreadByConvId(e) {
                                                    return new Promise((t, s) => {
                                                        if (this.data.has(e)) return t(this.getUnreadByConvIdSync(e));
                                                        this.DBConvUnread.getById(e)
                                                            .then((e) => t(e))
                                                            .catch(s);
                                                    });
                                                }
                                                getAllUnreadsSync() {
                                                    return Array.from(this.data.values());
                                                }
                                                getAllUnreads() {
                                                    return new Promise((e, t) => {
                                                        if (this.doneLoadDB) return e(this.getAllUnreadsSync());
                                                        this.fetchAllHolder ||
                                                            (this.fetchAllHolder = this.DBConvUnread.getAll()),
                                                            this.fetchAllHolder.then((t) => e(t)).catch(t);
                                                    });
                                                }
                                                resetUnreadToZero(e, t) {
                                                    return this.getUnreadByConvId(e).then((s) => {
                                                        if (
                                                            (pi.b.onClearUnreadConv(e),
                                                            !s || (!s.smsUnreadCount && !s.smsUnreadNotCount))
                                                        )
                                                            return !1;
                                                        this.logger.zsymb(
                                                            3,
                                                            9683,
                                                            30018,
                                                            'resetUnreadToZero {} {} {}',
                                                            e,
                                                            t,
                                                            s.smsUnreadCount
                                                        );
                                                        const i = {
                                                            convId: e,
                                                            smsUnreadCount: 0,
                                                            mentionUnreadCount: 0,
                                                            strangerUnreadCount: 0,
                                                            smsUnreadNotCount: 0,
                                                            lastProcessMsgId: t,
                                                            lastSeenReactId: s.lastSeenReactId || '',
                                                            unreadMark: s.unreadMark,
                                                        };
                                                        return (
                                                            s.smsUnreadCount > 0 && gi.a.notiMainClearunread(e),
                                                            this.forkUpdateCacheAndDB(i)
                                                                .then(
                                                                    (t) => (this.broadcastEvent(It.b.ReadConv, e), !0)
                                                                )
                                                                .catch(
                                                                    (t) => (
                                                                        this.logger.zsymb(
                                                                            21,
                                                                            9683,
                                                                            30019,
                                                                            'resetUnreadToZero failure {} {}',
                                                                            e,
                                                                            t
                                                                        ),
                                                                        !1
                                                                    )
                                                                )
                                                        );
                                                    });
                                                }
                                                isUnreadMessage(e) {
                                                    const { message: t, convId: s, lastProcessMsgId: i } = e,
                                                        n = Ut.b.isMyMessage(t),
                                                        r = hi.b.isRead({
                                                            userId: s,
                                                            actionId: t.actionId,
                                                            msgId: t.msgId,
                                                            msgSendDttm: t.ts || t.serverTime || t.sendDttm,
                                                            msgLocalId: void 0,
                                                            e2eeStatus: Object(Oi.f)(t),
                                                        }),
                                                        a = !t.msgId || !i || t.msgId <= i;
                                                    return !r && a && !n;
                                                }
                                                _updateTTLUnreadCount(e, t, s) {
                                                    const i = this.data.get(e) || null;
                                                    if (
                                                        (this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30020,
                                                            '_updateTTLUnreadCount',
                                                            e,
                                                            null == i ? void 0 : i.smsUnreadCount
                                                        ),
                                                        i && i.smsUnreadCount === t && i.smsUnreadNotCount === s)
                                                    )
                                                        return;
                                                    let n = this.safeGetUnreadCached(e);
                                                    (n.smsUnreadCount = t),
                                                        (n.smsUnreadNotCount = s),
                                                        this.forkUpdateCacheAndDB(n);
                                                }
                                                updateUnreadTTLConversation(e, t, s) {
                                                    const i = this.getUnreadByConvIdSync(e);
                                                    if (i) {
                                                        let n = i.smsUnreadCount,
                                                            r = i.smsUnreadNotCount;
                                                        t
                                                            .filter(
                                                                (t) =>
                                                                    t.ttlType === wi.a.Message &&
                                                                    this.isUnreadMessage({
                                                                        message: this._getDeletedMsgByTTLItem(t, s),
                                                                        convId: e,
                                                                        lastProcessMsgId: i.lastProcessMsgId,
                                                                    })
                                                            )
                                                            .forEach((e) => {
                                                                const t = this._getDeletedMsgByTTLItem(e, s),
                                                                    i = He.default.getDataReminder(t),
                                                                    a = Ut.b.isMyMessage(t);
                                                                i && a && (t.idTo === We.default.sendToMeId || a)
                                                                    ? ((r -= 1), (n -= 1))
                                                                    : (n -= 1);
                                                            }),
                                                            this._updateTTLUnreadCount(
                                                                e,
                                                                Math.max(n, 0),
                                                                Math.max(r, 0)
                                                            );
                                                    }
                                                }
                                                updateUnreadCount(e, t) {
                                                    const s = this.data.get(e) || null;
                                                    if (
                                                        (this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30021,
                                                            'updateUnreadCount',
                                                            e,
                                                            null == s ? void 0 : s.smsUnreadCount
                                                        ),
                                                        s && s.smsUnreadCount === t)
                                                    )
                                                        return;
                                                    let i = this.safeGetUnreadCached(e);
                                                    (i.smsUnreadCount = t), this.forkUpdateCacheAndDB(i);
                                                }
                                                updateMentionCount(e, t) {
                                                    this.logger.zsymb(0, 9683, 30022, 'updateMentionCount', e, t);
                                                    let s = this.safeGetUnreadCached(e);
                                                    (s.mentionUnreadCount = t),
                                                        this.forkUpdateCacheAndDB(s, !1),
                                                        Ti.a.updateUnreadMentions(this.getTotalMentionCount());
                                                }
                                                updateLastSeenReactId(e, t) {
                                                    let s = this.safeGetUnreadCached(e);
                                                    (s.lastSeenReactId = t), this.forkUpdateCacheAndDB(s, !1);
                                                }
                                                updateUnreadMark(e, t) {
                                                    let s = this.safeGetUnreadCached(e);
                                                    s.unreadMark || (s.unreadMark = null),
                                                        t || (t = null),
                                                        t !== s.unreadMark &&
                                                            ((this.total.unreadMark += t ? 1 : -1),
                                                            Object(Pe.g)(this.name, Ai),
                                                            (s.unreadMark = t),
                                                            this.forkUpdateCacheAndDB(s));
                                                }
                                                shouldClearUnread(e, t) {
                                                    const s = this.data.get(e),
                                                        i = null == s ? void 0 : s.smsUnreadCount,
                                                        n = null == s ? void 0 : s.lastProcessMsgId;
                                                    return !!i && !!(n && t && +t >= +n);
                                                }
                                                async forkUpdateCacheAndDB(e, t) {
                                                    void 0 === t && (t = !0),
                                                        this.data.set(e.convId, e),
                                                        Object(Pe.g)(this.name, e.convId),
                                                        t &&
                                                            this.isValidConvKey(e.convId) &&
                                                            this.unreadChanged(e.convId),
                                                        await this.updateInDB(e);
                                                }
                                                safeGetUnreadCached(e) {
                                                    const t = this.data.get(e);
                                                    let s;
                                                    return (
                                                        (s = t
                                                            ? Object(i.a)({}, t)
                                                            : {
                                                                  convId: e,
                                                                  smsUnreadCount: 0,
                                                                  smsUnreadNotCount: 0,
                                                                  mentionUnreadCount: 0,
                                                                  strangerUnreadCount: 0,
                                                                  lastProcessMsgId: '0',
                                                                  lastSeenReactId: '0',
                                                                  unreadMark: null,
                                                              }),
                                                        s
                                                    );
                                                }
                                                getTotalMentionCount() {
                                                    let e = 0;
                                                    return (
                                                        this.data.forEach((t) => {
                                                            e += t.mentionUnreadCount;
                                                        }),
                                                        e
                                                    );
                                                }
                                                isValidConvKey(e) {
                                                    return (
                                                        !(!e || e.length < 3) &&
                                                        'null' != e &&
                                                        e !== v.CONV_FILTER.STRANGER &&
                                                        e !== Ai
                                                    );
                                                }
                                                unreadChanged(e) {
                                                    'null' != e &&
                                                        (this.updateTotalQueue.remove((e) => !0),
                                                        this.updateTotalQueue.push(e));
                                                }
                                                async calculateComputeUnreadCount(e) {
                                                    try {
                                                        var t;
                                                        const i = this.getEmptyTotal(),
                                                            n =
                                                                (null === (t = this.data.get(v.CONV_FILTER.STRANGER)) ||
                                                                void 0 === t
                                                                    ? void 0
                                                                    : t.smsUnreadCount) || 0;
                                                        let r = 0,
                                                            a = 0;
                                                        const o = new Map(),
                                                            l = new Map(),
                                                            c = new Map();
                                                        ot.a.LabelDataManager.getAllLabelIds().map((e) => {
                                                            const t = '' + e;
                                                            c.set(t, t);
                                                        });
                                                        const h = new Map(),
                                                            g = [];
                                                        for (let e of Array.from(this.data.keys())) {
                                                            if (!this.isValidConvKey(e)) continue;
                                                            const t = this.data.get(e);
                                                            if (!t || _t.a.isThreadHidden(e)) continue;
                                                            const s =
                                                                Boolean(t.smsUnreadCount) ||
                                                                Boolean(t.smsUnreadNotCount) ||
                                                                Boolean(t.unreadMark);
                                                            if (s)
                                                                if (
                                                                    s &&
                                                                    Bt.a.isArchivedChat(e) &&
                                                                    !le.default.isMuted(e)
                                                                ) {
                                                                    let t = d.ModuleContainer.resolve(
                                                                        ut.h
                                                                    ).getPreviewByIDSync(e);
                                                                    t &&
                                                                        a < parseInt(t.messageTime) &&
                                                                        (a = parseInt(t.messageTime) || 0);
                                                                } else h.set(e, t), g.push(e);
                                                        }
                                                        Ri;
                                                        if (
                                                            ((await yt.a.verifyOATypeAsync(g)).forEach((e) => {
                                                                let { cid: t, isOA: s } = e;
                                                                const n = h.get(t),
                                                                    a = n.convId,
                                                                    d = this.acquireConvManager().getConvByIdSync(a),
                                                                    c = le.default.isMuted(a);
                                                                const u = n.smsUnreadCount || 0,
                                                                    g = n.smsUnreadNotCount || 0;
                                                                if (
                                                                    ((i.smsUnreadCount += u),
                                                                    d &&
                                                                        !c &&
                                                                        !s &&
                                                                        d.userId !==
                                                                            v.FAKE_CONVERSATION_ID.FRIEND_CENTER)
                                                                ) {
                                                                    const e = Math.max(u - g, 0);
                                                                    i.smsUnreadNomute += e;
                                                                    const t = d.label ? '' + d.label : '',
                                                                        s = '0' == t || !!t;
                                                                    if (
                                                                        (s &&
                                                                            (o.has(t)
                                                                                ? o.set(t, o.get(t) + e)
                                                                                : o.set(t, e)),
                                                                        n.unreadMark)
                                                                    ) {
                                                                        const e = i.unreadMark || 0;
                                                                        (i.unreadMark = e + 1),
                                                                            s &&
                                                                                (l.has(t)
                                                                                    ? l.set(t, l.get(t) + 1)
                                                                                    : l.set(t, 1));
                                                                    }
                                                                    e > 0 && this.isInStrangerBox(a) && (r += e);
                                                                }
                                                            }),
                                                            this.total.smsUnreadCount !== i.smsUnreadCount ||
                                                                this.total.smsUnreadNomute !== i.smsUnreadNomute ||
                                                                this.total.unreadMark !== i.unreadMark)
                                                        ) {
                                                            var s;
                                                            const t =
                                                                    null === (s = this.data.get(e)) || void 0 === s
                                                                        ? void 0
                                                                        : s.smsUnreadCount,
                                                                n = le.default.isMuted(e);
                                                            (this.total = i),
                                                                this.dispatchEvent(
                                                                    new It.a(It.b.ChangeUnreadCount, Ai, {
                                                                        unreadNoMute: i.smsUnreadNomute,
                                                                        totalUnread: i.smsUnreadCount,
                                                                        convId: e,
                                                                        currentUnread: t,
                                                                        curentUnreadNoMute: n ? 0 : t,
                                                                    })
                                                                ),
                                                                this.data.set(Ai, i),
                                                                Object(Pe.g)(this.name, Ai);
                                                        }
                                                        const m = d.ModuleContainer.resolve(
                                                                Qt.b
                                                            ).isShowUnreadArchivedChat(),
                                                            p =
                                                                u.a
                                                                    .getInstance()
                                                                    .getItemForCurrentUser(
                                                                        'last_time_clear_archive_chat'
                                                                    ) || '0',
                                                            f = a > parseInt(p);
                                                        if (
                                                            (f !== m &&
                                                                this.dispatchEvent(
                                                                    new It.a(It.b.ChangeUnreadArchiveChat, Ai, {
                                                                        hasUnreadArchivedChat: f,
                                                                    })
                                                                ),
                                                            n !== r)
                                                        ) {
                                                            const e = this.safeGetUnreadCached('');
                                                            (e.smsUnreadCount = r),
                                                                (e.convId = v.CONV_FILTER.STRANGER),
                                                                this.data.set(v.CONV_FILTER.STRANGER, e),
                                                                Object(Pe.g)(this.name, v.CONV_FILTER.STRANGER);
                                                        }
                                                        for (let e of Array.from(o.keys())) {
                                                            const t = this.safeGetUnreadCached('');
                                                            (t.smsUnreadCount = o.get(e)),
                                                                (t.unreadMark = l.get(e)),
                                                                this.data.set(e, t),
                                                                c.delete(e),
                                                                Object(Pe.g)(this.name, e);
                                                        }
                                                        for (let e of Array.from(c.keys()))
                                                            this.data.delete(e) && Object(Pe.g)(this.name, e);
                                                    } catch (i) {
                                                        this.logger.zsymb(
                                                            21,
                                                            9683,
                                                            30027,
                                                            ' unread err - contact phucnh7 please!!! {}',
                                                            i
                                                        );
                                                    }
                                                }
                                                acquireConvManager() {
                                                    return ot.a.ConvInfoDataManager;
                                                }
                                                onLoadUnreadFromDBV2(e, t) {
                                                    if (
                                                        (this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30029,
                                                            'onLoadUnreadFromDB',
                                                            t.length
                                                        ),
                                                        t.length < 1)
                                                    )
                                                        return;
                                                    const s = new Date().getTime().toString();
                                                    Object(Pe.i)(s);
                                                    for (let i = 0; i < t.length; i++) {
                                                        const n = t[i];
                                                        if (
                                                            (hi.b.isRead({
                                                                userId: n.convId,
                                                                msgId: +n.lastProcessMsgId,
                                                                e2eeStatus: void 0,
                                                                actionId: void 0,
                                                                msgSendDttm: void 0,
                                                                msgLocalId: void 0,
                                                            }) &&
                                                                (n.smsUnreadCount || n.smsUnreadNotCount) &&
                                                                (this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30030,
                                                                    'clear offline',
                                                                    n.convId,
                                                                    n.smsUnreadCount
                                                                ),
                                                                (n.smsUnreadCount = 0),
                                                                (n.strangerUnreadCount = 0),
                                                                (n.smsUnreadNotCount = 0)),
                                                            this.pendingClearUnread.has(n.convId))
                                                        ) {
                                                            const e = this.pendingClearUnread.get(n.convId);
                                                            e &&
                                                                e >= +n.lastProcessMsgId &&
                                                                (this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30031,
                                                                    'clear pending',
                                                                    this.pendingClearUnread.size,
                                                                    n.convId
                                                                ),
                                                                (n.smsUnreadCount = 0),
                                                                (n.strangerUnreadCount = 0),
                                                                (n.smsUnreadNotCount = 0));
                                                        }
                                                        'null' === n.lastProcessMsgId && (n.lastProcessMsgId = ''),
                                                            this.data.set(n.convId, n),
                                                            Object(Pe.f)(s, this.name, n.convId),
                                                            e === ji && this.updateInDB(n),
                                                            n.unreadMark && this.total.unreadMark++;
                                                    }
                                                    this.pendingClearUnread.clear(),
                                                        this.processPendingMessages(),
                                                        Object(Pe.c)(s);
                                                }
                                                processPendingMessages() {
                                                    this.logger.zsymb(
                                                        0,
                                                        9683,
                                                        30032,
                                                        'start processPendingMessages',
                                                        this.pendingMessage.size
                                                    ),
                                                        this.pendingMessage.forEach((e, t) => {
                                                            const s = new Map(),
                                                                i = this.data.get(t);
                                                            e.forEach((e) => {
                                                                var t;
                                                                (!i || i.lastProcessMsgId < e.msgId) &&
                                                                    s.set(
                                                                        `${(t = e).uidFrom || t.fromUid}_${
                                                                            t.idTo || t.toUid
                                                                        }_${t.cliMsgId}`,
                                                                        e
                                                                    );
                                                            }),
                                                                this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30033,
                                                                    'check processPendingMessages #2',
                                                                    t,
                                                                    null == i ? void 0 : i.smsUnreadCount,
                                                                    e.map((e) => e.msgId),
                                                                    s.keys()
                                                                );
                                                            const n = Array.from(s.values()),
                                                                r = Ut.b.getLastMessageInList(n);
                                                            this.handleNewMessages(t, n, null == r ? void 0 : r.msgId);
                                                        }),
                                                        this.pendingMessage.clear();
                                                }
                                                handleNewMessages(e, t, s) {
                                                    if (!t || !t.length) return;
                                                    let i = !1;
                                                    const n = {
                                                            convId: e,
                                                            strangerUnreadCount: 0,
                                                            smsUnreadCount: 0,
                                                            smsUnreadNotCount: 0,
                                                            mentionUnreadCount: 0,
                                                            lastProcessMsgId: s,
                                                            lastSeenReactId: '0',
                                                        },
                                                        r = Date.now(),
                                                        a = new Set();
                                                    if (
                                                        (t.forEach((t) => {
                                                            const o = Ut.b.isMyMessage(t);
                                                            if (t.status !== v.MSG_READ && !o) {
                                                                const s = t.ts || t.serverTime || t.sendDttm;
                                                                hi.b.isRead({
                                                                    userId: e,
                                                                    actionId: t.actionId,
                                                                    msgId: t.msgId,
                                                                    msgSendDttm: s,
                                                                    msgLocalId: void 0,
                                                                    e2eeStatus: Object(Oi.f)(t),
                                                                }) &&
                                                                    (We.default.stagingAccount &&
                                                                        this.logger.zsymb(
                                                                            0,
                                                                            9683,
                                                                            30034,
                                                                            `mark msg status as read ${e} ${t.actionId} ${t.msgId}`
                                                                        ),
                                                                    (t.status = v.MSG_READ));
                                                            }
                                                            let d = ui.a.get(t.msgId, t.status);
                                                            d != t.status &&
                                                                We.default.stagingAccount &&
                                                                this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30035,
                                                                    `change msg status ${t.status} => ${d}`
                                                                ),
                                                                (t.status = d);
                                                            let l = !1;
                                                            if ('chat.todo' === t.msgType) {
                                                                let e = t.content;
                                                                if (e) {
                                                                    'todo.remind' === e.action && (l = !0);
                                                                }
                                                            }
                                                            let c = He.default.getDataReminder(t);
                                                            var h, u;
                                                            (t.status !== v.MSG_READ && !o) || !0 === l
                                                                ? (t.paramsExt &&
                                                                      He.default.valueValid(t.paramsExt.countUnread) &&
                                                                      0 == t.paramsExt.countUnread &&
                                                                      (n.smsUnreadNotCount += 1),
                                                                  this.isCallTimeMessage(t) ||
                                                                      ((n.smsUnreadCount += 1),
                                                                      (n.strangerUnreadCount += 1)),
                                                                  ci.b.isMessageMentionMe(t) && n.mentionUnreadCount++)
                                                                : c && o && (t.idTo === We.default.sendToMeId || o)
                                                                ? ((n.smsUnreadCount += 1),
                                                                  (n.smsUnreadNotCount += 1),
                                                                  this.logger.zsymb(
                                                                      0,
                                                                      9683,
                                                                      30036,
                                                                      `new unread #2: ${r} ${e} ${t.msgId} ${t.idTo} ${t.toUid} ${t.src} ${s}`
                                                                  ))
                                                                : !(h = t) ||
                                                                  ('0' == h.uidFrom &&
                                                                      (null === (u = h.paramsExt) || void 0 === u
                                                                          ? void 0
                                                                          : u.platformType) == ds.i.DeviceIds.SYSTEM)
                                                                ? (a.add(t.msgId),
                                                                  this.logger.zsymb(
                                                                      0,
                                                                      9683,
                                                                      30037,
                                                                      '_addMessages: skipped clear unread for',
                                                                      t.idTo
                                                                  ))
                                                                : t.isCallMessage ||
                                                                  ((n.smsUnreadCount = 0),
                                                                  (n.strangerUnreadCount = 0),
                                                                  (n.mentionUnreadCount = 0),
                                                                  (i = !0)),
                                                                n.smsUnreadCount > 0 && ns.b.markGotUnread(e, t.msgId),
                                                                ns.b.isLastMsgV2(t) && this.onDoneOffLineMessages();
                                                        }),
                                                        a.has(s))
                                                    )
                                                        for (let d = t.length - 1; d >= 0; d--) {
                                                            const s = t[d];
                                                            if (
                                                                He.default.validMessageFromServer(s) &&
                                                                !a.has(s.msgId)
                                                            ) {
                                                                this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30038,
                                                                    'update last process id',
                                                                    e,
                                                                    n.lastProcessMsgId,
                                                                    s.msgId
                                                                ),
                                                                    (n.lastProcessMsgId = s.msgId);
                                                                break;
                                                            }
                                                            var o;
                                                            0 == d &&
                                                                (n.lastProcessMsgId =
                                                                    (null === (o = this.data.get(e)) || void 0 === o
                                                                        ? void 0
                                                                        : o.lastProcessMsgId) || '0');
                                                        }
                                                    return this.updateUnread(e, i, n);
                                                }
                                                handlePreviewMsgs() {
                                                    if (!this.previewMsgs.length) return;
                                                    const e = [...this.previewMsgs];
                                                    (this.previewMsgs = []),
                                                        this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30039,
                                                            'handle preview',
                                                            e.map((e) => e.msgId)
                                                        ),
                                                        e.forEach((e) => {
                                                            const t = e.toUid,
                                                                s = _i.default.checkDuplicate(t, {
                                                                    uidFrom: e.fromUid,
                                                                    cliMsgId: e.cliMsgId,
                                                                });
                                                            s &&
                                                                s.src &&
                                                                s.msgId !== e.msgId &&
                                                                (this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30040,
                                                                    'detect dup msg',
                                                                    e.msgId,
                                                                    s.msgId
                                                                ),
                                                                (e.msgId = s.msgId)),
                                                                this.onReceiveNewMessages(t, e.msgId, [e]);
                                                        });
                                                }
                                                updateUnread(e, t, s) {
                                                    let i = this.data.get(e);
                                                    if (i) {
                                                        const e = i.lastSeenReactId || '0';
                                                        t
                                                            ? (i = s)
                                                            : ((i.smsUnreadNotCount += s.smsUnreadNotCount),
                                                              (i.smsUnreadCount += s.smsUnreadCount),
                                                              (i.strangerUnreadCount += s.strangerUnreadCount),
                                                              (i.mentionUnreadCount += s.mentionUnreadCount),
                                                              (i.lastProcessMsgId = s.lastProcessMsgId)),
                                                            (i.lastSeenReactId = e);
                                                    } else {
                                                        if (((i = s), !i))
                                                            return void this.logger.zsymb(
                                                                18,
                                                                9683,
                                                                30041,
                                                                `updateUnread undefined item ${e}`
                                                            );
                                                        i.lastSeenReactId = Si.a.getLastSeen(e) || '0';
                                                    }
                                                    this.data.set(e, Object.assign({}, i)),
                                                        this.updateInDB(i),
                                                        0 != s.mentionUnreadCount &&
                                                            Ti.a.updateUnreadMentions(this.getTotalMentionCount()),
                                                        this.unreadChanged(e);
                                                }
                                                isInStrangerBox(e) {
                                                    const t = ot.a.ConvInfoDataManager.getConvByIdSync(e);
                                                    return gi.a.isInStrangerBox(t);
                                                }
                                                isCallTimeMessage(e) {
                                                    if ('chat.recommended' === e.msgType && e.content) {
                                                        if (e.content.action === v.CallMessageAction.CallTime)
                                                            return !0;
                                                        if (e.content.action === v.CallMessageAction.MissCall) {
                                                            let s = e.content.params;
                                                            if ('string' == typeof s)
                                                                try {
                                                                    s = JSON.parse(e.content.params);
                                                                } catch (t) {}
                                                            if (s && 3 === s.reason) return !0;
                                                        }
                                                    }
                                                    return !1;
                                                }
                                                clearUnreadConversation(e, t) {
                                                    if ((void 0 === t && (t = {}), e && e.smsUnreadCount))
                                                        try {
                                                            let s = !0,
                                                                i = Object.keys(t);
                                                            (i && 0 != i.length) ||
                                                                ((s = !1),
                                                                this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30043,
                                                                    `[read-message] actually, no need send seen in that case 2: ${i.length}`
                                                                )),
                                                                !s && We.default.chat_aggressive_send_seen && (s = !0),
                                                                s
                                                                    ? i && 0 !== i.length
                                                                        ? this.sendClearUnreadToServer(t, e.userId)
                                                                        : le.default
                                                                              .getLastMessageFrom(
                                                                                  e.userId,
                                                                                  e.lastSmsLocalId,
                                                                                  Di,
                                                                                  e.smsUnreadCount,
                                                                                  !0
                                                                              )
                                                                              .then((t) => {
                                                                                  let s = [],
                                                                                      i = {};
                                                                                  if (t && t.length)
                                                                                      for (
                                                                                          let e = 0;
                                                                                          e < t.length;
                                                                                          e++
                                                                                      ) {
                                                                                          let n = t[e];
                                                                                          He.default.validMessageFromOther(
                                                                                              n
                                                                                          ) &&
                                                                                              n.zglobalMsgId &&
                                                                                              -1 != n.zglobalMsgId &&
                                                                                              (s.push(n.zglobalMsgId),
                                                                                              (i[n.zglobalMsgId] = n));
                                                                                      }
                                                                                  0 === s.length
                                                                                      ? this.logger.zsymb(
                                                                                            3,
                                                                                            9683,
                                                                                            30044,
                                                                                            '- [read-message] get ids.length == 0 {}',
                                                                                            e.userId
                                                                                        )
                                                                                      : this.sendClearUnreadToServer(
                                                                                            i,
                                                                                            e.userId
                                                                                        );
                                                                              })
                                                                              .catch((e) => {
                                                                                  this.logger.zsymb(
                                                                                      21,
                                                                                      9683,
                                                                                      30045,
                                                                                      ' [read-message] get msgs err {}',
                                                                                      e
                                                                                  );
                                                                              })
                                                                    : this.logger.zsymb(
                                                                          3,
                                                                          9683,
                                                                          30046,
                                                                          '[read-message] no send {}',
                                                                          e.userId
                                                                      );
                                                        } catch (s) {
                                                            this.logger.zsymb(
                                                                21,
                                                                9683,
                                                                30047,
                                                                '[read-message] err {}',
                                                                s
                                                            );
                                                        }
                                                    else
                                                        this.logger.zsymb(
                                                            0,
                                                            9683,
                                                            30042,
                                                            `[read-message] actually, no need send seen in that case 1: ${
                                                                null == e ? void 0 : e.userId
                                                            }`
                                                        );
                                                }
                                                async sendClearUnreadToServer(e, t) {
                                                    void 0 === e && (e = {});
                                                    const s = Object.keys(e),
                                                        i = gi.a.isGroup(t),
                                                        n = vi.a.newReq();
                                                    try {
                                                        await qe.default.sendSeen(e, t, i, n),
                                                            We.default.stagingAccount &&
                                                                this.logger.zsymb(
                                                                    0,
                                                                    9683,
                                                                    30048,
                                                                    `[read-message] done ${t} msgId:\n\t\t\t\t\t${
                                                                        s && s.length ? s[s.length - 1] : 0
                                                                    }`
                                                                );
                                                    } catch (r) {
                                                        if (
                                                            (this.logger.zsymb(
                                                                21,
                                                                9683,
                                                                30049,
                                                                '[read-message] err {}',
                                                                r
                                                            ),
                                                            !(s && s.length > 0))
                                                        )
                                                            throw (
                                                                (this.logger.zsymb(
                                                                    21,
                                                                    9683,
                                                                    30051,
                                                                    '[read-message] send seen fail!!! convId:{} msgId len = 0',
                                                                    t
                                                                ),
                                                                r)
                                                            );
                                                        if (
                                                            (this.logger.zsymb(
                                                                21,
                                                                9683,
                                                                30050,
                                                                '[read-message] send seen fail!! convId:{} msgId:{}',
                                                                t,
                                                                s[s.length - 1]
                                                            ),
                                                            r && (114 === r.error_code || -69 === r.error_code))
                                                        )
                                                            throw (
                                                                (this.logger.zsymb(
                                                                    21,
                                                                    9683,
                                                                    30052,
                                                                    '[read-message] send seen fail!!! no need retry {}',
                                                                    r.error_code
                                                                ),
                                                                r)
                                                            );
                                                        throw (
                                                            (We.default.retrySendSeen
                                                                ? (this.logger.zsymb(
                                                                      21,
                                                                      9683,
                                                                      30053,
                                                                      '[read-message] send seen fail!!! retry'
                                                                  ),
                                                                  fi.b.retryAction(fi.a.SEND_SEEN_V2, [e, t, i, n], {
                                                                      startedTime: Date.now(),
                                                                      duration: We.default.retrySendSeen.timeout,
                                                                  }))
                                                                : this.logger.zsymb(
                                                                      21,
                                                                      9683,
                                                                      30054,
                                                                      '[read-message] send seen fail!!! not retry'
                                                                  ),
                                                            r)
                                                        );
                                                    }
                                                }
                                                broadcastEvent(e, t, s) {
                                                    this.dispatchEvent(new It.a(e, t, s));
                                                }
                                                updateInDB(e) {
                                                    null == e.lastSeenReactId &&
                                                        ((e.lastSeenReactId = Si.a.getLastSeen(e.convId) || '0'),
                                                        this.logger.zsymb(
                                                            18,
                                                            9683,
                                                            30055,
                                                            `update invalid lastSeen ${e.convId}`
                                                        )),
                                                        this.DBConvUnread.addOrUpdate(e);
                                                }
                                                deleteInDB(e) {
                                                    this.DBConvUnread.remove(e);
                                                }
                                            })
                                        ) || Ii)
                                ) || Ii)
                        ) || Ii)
                );
                var Bi = s('8Nax'),
                    ki = s('GSHL'),
                    Gi = s('w5bt');
                let xi;
                var zi, Vi;
                ((zi = xi || (xi = {})).modelToEntity = function (e) {
                    if (!e) throw new Error('[PreviewHelper] Convert undefined model to entity');
                    return {
                        convId: e.convId,
                        msgId: e.msgId,
                        dName: e.dName,
                        message: e.message,
                        messageType: e.messageType,
                        messageTime: e.messageTime,
                        isGroup: e.isGroup,
                        fromUid: e.fromUid,
                        toUid: e.toUid,
                        urgencyLevel: e.urgencyLevel,
                        properties: e.properties ? { type: e.properties.type } : null,
                        mentions: e.mentions ? e.mentions : null,
                        ttl: e.ttl,
                        cliMsgId: e.cliMsgId,
                        actionId: e.actionId,
                        status: e.status,
                        substate: e.substate,
                        computedMessage: e.computedMessage,
                        computedIcon: e.computedIcon,
                    };
                }),
                    (zi.entityToModel = function (e) {
                        return e
                            ? {
                                  convId: e.convId,
                                  msgId: e.msgId,
                                  dName: e.dName,
                                  message: e.message,
                                  messageType: e.messageType,
                                  messageTime: e.messageTime,
                                  isGroup: e.isGroup,
                                  fromUid: e.fromUid,
                                  toUid: e.toUid,
                                  urgencyLevel: e.urgencyLevel,
                                  properties: e.properties,
                                  mentions: e.mentions,
                                  ttl: e.ttl,
                                  cliMsgId: e.cliMsgId,
                                  actionId: e.actionId,
                                  status: e.status,
                                  substate: e.substate,
                                  computedMessage: e.computedMessage,
                                  computedIcon: e.computedIcon,
                                  src: 'db.preview',
                                  verified: !1,
                              }
                            : null;
                    });
                const $i = 'zpm_m',
                    Wi = '1.0.0';
                Object(pt.b)(Gi.b)(
                    (Vi =
                        (function (e, t) {
                            return d.ModuleContainer.inject(ki.b)(e, void 0, 0);
                        })(
                            (Vi =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (Vi =
                                        Reflect.metadata('design:paramtypes', [
                                            void 0 === It.IReactiveDB ? Object : It.IReactiveDB,
                                        ])(
                                            (Vi = class extends G.b {
                                                constructor(e) {
                                                    super(),
                                                        (this.DBConvPreview = e),
                                                        (this.name = void 0),
                                                        (this.key = void 0),
                                                        (this.didInit = void 0),
                                                        (this.data = void 0),
                                                        (this.list = void 0),
                                                        (this.deleteQueue = void 0),
                                                        (this.doneLoadDB = void 0),
                                                        (this.migrating = void 0),
                                                        (this._Logger = void 0),
                                                        (this.name = Gi.a),
                                                        (this.key = 'convId'),
                                                        (this.didInit = !1),
                                                        (this.data = new Map()),
                                                        (this.list = new Map()),
                                                        (this.deleteQueue = []),
                                                        (this.doneLoadDB = !1),
                                                        (this.migrating = !1);
                                                }
                                                init() {
                                                    return this.didInit
                                                        ? Promise.resolve()
                                                        : ((this.didInit = !0), this.loadData());
                                                }
                                                get Logger() {
                                                    return (
                                                        this._Logger ||
                                                            (this._Logger = d.ModuleContainer.resolve(
                                                                N.ZLoggerFactory
                                                            ).createZLogger('conversation', [this.name])),
                                                        this._Logger
                                                    );
                                                }
                                                signalRenderItem(e, t) {
                                                    Object(Pe.g)(e, t),
                                                        this.broadcastEvent(It.b.PreviewChanged, t, {
                                                            changedItem: this.data.get(t),
                                                            all: Array.from(this.data.values()),
                                                        });
                                                }
                                                loadData() {
                                                    return new Promise((e, t) => {
                                                        u.a.getInstance().getItemForCurrentUser($i) !== Wi ||
                                                        this.migrating
                                                            ? e()
                                                            : (this.Logger.zsymb(3, 11263, 3e4, 'start load preview'),
                                                              this.DBConvPreview.getAll()
                                                                  .then((t) => {
                                                                      this.onLoadPreviewsFromDB(t)
                                                                          .then(e)
                                                                          .catch((t) => {
                                                                              this.Logger.zsymb(
                                                                                  21,
                                                                                  11263,
                                                                                  30001,
                                                                                  'load previews from db failure #1! {}',
                                                                                  t
                                                                              ),
                                                                                  e();
                                                                          });
                                                                  })
                                                                  .catch((t) => {
                                                                      this.Logger.zsymb(
                                                                          21,
                                                                          11263,
                                                                          30002,
                                                                          'load preview from db failure #2! {}',
                                                                          t
                                                                      ),
                                                                          e();
                                                                  }));
                                                    });
                                                }
                                                async revalidate(e) {
                                                    const t = !!this.getPreviewByIDSync(e),
                                                        s = await ri.b
                                                            .getPreviewMessage(e)
                                                            .catch(
                                                                (s) => (
                                                                    this.Logger.zsymb(
                                                                        21,
                                                                        11263,
                                                                        30003,
                                                                        'revalidate failure #1 {} {} {}',
                                                                        e,
                                                                        t,
                                                                        s
                                                                    ),
                                                                    { previewMsg: void 0 }
                                                                )
                                                            );
                                                    return (
                                                        !!s.previewMsg &&
                                                        this.onReceiveNewMessage('db.message', s.previewMsg)
                                                            .then(
                                                                (s) => (
                                                                    this.Logger.zsymb(
                                                                        3,
                                                                        11263,
                                                                        30004,
                                                                        'revalidate success {} {} {}',
                                                                        e,
                                                                        t,
                                                                        s
                                                                    ),
                                                                    !0
                                                                )
                                                            )
                                                            .catch(
                                                                (s) => (
                                                                    this.Logger.zsymb(
                                                                        21,
                                                                        11263,
                                                                        30005,
                                                                        'revalidate failure #2 {} {} {}',
                                                                        e,
                                                                        t,
                                                                        s
                                                                    ),
                                                                    !1
                                                                )
                                                            )
                                                    );
                                                }
                                                migrate(e, t) {
                                                    return (
                                                        void 0 === t && (t = !1),
                                                        new Promise((s) => {
                                                            const i = u.a.getInstance().getItemForCurrentUser($i);
                                                            if (i === Wi && !t) return;
                                                            if (
                                                                (this.Logger.zsymb(
                                                                    3,
                                                                    11263,
                                                                    30006,
                                                                    'start migrate {} {}',
                                                                    i,
                                                                    t
                                                                ),
                                                                (this.migrating = !0),
                                                                0 === e.length)
                                                            )
                                                                return this.doneMigratePreivew(0), s(0);
                                                            let n = 0,
                                                                r = 0;
                                                            const a = () => {
                                                                    if ((n++, n === e.length))
                                                                        return this.doneMigratePreivew(r), s(r);
                                                                },
                                                                o = () => {
                                                                    r++, a();
                                                                },
                                                                d = () => {
                                                                    for (let t = 0; t < e.length; t++)
                                                                        ri.b
                                                                            .getPreviewMessage(e[t])
                                                                            .then((s) => {
                                                                                s && s.previewMsg
                                                                                    ? this.onReceiveNewMessage(
                                                                                          'db.message',
                                                                                          s.previewMsg
                                                                                      )
                                                                                          .then(o)
                                                                                          .catch(a)
                                                                                    : (this.Logger.zsymb(
                                                                                          3,
                                                                                          11263,
                                                                                          30007,
                                                                                          'migrate not exists msg {}',
                                                                                          e[t]
                                                                                      ),
                                                                                      a());
                                                                            })
                                                                            .catch((s) => {
                                                                                a(),
                                                                                    this.Logger.zsymb(
                                                                                        21,
                                                                                        11263,
                                                                                        30008,
                                                                                        'migrate failure for conv {} {}',
                                                                                        e[t],
                                                                                        s
                                                                                    );
                                                                            });
                                                                };
                                                            let l = e.filter(
                                                                (e) =>
                                                                    e !== v.FAKE_CONVERSATION_ID.FRIEND_CENTER &&
                                                                    e !== v.FAKE_CONVERSATION_ID.GROUP_CENTER &&
                                                                    !e.startsWith(v.GROUPID_PREFIX)
                                                            );
                                                            if (l.length > 0)
                                                                return rt.default
                                                                    .getProfileFriendByIds(
                                                                        l,
                                                                        v.SRC_GET_PROFILE.FETCH_MINI_INFO
                                                                    )
                                                                    .then(() => {
                                                                        d();
                                                                    })
                                                                    .catch(() => {
                                                                        d();
                                                                    });
                                                            d();
                                                        })
                                                    );
                                                }
                                                doneMigratePreivew(e) {
                                                    this.Logger.zsymb(3, 11263, 30009, 'done migrate preview {}', e);
                                                    u.a.getInstance().setItemForCurrentUser($i, Wi),
                                                        this.broadcastEvent(It.b.DoneMigratePreview, '');
                                                }
                                                upgradeItemsVersion(e) {
                                                    void 0 === e && (e = []),
                                                        this.Logger.zsymb(3, 11263, 30010, 'upgradeItemsVersion');
                                                    const t = new Date().getTime().toString();
                                                    Object(Pe.i)(t),
                                                        0 !== e.length
                                                            ? e.forEach((e) => {
                                                                  Object(Pe.f)(t, this.name, e);
                                                              })
                                                            : this.data.forEach((e) => {
                                                                  Object(Pe.f)(t, this.name, e.convId);
                                                              }),
                                                        Object(Pe.c)(t);
                                                }
                                                updateStrangerBox(e) {
                                                    const t = this.data.get(e);
                                                    t &&
                                                        (this.data.set(v.CONV_FILTER.STRANGER, Object(i.a)({}, t)),
                                                        Object(Pe.g)(this.name, v.CONV_FILTER.STRANGER));
                                                }
                                                forceChangeItem(e) {
                                                    this.signalRenderItem(this.name, e);
                                                }
                                                getItem(e, t) {
                                                    const s = this.data.get(e.key);
                                                    return (
                                                        s ||
                                                            this.Logger.zsymb(
                                                                5,
                                                                11263,
                                                                30011,
                                                                'try to get item not exist in cache {}',
                                                                e.key
                                                            ),
                                                        s
                                                    );
                                                }
                                                getList(e, t) {
                                                    return Array.from(this.data.keys());
                                                }
                                                onGetItemFailure(e) {
                                                    this.Logger.zsymb(11, 11263, 30012, 'onGetItemFailure {}', e);
                                                }
                                                onGetListFailure(e, t) {
                                                    this.Logger.zsymb(11, 11263, 30013, 'onGetListFailure {} {}', e, t);
                                                }
                                                onLoadPreviewsFromDB(e) {
                                                    return new Promise((t, s) => {
                                                        if (
                                                            (this.Logger.zsymb(
                                                                3,
                                                                11263,
                                                                30014,
                                                                'onLoadPreviewsFromDB {}',
                                                                null == e ? void 0 : e.length
                                                            ),
                                                            !e || 0 === e.length)
                                                        )
                                                            return this.doneLoadPreview(0), t();
                                                        let i = 0;
                                                        const n = () => {
                                                            i++, i === e.length && (this.doneLoadPreview(i), t());
                                                        };
                                                        for (let r = 0; r < e.length; r++) {
                                                            const t = xi.entityToModel(e[r]);
                                                            t &&
                                                                !Bi.a.instance.filterExpiredPreview(t) &&
                                                                ((t.messageType = v.MSG_VANISH),
                                                                (t.message = ''),
                                                                this.updateInDB(t)),
                                                                this.addPreviewToManager(t)
                                                                    .then(() => {
                                                                        n();
                                                                    })
                                                                    .catch((e) => {
                                                                        n(),
                                                                            this.Logger.zsymb(
                                                                                21,
                                                                                11263,
                                                                                30015,
                                                                                'onload preview failure for item {} {}',
                                                                                null == t ? void 0 : t.convId,
                                                                                e
                                                                            );
                                                                    });
                                                        }
                                                    });
                                                }
                                                doneLoadPreview(e) {
                                                    this.Logger.zsymb(3, 11263, 30016, 'doneLoadPreview {}', e),
                                                        (this.doneLoadDB = !0),
                                                        this.broadcastEvent(
                                                            It.b.DoneLoadPreview,
                                                            '',
                                                            Array.from(this.data.values())
                                                        ),
                                                        Object(Pe.h)(this.name, 'all');
                                                }
                                                onReceiveNewMessage(e, t) {
                                                    return new Promise((s, i) => {
                                                        if (!t) return s(!1);
                                                        const n = this.convertDBMessageToPreviewItem(e, t);
                                                        this.addPreviewToManager(n)
                                                            .then((e) =>
                                                                e
                                                                    ? (this.signalRenderItem(this.name, t.toUid), s(!0))
                                                                    : s(!1)
                                                            )
                                                            .catch(i);
                                                    });
                                                }
                                                onReceiveNewMessages(e, t) {
                                                    return new Promise((s) => {
                                                        if (!t) return s(!1);
                                                        const i = this.groupMessageByConvId(t),
                                                            n = [];
                                                        for (const e in i) {
                                                            if (!Object.prototype.hasOwnProperty.call(i, e)) continue;
                                                            const t = i[e];
                                                            for (let e = t.length - 1; e >= 0; e--) {
                                                                if (Ut.b.isValidPreviewMessage(t[e])) {
                                                                    n.push(t[e]);
                                                                    break;
                                                                }
                                                                this.Logger.zsymb(
                                                                    3,
                                                                    11263,
                                                                    30017,
                                                                    'receive msg but not preview {}',
                                                                    t[e].msgId
                                                                );
                                                            }
                                                        }
                                                        return n.length
                                                            ? Promise.all(
                                                                  n.map(async (t) => this.onReceiveNewMessage(e, t))
                                                              )
                                                                  .then((e) => {
                                                                      const t = e.some((e) => 1 == e);
                                                                      s(t);
                                                                  })
                                                                  .catch((e) => {
                                                                      this.Logger.zsymb(
                                                                          21,
                                                                          11263,
                                                                          30018,
                                                                          'add messages to preview got error {}',
                                                                          e
                                                                      ),
                                                                          s(!1);
                                                                  })
                                                            : s(!1);
                                                    });
                                                }
                                                onUndoMessage(e, t) {
                                                    if (!t) return;
                                                    this.Logger.zsymb(3, 11263, 30019, 'onUndoMessage {}', t.msgId);
                                                    const s = this.convertDBMessageToPreviewItem(e, t);
                                                    (s.messageType = v.MSG_UNDO),
                                                        (s.message = ''),
                                                        this.addPreviewToManager(s).then((e) => {
                                                            e && this.signalRenderItem(this.name, t.toUid);
                                                        });
                                                }
                                                onUpdateE2EEMessage(e, t) {
                                                    if (!t) return;
                                                    const s = t.toUid,
                                                        i = this.data.get(s);
                                                    if (
                                                        (this.Logger.zsymb(
                                                            3,
                                                            11263,
                                                            30020,
                                                            'onUpdateE2EEMessage {} {} {}',
                                                            s,
                                                            null == i ? void 0 : i.msgId,
                                                            t.msgId
                                                        ),
                                                        i && (i.msgId !== t.msgId || !ci.b.isSameMsg(i, t)))
                                                    )
                                                        return;
                                                    const n = this.convertDBMessageToPreviewItem(e, t),
                                                        r =
                                                            He.default.normalizeMessageTypeFromSubState(
                                                                null == t ? void 0 : t.e2eeStatus
                                                            ) || t.msgType;
                                                    (n.message = n.message || Ut.b.getPlainText({ msgType: r })),
                                                        (n.verified = !0),
                                                        (n.messageType = r),
                                                        this.data.set(t.toUid, n),
                                                        this.updateInDB(n),
                                                        this.signalRenderItem(this.name, t.toUid);
                                                }
                                                onDeleteMessage(e, t) {
                                                    return new Promise((e, s) => {
                                                        if (!t) return e(!1);
                                                        this.Logger.zsymb(
                                                            3,
                                                            11263,
                                                            30021,
                                                            'onDeleteMessage {}',
                                                            t.msgId
                                                        );
                                                        const i = this.convertDBMessageToPreviewItem('db.message', t);
                                                        this.deleteMessageInManager(i).then((s) => {
                                                            s
                                                                ? (this.Logger.zsymb(
                                                                      3,
                                                                      11263,
                                                                      30022,
                                                                      'onDeleteMessage success {}',
                                                                      t.msgId
                                                                  ),
                                                                  this.signalRenderItem(this.name, t.toUid),
                                                                  e(!0))
                                                                : e(!1);
                                                        });
                                                    });
                                                }
                                                onDeleteMessages(e, t) {
                                                    if (!t || t.length < 1) return;
                                                    const s = this.groupMessageByConvId(t);
                                                    for (const i in s)
                                                        if (Object.prototype.hasOwnProperty.call(s, i)) {
                                                            const t = s[i];
                                                            let n = this.convertDBMessageToPreviewItem(e, t[0]),
                                                                r = 0;
                                                            for (let s = 1; s < t.length; s++) {
                                                                const i = this.convertDBMessageToPreviewItem(e, t[s]);
                                                                this.isSecondItemNewer(n, i) && ((r = s), (n = i));
                                                            }
                                                            this.onDeleteMessage(e, t[r]);
                                                        }
                                                }
                                                onDeleteConversation(e) {
                                                    e &&
                                                        (this.Logger.zsymb(
                                                            3,
                                                            11263,
                                                            30023,
                                                            'onDeleteConversation {}',
                                                            e
                                                        ),
                                                        this.data.delete(e) && Object(Pe.e)(this.name, e),
                                                        this.deleteInDB(e));
                                                }
                                                onChangeDraft(e, t) {
                                                    let s = this.getPreviewByIDSync(e);
                                                    !e ||
                                                    !s ||
                                                    s.draft === t ||
                                                    (s.draft && t && s.draft.draftTime === t.draftTime)
                                                        ? this.Logger.zsymb(
                                                              3,
                                                              11263,
                                                              30024,
                                                              'onChangeDraft - reject {}',
                                                              !!s
                                                          )
                                                        : (this.Logger.zsymb(
                                                              3,
                                                              11263,
                                                              30025,
                                                              'onChangeDraft - call update {}',
                                                              !!s
                                                          ),
                                                          (s = Object(i.a)(Object(i.a)({}, s), {}, { draft: t })),
                                                          this.data.set(e, s),
                                                          this.signalRenderItem(this.name, e),
                                                          this.broadcastEvent(It.b.DraftChanged));
                                                }
                                                getPreviewById(e) {
                                                    return new Promise((t, s) => {
                                                        if (this.data.has(e)) return t(this.data.get(e));
                                                        this.DBConvPreview.getById(e)
                                                            .then((s) => {
                                                                s ||
                                                                    this.Logger.zsymb(
                                                                        3,
                                                                        11263,
                                                                        30026,
                                                                        'get item not exist with id {}',
                                                                        e
                                                                    );
                                                                const i = xi.entityToModel(s);
                                                                t(i || void 0);
                                                            })
                                                            .catch(s);
                                                    });
                                                }
                                                getPreviewByIDSync(e) {
                                                    return this.data.get(e);
                                                }
                                                getAllPreviews() {
                                                    return new Promise((e, t) => {
                                                        if (this.doneLoadDB) return e(this.getAllPreviewsSync());
                                                        this.DBConvPreview.getAll()
                                                            .then((t) => {
                                                                const s = t.map((e) => xi.entityToModel(e));
                                                                e(s);
                                                            })
                                                            .catch(t);
                                                    });
                                                }
                                                getAllPreviewsSync() {
                                                    return Array.from(this.data.values()) || [];
                                                }
                                                setPreview(e, t, s, i, n, r, a) {
                                                    void 0 === r && (r = 1), void 0 === a && (a = {});
                                                    const o = this.data.get(e);
                                                    this.Logger.zsymb(
                                                        3,
                                                        11263,
                                                        30027,
                                                        'call set preview {} {}',
                                                        e,
                                                        !!o
                                                    );
                                                    const d = {
                                                        convId: e,
                                                        msgId: a.msgId || 'unset',
                                                        src: 'ui',
                                                        dName: a.dName || '',
                                                        message: t,
                                                        messageType: '',
                                                        isGroup: e.startsWith(v.GROUPID_PREFIX),
                                                        messageTime: s,
                                                        fromUid: i,
                                                        toUid: n,
                                                        urgencyLevel: a.urgencyLevel,
                                                        properties: null,
                                                        verified: !0,
                                                        status: r,
                                                        computedMessage: t,
                                                        computedIcon: a.icon,
                                                    };
                                                    this.data.set(e, d),
                                                        this.signalRenderItem(this.name, e),
                                                        this.updateInDB(d);
                                                }
                                                async addPreviewToManager(e) {
                                                    if (!e) return !1;
                                                    const t = e.convId,
                                                        s = this.data.get(t);
                                                    let i = !1;
                                                    return (
                                                        s
                                                            ? this.isSecondItemNewer(s, e) &&
                                                              (this.data.set(t, e),
                                                              (i = !0),
                                                              s.verified
                                                                  ? ((e.verified = !0), this.updateInDB(e))
                                                                  : (i = await this.compareCacheWithDBAndUpdate(t, e)))
                                                            : (this.data.set(t, e),
                                                              (i = !0),
                                                              'db.preview' !== e.src &&
                                                                  (i = await this.compareCacheWithDBAndUpdate(t, e))),
                                                        i
                                                    );
                                                }
                                                async deleteMessageInManager(e) {
                                                    if (!e) return !1;
                                                    const t = e.convId,
                                                        s = this.data.get(t);
                                                    if (!s || (!ci.b.isSameMsg(e, s) && this.isSecondItemNewer(e, s)))
                                                        return (
                                                            0 !== this.deleteQueue.length && this.deleteQueue.push(e),
                                                            !1
                                                        );
                                                    const i = async () => {
                                                        const e = await ri.b.getPreviewMessage(t),
                                                            i = this.deleteQueue.find((t) => {
                                                                var s;
                                                                return (
                                                                    t.msgId ===
                                                                    (null === (s = e.previewMsg) || void 0 === s
                                                                        ? void 0
                                                                        : s.msgId)
                                                                );
                                                            });
                                                        if (i)
                                                            return (
                                                                this.data.set(t, i),
                                                                await this.deleteMessageInManager(i)
                                                            );
                                                        this.deleteQueue = [];
                                                        const n = this.data.get(t);
                                                        if (n && this.isSecondItemNewer(s, n)) return !1;
                                                        if (e.previewMsg) {
                                                            const s = this.convertDBMessageToPreviewItem(
                                                                'db.message',
                                                                e.previewMsg
                                                            );
                                                            return (
                                                                (s.verified = !0),
                                                                this.data.set(t, s),
                                                                this.updateInDB(s),
                                                                !0
                                                            );
                                                        }
                                                        return (
                                                            this.data.delete(t),
                                                            this.deleteInDB(t),
                                                            Object(Pe.e)(this.name, t),
                                                            !1
                                                        );
                                                    };
                                                    if (s.verified) return await i();
                                                    {
                                                        const s = await this.DBConvPreview.getById(t),
                                                            n = s && xi.entityToModel(s);
                                                        return n && this.isSecondItemNewer(e, n)
                                                            ? (this.data.set(t, n), !0)
                                                            : await i();
                                                    }
                                                }
                                                convertDBMessageToPreviewItem(e, t) {
                                                    let s = t.sendDttm || t.serverTime;
                                                    s = s ? s.toString() : '';
                                                    const i = t.fromUid || t.uidFrom,
                                                        n = t.toUid || t.idTo,
                                                        r = n && n.startsWith(v.GROUPID_PREFIX);
                                                    return {
                                                        convId: t.toUid,
                                                        msgId: t.msgId,
                                                        src: e,
                                                        dName: t.dName || '',
                                                        message: t.message,
                                                        messageType: t.msgType,
                                                        mentions: t.mentions,
                                                        isGroup: r,
                                                        messageTime: s,
                                                        fromUid: i,
                                                        properties: t.properties,
                                                        urgencyLevel: t.urgency,
                                                        verified: !1,
                                                        ttl: t.ttl,
                                                        status: t.status || 1,
                                                        substate: t.e2eeStatus,
                                                        cliMsgId: t.cliMsgId,
                                                        toUid: t.toUid,
                                                    };
                                                }
                                                isSecondItemNewer(e, t) {
                                                    return (
                                                        !e ||
                                                        ((t.msgId === e.msgId && t.messageTime === e.messageTime) ||
                                                        ci.b.isSameMsg(e, t)
                                                            ? (t.messageType === v.MSG_UNDO &&
                                                                  e.messageType !== v.MSG_UNDO) ||
                                                              yt.a.comparePreviewStt(t.status, e.status) > 0
                                                            : e.messageTime !== t.messageTime
                                                            ? t.messageTime > e.messageTime
                                                            : t.msgId > e.msgId)
                                                    );
                                                }
                                                compareCacheWithDBAndUpdate(e, t) {
                                                    return new Promise((s, i) => {
                                                        this.DBConvPreview.getById(e)
                                                            .then((i) => {
                                                                this.Logger.zsymb(
                                                                    3,
                                                                    11263,
                                                                    30028,
                                                                    'compareCacheWithDBAndUpdate {} {}',
                                                                    e,
                                                                    !!i
                                                                );
                                                                const n = xi.entityToModel(i),
                                                                    r = this.data.get(e);
                                                                if (JSON.stringify(r) !== JSON.stringify(t))
                                                                    return s(!1);
                                                                (!n && r) || (n && r && this.isSecondItemNewer(n, r))
                                                                    ? ((r.verified = !0), this.updateInDB(r))
                                                                    : n && this.data.set(e, n),
                                                                    s(!0);
                                                            })
                                                            .catch(i);
                                                    });
                                                }
                                                groupMessageByConvId(e) {
                                                    const t = {};
                                                    for (let s = 0; s < e.length; s++)
                                                        t[e[s].toUid]
                                                            ? t[e[s].toUid].push(e[s])
                                                            : (t[e[s].toUid] = [e[s]]);
                                                    return t;
                                                }
                                                broadcastEvent(e, t, s) {
                                                    void 0 === t && (t = ''), this.dispatchEvent(new It.a(e, t, s));
                                                }
                                                updateInDB(e) {
                                                    this.Logger.zsymb(3, 11263, 30029, 'update in db {}', e.msgId);
                                                    try {
                                                        const t = xi.modelToEntity(e);
                                                        this.DBConvPreview.addOrUpdate(t);
                                                    } catch (t) {
                                                        this.Logger.zsymb(
                                                            21,
                                                            11263,
                                                            30030,
                                                            'update in db got err{}',
                                                            t
                                                        );
                                                    }
                                                }
                                                deleteInDB(e) {
                                                    this.DBConvPreview.remove(e).catch((e) => {
                                                        this.Logger.zsymb(
                                                            18,
                                                            11263,
                                                            30031,
                                                            `[${this.name}] - deleteInDB got error ${e}`
                                                        );
                                                    });
                                                }
                                            })
                                        ) || Vi)
                                ) || Vi)
                        ) || Vi)
                );
                var Ki = s('rKwX'),
                    qi = s('SWKE');
                class Hi {
                    constructor() {
                        (this.cache = void 0), (this.cache = {});
                    }
                    localKey(e) {
                        return 'z_ml_' + e;
                    }
                    muteConversation(e, t) {
                        const s = u.a.getInstance(),
                            i = 'z_ml_' + e;
                        t
                            ? t.constructor === Object
                                ? s.setItemForCurrentUser(this.localKey(e), JSON.stringify(t))
                                : s.setItemForCurrentUser(this.localKey(e), `${t}`)
                            : s.removeItemForCurrentUser(i),
                            (this.cache[e] = t || !1);
                    }
                    isMuted(e) {
                        if (this.cache.hasOwnProperty(e)) return this.cache[e];
                        let t,
                            s = u.a.getInstance().getItemForCurrentUser(this.localKey(e));
                        if (!s) return null;
                        try {
                            return (t = JSON.parse(s)), (this.cache[e] = t), t;
                        } catch (i) {
                            He.default.logCoreError(i);
                        }
                        return (this.cache[e] = !1), !1;
                    }
                    setMutedConversations(e) {
                        let t = [];
                        e.chatEntries && e.chatEntries.length > 0 && e.chatEntries.reduce((e, t) => (e.push(t), e), t),
                            e.groupChatEntries &&
                                e.groupChatEntries.length > 0 &&
                                e.groupChatEntries.reduce(
                                    (e, t) => ((t.id = v.GROUPID_PREFIX + t.id), e.push(t), e),
                                    t
                                );
                        qi.a.getInstance().cleanupLocalStorageMatchConditions((e) => {
                            const t = u.a.getInstance().getKeyNameForCurrentUser(this.localKey(''));
                            return e.startsWith(t);
                        }),
                            (this.cache = {});
                        for (let s = 0; s < t.length; s++) this.muteConversation(t[s].id, t[s]);
                        return t;
                    }
                }
                var Qi;
                Object(pt.b)(ut.f)(
                    (Qi =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Qi =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Qi = class extends G.b {
                                        constructor() {
                                            super(),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.didInit = void 0),
                                                (this._muteManager = void 0),
                                                (this.userId = void 0),
                                                (this.mapTimeout = void 0),
                                                (this.name = ut.e),
                                                (this.key = 'id'),
                                                (this.didInit = !1),
                                                (this.userId = ''),
                                                (this.mapTimeout = {});
                                        }
                                        init(e) {
                                            this.didInit || ((this.didInit = !0), (this.userId = e));
                                        }
                                        get muteManager() {
                                            return (
                                                (this._muteManager && '' !== this.userId) ||
                                                    (this.userId, (this._muteManager = new Hi())),
                                                this._muteManager
                                            );
                                        }
                                        getItem(e, t) {
                                            return this.muteManager.isMuted(e.key);
                                        }
                                        getList(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetItemFailure(e) {}
                                        onGetListFailure(e, t) {}
                                        onMute(e, t) {
                                            return new Promise((s, i) => {
                                                this._clearTimeout(e);
                                                let n = -1;
                                                switch (t) {
                                                    case 1:
                                                        n = 3600;
                                                        break;
                                                    case 2:
                                                        n = 14400;
                                                        break;
                                                    case 3:
                                                        n = Math.round(this._getNowTo8Am() / 1e3);
                                                }
                                                He.default.logCoreInfo(`[${this.name}] - onMute ${e} ${n}`),
                                                    Ki.a
                                                        .lock(e, n, !0)
                                                        .then((t) => {
                                                            this.muteManager.muteConversation(e, {
                                                                id: e,
                                                                startTime: t.startTime,
                                                                duration: t.duration,
                                                                systemTime: t.systemTime,
                                                                currentTime: t.currentTime,
                                                                muteMode: t.muteMode,
                                                            }),
                                                                s(!0);
                                                        })
                                                        .catch(i);
                                            });
                                        }
                                        onUnMute(e, t, s) {
                                            return (
                                                void 0 === t && (t = !0),
                                                void 0 === s && (s = !1),
                                                new Promise((i, n) => {
                                                    this._clearTimeout(e),
                                                        He.default.logCoreInfo(
                                                            `[${this.name}] - onUnMute ${e} ${t} ${s}`
                                                        ),
                                                        Ki.a
                                                            .unlock(e, t, s)
                                                            .then((t) => {
                                                                this.muteManager.muteConversation(e, 0), i(!!t);
                                                            })
                                                            .catch(n);
                                                })
                                            );
                                        }
                                        onFetchMute(e) {
                                            He.default.logCoreInfo(`[${this.name}] - onFetchMute`);
                                            let t = this.muteManager.setMutedConversations(e);
                                            return this.processFetchData(e), t;
                                        }
                                        onCtrMute(e, t) {
                                            t
                                                ? (this.doLock(t, !1),
                                                  this.muteManager.muteConversation(e, t),
                                                  this.muteChanged(e, !!t))
                                                : this.onUnMute(e, !1).then((s) => {
                                                      this.muteChanged(e, !!t);
                                                  });
                                        }
                                        isMuted(e) {
                                            return this.muteManager.isMuted(e);
                                        }
                                        processFetchData(e) {
                                            try {
                                                e.chatEntries &&
                                                    (e.chatEntries.forEach((e) => {
                                                        this.doLock(e, !0);
                                                    }),
                                                    e.groupChatEntries.forEach((e) => {
                                                        this.doLock(e, !0);
                                                    }));
                                            } catch (t) {
                                                He.default.logCoreError(t);
                                            }
                                        }
                                        doLock(e, t) {
                                            if (
                                                (void 0 === t && (t = !0),
                                                this.mapTimeout.hasOwnProperty(e.id) && (t = !0),
                                                this._clearTimeout(e.id),
                                                -1 != e.duration)
                                            ) {
                                                He.default.log('setTimer', e);
                                                let s = e.duration - (e.currentTime - e.systemTime);
                                                s >= 0
                                                    ? (He.default.log('setTimer: lock1', e.id),
                                                      He.default.logCoreInfo(
                                                          '[Unmute timeout] setTimer: lock1',
                                                          e.id,
                                                          s
                                                      ),
                                                      (this.mapTimeout[e.id] = setTimeout(() => {
                                                          this.onUnMute(e.id, t, !0),
                                                              He.default.logCoreInfo(
                                                                  '[Unmute timeout] setTimer: unlock1',
                                                                  e.id
                                                              );
                                                      }, 1e3 * s)))
                                                    : (He.default.log('setTimer: unlock', s),
                                                      He.default.logCoreInfo('[Unmute timeout] setTimer: unlock', e.id),
                                                      this.onUnMute(e.id, t));
                                            }
                                        }
                                        _clearTimeout(e) {
                                            this.mapTimeout.hasOwnProperty(e) &&
                                                (clearTimeout(this.mapTimeout[e]), delete this.mapTimeout[e]);
                                        }
                                        _getNowTo8Am() {
                                            let e = new Date().getTime(),
                                                t = new Date(e);
                                            return (
                                                t.setHours(8, 0, 0, 0),
                                                t.getTime() <= e ? t.getTime() + 864e5 - e : t.getTime() - e
                                            );
                                        }
                                        muteChanged(e, t) {
                                            Object(Pe.g)(this.name, e), this.broadcastEvent(It.b.MuteChanged, e, t);
                                        }
                                        broadcastEvent(e, t, s) {
                                            void 0 === t && (t = ''), this.dispatchEvent(new It.a(e, t, s));
                                        }
                                    })
                                ) || Qi)
                        ) || Qi)
                );
                var Ji,
                    Zi = s('kCOK'),
                    Xi = s('qvRd'),
                    Yi = s('fBUP'),
                    en = s('gwig');
                const tn = 'zpinc',
                    sn = 'ver_pin',
                    nn = 0,
                    rn = 1,
                    an = 2;
                Object(pt.b)(Xi.b)(
                    (Ji =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Ji =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Ji = class extends G.b {
                                        get Logger() {
                                            return (
                                                this._Logger ||
                                                    (this._Logger = d.ModuleContainer.resolve(
                                                        N.ZLoggerFactory
                                                    ).createZLogger('conversation', [this.name])),
                                                this._Logger
                                            );
                                        }
                                        constructor() {
                                            super(),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.didInit = void 0),
                                                (this.doneLoadDB = void 0),
                                                (this.data = void 0),
                                                (this._Logger = void 0),
                                                (this.reFetchCount = void 0),
                                                (this.retryTimeout = void 0),
                                                (this.refetchInterval = void 0),
                                                (this.lastFetchTime = void 0),
                                                (this.isDataLastest = void 0),
                                                (this.requestingIds = void 0),
                                                (this.name = Xi.a),
                                                (this.key = 'convId'),
                                                (this.didInit = !1),
                                                (this.doneLoadDB = !1),
                                                (this.data = new Map()),
                                                (this.reFetchCount = 0),
                                                (this.isDataLastest = !1),
                                                (this.lastFetchTime = 0),
                                                (this.requestingIds = new Map());
                                        }
                                        init() {
                                            this.didInit ||
                                                ((this.didInit = !0),
                                                this._loadData(),
                                                this._fetchPinnedConversations(),
                                                this._addListener());
                                        }
                                        _loadData() {
                                            const e = u.a.getInstance().getItemForCurrentUser(tn);
                                            if (e && e.length)
                                                try {
                                                    const s = JSON.parse(e);
                                                    Object.keys(s).map((e) => {
                                                        this._verifyPin(s[e].id) &&
                                                            this.data.set(s[e].id, {
                                                                id: s[e].id,
                                                                priority: +s[e].priority || ii.a.getTimeNow(),
                                                            });
                                                    });
                                                    try {
                                                        this.Logger.zsymb(
                                                            0,
                                                            9682,
                                                            3e4,
                                                            'pin conversations loaded from local',
                                                            JSON.stringify(Object.fromEntries(this.data))
                                                        );
                                                    } catch (t) {
                                                        this.Logger.zsymb(18, 9682, 30001, 'stringify fail');
                                                    }
                                                    this.doneLoadDB = !0;
                                                    const i = this.getAllPinnedConversations();
                                                    i.length && this._broadcastEvent(It.b.ChangePinConv, i);
                                                } catch (s) {
                                                    0;
                                                }
                                        }
                                        _addListener() {
                                            rt.default.subscribeEventFriend(v.EventFriend.REMOVE_FRIEND, (e) => {
                                                this.Logger.zsymb(0, 9682, 30002, 'remove friend - unpin', e.userId),
                                                    this.updateListPin([e.userId], an);
                                            }),
                                                this._setFetchInterval();
                                        }
                                        _setFetchInterval() {
                                            this.refetchInterval && clearTimeout(this.refetchInterval),
                                                (this.refetchInterval = setInterval(() => {
                                                    this._fetchPinnedConversations();
                                                }, 864e5));
                                        }
                                        _broadcastEvent(e, t) {
                                            this.dispatchEvent(new It.e(e, t));
                                        }
                                        _newPinItem(e, t) {
                                            return { id: e, priority: t };
                                        }
                                        _syncServer(e, t) {
                                            return this._updatePinnedConversationsV2(e, t);
                                        }
                                        getLastFetchTime() {
                                            return this.lastFetchTime;
                                        }
                                        isPinned(e) {
                                            return this.data.has(e);
                                        }
                                        getPinTime(e) {
                                            const t = this.data.get(e);
                                            return t ? t.priority : 0;
                                        }
                                        async _checkAndSyncDataBeforeAction() {
                                            if (!this.isDataLastest)
                                                try {
                                                    return await this._fetchPinnedConversations(), !0;
                                                } catch (e) {
                                                    return !1;
                                                }
                                            return !0;
                                        }
                                        pin(e) {
                                            return (
                                                this.Logger.zsymb(0, 9682, 30003, 'client pin', e),
                                                new Promise(async (t, s) => {
                                                    const i = await this._checkAndSyncDataBeforeAction();
                                                    if (!e || !e.length) return s(null);
                                                    if (i) {
                                                        if (this.data.size + e.length > We.default.limit_pin_messages)
                                                            return s(null);
                                                        let i = [];
                                                        for (let t = 0; t < e.length; ++t)
                                                            this.isPinned(e[t]) || i.push(e[t]);
                                                        if (i.length > 0)
                                                            try {
                                                                const s = await this._syncServer(i, rn);
                                                                return this.updateListPin(e, rn), t(s);
                                                            } catch (n) {
                                                                return s(n);
                                                            }
                                                    }
                                                    return s(null);
                                                })
                                            );
                                        }
                                        pinLocal(e) {
                                            this.updateListPin(e, rn);
                                        }
                                        unpin(e, t) {
                                            return (
                                                void 0 === t && (t = !1),
                                                this.Logger.zsymb(0, 9682, 30004, 'client unpin', e, 'force sync', t),
                                                new Promise(async (s, i) => {
                                                    if (!e || !e.length) return i(null);
                                                    if (await this._checkAndSyncDataBeforeAction()) {
                                                        let r = [];
                                                        for (let s = 0; s < e.length; ++s)
                                                            (this.isPinned(e[s]) || t) && r.push(e[s]);
                                                        if (r.length > 0)
                                                            try {
                                                                await this._syncServer(r, an),
                                                                    this.updateListPin(e, an),
                                                                    s(1);
                                                            } catch (n) {
                                                                i(n);
                                                            }
                                                    }
                                                    return i(null);
                                                })
                                            );
                                        }
                                        unpinLocal(e) {
                                            this.Logger.zsymb(0, 9682, 30005, 'unpin local', e),
                                                this.updateListPin(e, an);
                                        }
                                        getAllPinnedConversations() {
                                            return Array.from(this.data.values());
                                        }
                                        getAllPinnedConversationsSync() {
                                            return Array.from(this.data.values());
                                        }
                                        getTotalPinnedConversation() {
                                            return (
                                                this.data.size +
                                                Array.from(this.requestingIds.values()).filter((e) => e === rn).length
                                            );
                                        }
                                        _verifyPin(e) {
                                            return (
                                                this.Logger.zsymb(
                                                    0,
                                                    9682,
                                                    30006,
                                                    'verify conversation',
                                                    e,
                                                    rt.default.isFriend(e),
                                                    !!jt.default.getGroupByIdSync(e),
                                                    e === We.default.sendToMeId
                                                ),
                                                rt.default.isFriend(e) ||
                                                    !!jt.default.getGroupByIdSync(e) ||
                                                    e === We.default.sendToMeId
                                            );
                                        }
                                        updateListPin(e, t) {
                                            if (
                                                (this.Logger.zsymb(0, 9682, 30007, 'updateListPin', e, t),
                                                !e || !e.length)
                                            )
                                                return;
                                            const s = [];
                                            switch (t) {
                                                case rn:
                                                    let t = ii.a.getTimeNow();
                                                    for (let i = 0; i < e.length; i++)
                                                        if (this._verifyPin(e[i]) && !this.data.has(e[i])) {
                                                            ++t,
                                                                this.requestingIds.get(e[i]) &&
                                                                    this.requestingIds.set(e[i], nn);
                                                            const n = this._newPinItem(e[i], t);
                                                            this.data.set(e[i], n),
                                                                s.push(n),
                                                                Object(Pe.g)(this.name, e[i]);
                                                        }
                                                    break;
                                                case an:
                                                    for (let i = 0; i < e.length; i++)
                                                        if (this.data.has(e[i])) {
                                                            this.requestingIds.get(e[i]) &&
                                                                this.requestingIds.set(e[i], nn),
                                                                this.data.delete(e[i]);
                                                            const t = this._newPinItem(e[i], 0);
                                                            s.push(t), Object(Pe.g)(this.name, e[i]);
                                                        }
                                                    break;
                                                default:
                                                    return;
                                            }
                                            s.length && this._broadcastEvent(It.b.ChangePinConv, s), this._updateInDB();
                                        }
                                        _retryFetch(e) {
                                            if (this.reFetchCount > 5) return;
                                            let t = 0;
                                            switch (e) {
                                                case 'ERR_NO_NETWORK':
                                                case -69:
                                                    break;
                                                case 212:
                                                    this.Logger.zsymb(
                                                        20,
                                                        9682,
                                                        30008,
                                                        "hasn't pinned conversation from server"
                                                    );
                                                    u.a.getInstance().setItemForCurrentUser(sn, '0'),
                                                        this._sendToServer();
                                                    break;
                                                case 'ERR_CONNECTION_TIMED_OUT':
                                                case 112:
                                                    t = 5e3 * this.reFetchCount;
                                                    break;
                                                default:
                                                    t = 36e5;
                                            }
                                            this.Logger.zsymb(
                                                21,
                                                9682,
                                                30009,
                                                'Handle request error fail with error: {}, retry after time= {}',
                                                e,
                                                t
                                            ),
                                                this.retryTimeout ||
                                                    (t > 0 &&
                                                        (this.retryTimeout = setTimeout(() => {
                                                            this._fetchPinnedConversations(),
                                                                (this.retryTimeout = void 0);
                                                        }, t)));
                                        }
                                        _parseData(e) {
                                            let t = [];
                                            for (let s = 0; s < e.length; ++s)
                                                'm1' === e[s] ||
                                                    (e[s].startsWith('g') ? t.push(e[s]) : t.push(e[s].slice(1)));
                                            return t;
                                        }
                                        _fetchPinnedConversations() {
                                            return (
                                                this.reFetchCount++,
                                                this.Logger.zsymb(
                                                    0,
                                                    9682,
                                                    30010,
                                                    '_fetchPinnedConversations',
                                                    this.reFetchCount
                                                ),
                                                new Promise((e, t) => {
                                                    Yi.default
                                                        .getPinnedConversations()
                                                        .then(Zi.a)
                                                        .then((t) => {
                                                            if (t && t.conversations) {
                                                                const e = u.a.getInstance();
                                                                (void 0 === t.version && null === t.version) ||
                                                                    e.setItemForCurrentUser(sn, t.version),
                                                                    this._onFetchPin(this._parseData(t.conversations));
                                                            }
                                                            e(t);
                                                        })
                                                        .catch((e) => {
                                                            (this.isDataLastest = !1),
                                                                e &&
                                                                    (e.error_code
                                                                        ? this._retryFetch(e.error_code)
                                                                        : e.code
                                                                        ? this._retryFetch(e.code)
                                                                        : this._retryFetch('UNKNOWN_ERROR')),
                                                                t(e);
                                                        });
                                                })
                                            );
                                        }
                                        _updatePinnedConversationsV2(e, t) {
                                            return new Promise((s, i) => {
                                                if (!We.default.enable_sync_pinned) return;
                                                if (!en.b.getStateNetwork())
                                                    return void i(
                                                        t === rn
                                                            ? Rt.default.str('STR_ERR_NETWORK_PIN_CONVERSATION')
                                                            : Rt.default.str('STR_ERR_NETWORK_UNPIN_CONVERSATION')
                                                    );
                                                let n = [];
                                                for (let r = 0; r < e.length; ++r)
                                                    e[r].startsWith('g') || e[r].startsWith('u') || (e[r] = 'u' + e[r]),
                                                        n.includes(e[r]) ||
                                                            (this.requestingIds.has(e[r]) &&
                                                                this.requestingIds.get(e[r]) !== nn) ||
                                                            (n.push(e[r]), this.requestingIds.set(e[r], t));
                                                n.length &&
                                                    Yi.default
                                                        .updatePinnedConversationsV2(n, t)
                                                        .then(Zi.a)
                                                        .then(() => {
                                                            n.forEach((e) => {
                                                                this.requestingIds.set(e, nn);
                                                            }),
                                                                s(!0);
                                                        })
                                                        .catch((e) => {
                                                            n.forEach((e) => {
                                                                this.requestingIds.set(e, nn);
                                                            }),
                                                                this.Logger.zsymb(
                                                                    20,
                                                                    9682,
                                                                    30011,
                                                                    'Update sync pin conv v2 FAIL: ' + e
                                                                );
                                                            let s = '';
                                                            if (e)
                                                                if (e.error_code)
                                                                    if (160 === e.error_code)
                                                                        this._fetchPinnedConversations();
                                                                    else
                                                                        s =
                                                                            Rt.default.str('STR_ERR_PIN_CONVERSATION') +
                                                                            ' (' +
                                                                            e.error_code +
                                                                            ')';
                                                                else
                                                                    'ERR_NO_NETWORK' === e.code &&
                                                                        en.b.getStateNetwork() == en.a.DISCONNECT &&
                                                                        (s =
                                                                            t === rn
                                                                                ? Rt.default.str(
                                                                                      'STR_ERR_NETWORK_PIN_CONVERSATION'
                                                                                  )
                                                                                : Rt.default.str(
                                                                                      'STR_ERR_NETWORK_UNPIN_CONVERSATION'
                                                                                  ));
                                                            i(s);
                                                        });
                                            });
                                        }
                                        _isRemoteDataChanged(e) {
                                            const t = Array.from(this.data.values())
                                                .sort((e, t) => t.priority - e.priority)
                                                .map((e) => e.id);
                                            if (e.length !== t.length) return !0;
                                            let s = !1;
                                            return (
                                                e.forEach((e, i) => {
                                                    e !== t[i] && (s = !0);
                                                }),
                                                s
                                            );
                                        }
                                        _onFetchPin(e) {
                                            this.Logger.zsymb(0, 9682, 30012, 'onFetchPin', e),
                                                (this.isDataLastest = !0),
                                                (this.lastFetchTime = ii.a.getTimeNow()),
                                                (this.reFetchCount = 0);
                                            let t = ii.a.getTimeNow();
                                            this._setFetchInterval();
                                            const s = [],
                                                i = [];
                                            for (let n = 0; n < e.length; n++)
                                                this._verifyPin(e[n]) ? i.push(e[n]) : this.unpin([e[n]], !0);
                                            if (this._isRemoteDataChanged(i)) {
                                                for (const e of Array.from(this.data.values()))
                                                    i.find((t) => t === e.id) ||
                                                        (this.data.delete(e.id),
                                                        Object(Pe.g)(this.name, e.id),
                                                        s.push({ id: e.id, priority: 0 }));
                                                for (let e = 0; e < i.length; e++) {
                                                    const n = this._newPinItem(i[e], t),
                                                        r = this.isPinned(i[e]);
                                                    this.data.set(i[e], n),
                                                        r || Object(Pe.g)(this.name, i[e]),
                                                        t--,
                                                        s.push(n);
                                                }
                                                this.Logger.zsymb(
                                                    0,
                                                    9682,
                                                    30013,
                                                    '[After Fetch]',
                                                    Array.from(this.data.values())
                                                ),
                                                    s.length && this._broadcastEvent(It.b.ChangePinConv, s),
                                                    this._updateInDB();
                                            }
                                        }
                                        _sendToServer() {
                                            this._syncServer(Array.from(this.data.keys()), rn);
                                        }
                                        getItem(e, t) {
                                            return this.data.get(e.key);
                                        }
                                        getList(e, t) {
                                            return Array.from(this.data.keys());
                                        }
                                        onGetItemFailure(e, t) {
                                            this.Logger.zsymb(
                                                18,
                                                9682,
                                                30014,
                                                'onGetItemFailure - key:',
                                                e,
                                                ' - error',
                                                t
                                            );
                                        }
                                        onGetListFailure(e, t) {
                                            this.Logger.zsymb(
                                                18,
                                                9682,
                                                30015,
                                                'onGetItemFailure - key:',
                                                e,
                                                ' - error',
                                                t
                                            );
                                        }
                                        _updateInDB() {
                                            if (!this.data) return;
                                            const e = u.a.getInstance();
                                            this.data.size
                                                ? e.setItemForCurrentUser(
                                                      tn,
                                                      JSON.stringify(Array.from(this.data.values()))
                                                  )
                                                : e.removeItemForCurrentUser(tn);
                                        }
                                    })
                                ) || Ji)
                        ) || Ji)
                );
                var on,
                    dn = s('MnJw');
                Object(pt.b)(dn.a)(
                    (on =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (on =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (on = class extends G.b {
                                        constructor() {
                                            super();
                                        }
                                        onUpdateListArchivedChat(e) {
                                            this.dispatchEvent(new It.a(It.b.UpdateListArchivedChat, e));
                                        }
                                        onOffArchivedChat(e) {
                                            this.dispatchEvent(new It.a(It.b.OnOffArchivedChat, '', { status: e }));
                                        }
                                    })
                                ) || on)
                        ) || on)
                );
                d.ModuleContainer.registerSingleton(xs.b, Ws),
                    d.ModuleContainer.registerSingleton(ti.a, Ys),
                    d.ModuleContainer.registerSingleton(xs.a, Vs);
                var ln,
                    cn = s('Xvw2'),
                    hn = s('5uwv'),
                    un = s('lCn6'),
                    gn = s('kg13'),
                    mn = s('dJFb');
                const pn = 2,
                    fn = { userId: '', friendRequestType: pn, friendRequestSource: 85 };
                var vn;
                !(function (e) {
                    (e.SUGGEST = 'suggest'), (e.REQUEST = 'request'), (e.UNREADREQ = 'unread-req');
                })(vn || (vn = {}));
                Object(pt.b)(cn.b)(
                    (ln =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (ln =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (ln = class extends G.b {
                                        constructor() {
                                            super(),
                                                (this.sugguestList = void 0),
                                                (this.requestList = void 0),
                                                (this.unreadFRList = void 0),
                                                (this._ebFriendRequestSend = (e) => {
                                                    const t = this.unreadFRList.filter((t) => t !== e);
                                                    t.length !== this.unreadFRList.length &&
                                                        (le.default.removeFriend(e),
                                                        He.default.logCoreError(
                                                            '[reddot-check] SEND_FRIEND_REQUEST: ' + JSON.stringify(e)
                                                        ),
                                                        (this.unreadFRList = t),
                                                        Object(Pe.h)(this.name, vn.UNREADREQ));
                                                }),
                                                (this._ebFriendFetch = (e) => {
                                                    for (let t in e)
                                                        if (e.hasOwnProperty(t)) {
                                                            const e = this.requestList.slice();
                                                            for (let s = 0; s < e.length; s++)
                                                                if (e[s] === t) {
                                                                    e.splice(s, 1);
                                                                    break;
                                                                }
                                                            e.length !== this.requestList.length &&
                                                                ((this.requestList = e),
                                                                Object(Pe.h)(this.name, vn.REQUEST));
                                                        }
                                                }),
                                                (this._ebFrReqFetch = (e) => {
                                                    He.default.log(
                                                        'friendNotificationAction: friend requests fetched',
                                                        e
                                                    );
                                                    const t = this.requestList.reduce(
                                                            (e, t) => (e[t] || (e[t] = !0), e),
                                                            {}
                                                        ),
                                                        s = this.requestList.slice();
                                                    for (let i of e) t[i.userId] || s.unshift(i);
                                                    (this.requestList = s), Object(Pe.h)(this.name, vn.REQUEST);
                                                }),
                                                (this._ebFrReqRemove = (e) => {
                                                    He.default.log(
                                                        'friendNotificationAction: friend requests removed',
                                                        e
                                                    );
                                                    const t = this.requestList.filter((t) => -1 === e.indexOf(t));
                                                    t.length !== this.requestList.length &&
                                                        ((this.requestList = t), Object(Pe.h)(this.name, vn.REQUEST)),
                                                        this.onFriendListNotificationsChange({
                                                            action: 'remove',
                                                            ids: e,
                                                        });
                                                }),
                                                (this.name = cn.a),
                                                (this.data = new Map()),
                                                (this.key = 'userId'),
                                                (this.sugguestList = []),
                                                (this.requestList = []),
                                                (this.unreadFRList = []),
                                                this.listenEvents();
                                        }
                                        listenEvents() {
                                            Je.default.subscribe((e, t) => {
                                                switch (e) {
                                                    case Ze.ChatBoxActions.SEND_FRIEND_REQUEST:
                                                        this._ebFriendRequestSend(t);
                                                        break;
                                                    case Ze.FetchActions.FRIENDS_FETCHED:
                                                        this._ebFriendFetch(t);
                                                        break;
                                                    case Ze.FetchActions.FRIEND_REQUESTS_FETCHED:
                                                        this._ebFrReqFetch(t);
                                                        break;
                                                    case Ze.FetchActions.FRIEND_REQUESTS_REMOVED:
                                                        this._ebFrReqRemove(t);
                                                }
                                            });
                                        }
                                        onAddFriend(e) {
                                            gn.a.removeSuggest(e.userId),
                                                this.onFriendListNotificationsChange({
                                                    action: 'remove',
                                                    ids: [e.userId],
                                                });
                                        }
                                        onReceiveFriendRequests(e) {
                                            if (!e || e.length < 1) return;
                                            for (let s = 0; s < e.length; s++) {
                                                let t = e[s];
                                                t && gn.a.removeSuggest(t.userId);
                                            }
                                            mn.d.setUnreadRequest(1);
                                            for (let s = 0; s < e.length; s++)
                                                e[s] && wt.p.addNewFriendItem(e[s].userId);
                                            ot.a.UnreadDataManager.updateUnreadCount(
                                                v.FAKE_CONVERSATION_ID.FRIEND_CENTER,
                                                mn.d.getUnreadRequest()
                                            );
                                            let t = e.map((e) => ({
                                                dataInfo: Object(i.a)(
                                                    Object(i.a)({}, e),
                                                    {},
                                                    {
                                                        recommInfo: {
                                                            message: e.friendRequestMsg,
                                                            source: e.friendRequestSource,
                                                        },
                                                        recommType: pn,
                                                    }
                                                ),
                                                recommItemType: e.friendRequestType,
                                            }));
                                            gn.a.addRequest(t),
                                                this.broadcastEvent(hn.b.ReceiveRequest, '', {
                                                    uids: e.map((e) => e.userId),
                                                });
                                        }
                                        onRemoveSuggest(e, t, s) {
                                            return gn.a.removeSuggestFriend(e, t, s).then((t) => {
                                                this.broadcastEvent(hn.b.RemoveSuggest, e);
                                            });
                                        }
                                        onPromoteFriends() {
                                            ot.a.UnreadDataManager.updateUnreadCount(
                                                v.FAKE_CONVERSATION_ID.FRIEND_CENTER,
                                                1
                                            );
                                        }
                                        onFriendRequestFetched() {}
                                        onFriendListNotificationsChange(e) {
                                            if (!e.ids || !e.ids.length)
                                                return void (
                                                    'clear' === e.action &&
                                                    ((this.unreadFRList = []), Object(Pe.h)(this.name, vn.UNREADREQ))
                                                );
                                            let t = this.unreadFRList;
                                            if ('remove' === e.action) t = t.filter((t) => -1 === e.ids.indexOf(t));
                                            else if ('add' === e.action) {
                                                const s = [];
                                                for (let i of e.ids) -1 === t.indexOf(i) && s.push(i);
                                                s.length && (t = t.concat(s));
                                            }
                                            t.length !== this.unreadFRList.length &&
                                                ((this.unreadFRList = t), Object(Pe.h)(this.name, vn.UNREADREQ));
                                        }
                                        acceptFriendRequest(e, t) {
                                            return (
                                                void 0 === t && (t = Mt.c),
                                                new Promise((s, n) => {
                                                    const r = this.data.get(e);
                                                    if (!r)
                                                        return ys.a
                                                            .acceptAddFriend(e)
                                                            .then((i) => {
                                                                Tt.ModalManagerV2.openModal({
                                                                    windowId: t,
                                                                    name: v.ModalIdentitiesDefine.BLOCK_STORIES,
                                                                    params: { userId: e, windowId: t },
                                                                }),
                                                                    s(!0);
                                                            })
                                                            .catch(n);
                                                    let a;
                                                    if (r.friendRequestType === v.FRIEND_REQUEST_TYPE_SUGGEST) {
                                                        if (r.requested) return (a = 104097), vt.e.logAction(a), s(!1);
                                                        const o = Rt.default.trans(
                                                            'STR_MSG_DEFAULT_REQ_ADD_FR',
                                                            rt.default.getMiniProfileMe().zaloName
                                                        );
                                                        ys.a
                                                            .requestAddFriend(e, o, r.friendRequestSource)
                                                            .then(() => {
                                                                Tt.ModalManagerV2.openModal({
                                                                    windowId: t,
                                                                    name: v.ModalIdentitiesDefine.BLOCK_STORIES,
                                                                    params: { userId: e, windowId: t },
                                                                }),
                                                                    le.default.removeFriend(e),
                                                                    gn.a.removeSuggest(e);
                                                                const n = Object(i.a)(
                                                                    Object(i.a)({}, r),
                                                                    {},
                                                                    { requested: !0 }
                                                                );
                                                                this.broadcastEvent(hn.b.SentFriendReq, e),
                                                                    this.data.set(e, n),
                                                                    this.onFriendListNotificationsChange({
                                                                        action: 'remove',
                                                                        ids: [e],
                                                                    }),
                                                                    s(!0);
                                                            })
                                                            .catch((e) => {
                                                                this.handleFailureFriendRq(e), n(e);
                                                            }),
                                                            (a = 104096);
                                                    } else
                                                        ys.a
                                                            .acceptAddFriend(e)
                                                            .then(() => {
                                                                this.data.delete(e),
                                                                    Object(Pe.e)(this.name, e),
                                                                    this.onFriendListNotificationsChange({
                                                                        action: 'remove',
                                                                        ids: [e],
                                                                    }),
                                                                    this.broadcastEvent(hn.b.AcceptRequest, e),
                                                                    un.a.getUser(e).then((t) => {
                                                                        Je.default.send(
                                                                            Ze.FetchActions.FRIENDS_FETCHED,
                                                                            {
                                                                                [e]: Object(i.a)(
                                                                                    Object(i.a)(
                                                                                        {},
                                                                                        He.default.reformatConversationFromFriend(
                                                                                            t
                                                                                        )
                                                                                    ),
                                                                                    {},
                                                                                    { isFr: 1 }
                                                                                ),
                                                                            }
                                                                        );
                                                                    }),
                                                                    le.default.getAcceptNewFriend(r),
                                                                    Tt.ModalManagerV2.openModal({
                                                                        windowId: t,
                                                                        name: v.ModalIdentitiesDefine.BLOCK_STORIES,
                                                                        params: { userId: e, windowId: t },
                                                                    }),
                                                                    s(!0);
                                                            })
                                                            .catch((e) => {
                                                                this.handleFailureFriendRq(e), n(e);
                                                            }),
                                                            (a = 104095);
                                                    a && vt.e.logAction(a);
                                                })
                                            );
                                        }
                                        async rejectFriendRequest(e) {
                                            const t = this.data.get(e),
                                                s = () => {
                                                    Ft.a.createSuccess(Rt.default.str('STR_TOAST_REJECT_REQUEST')),
                                                        le.default.removeFriend(e),
                                                        gn.a.removeSuggest(e),
                                                        this.broadcastEvent(hn.b.RejectRequest, e);
                                                },
                                                i = (e) => {
                                                    He.default.logCoreError(e),
                                                        e && e.error_message && Ft.a.createError(e.error_message);
                                                };
                                            t && t.friendRequestSource
                                                ? qe.default
                                                      .removeRecommendedFriend(e, t.friendRequestSource)
                                                      .then(s)
                                                      .catch(i)
                                                : ys.a.rejectRequestAddFriend(e).then(s).catch(i),
                                                this.data.delete(e),
                                                this.onFriendListNotificationsChange({ action: 'remove', ids: [e] }),
                                                vt.e.logAction(104094);
                                        }
                                        undoRequestFriend(e) {
                                            e &&
                                                ys.a.undoRequestAddFriend(e).catch((e) => {
                                                    e.error_message && Ft.a.createError(e.error_message);
                                                });
                                        }
                                        clearUnreadFriendRequest() {
                                            ot.a.UnreadDataManager.updateUnreadCount(
                                                v.FAKE_CONVERSATION_ID.FRIEND_CENTER,
                                                0
                                            ),
                                                (this.unreadFRList = []),
                                                Object(Pe.h)(this.name, vn.UNREADREQ);
                                        }
                                        getAllFriendRequests() {
                                            return new Promise((e, t) => {
                                                const s = gn.a.getRecommendedFriendsV2(!1, !1);
                                                if (!s) return e({});
                                                e(this.filterFriendRequest(s));
                                            });
                                        }
                                        getAllFriendRequestsSync() {
                                            const e = gn.a.getRecommendedFriendsSync();
                                            return e ? this.filterFriendRequest(e) : {};
                                        }
                                        init() {
                                            le.default.getFriends(null, !0).then((e) => {
                                                if (e) {
                                                    const t = le.default.getLastContactListOpenTime(),
                                                        s = e
                                                            .filter((e) => e && e.friendRequestFetchTime > t)
                                                            .map((e) => e.userId);
                                                    s.length &&
                                                        this.onFriendListNotificationsChange({ action: 'add', ids: s });
                                                }
                                            });
                                        }
                                        getItem(e) {
                                            return fn;
                                        }
                                        getList(e) {
                                            return e.key === vn.UNREADREQ ? this.unreadFRList : [];
                                        }
                                        onGetItemFailure(e) {}
                                        onGetListFailure(e) {}
                                        handleFailureFriendRq(e) {
                                            if ((He.default.logCoreError(e), e && e.error_message)) {
                                                let t = e.error_message;
                                                [224, 251].includes(e.error_code) &&
                                                    (t = Rt.default.trans(`STR_FRIEND_REQUEST_FAIL_${e.error_code}`, [
                                                        '' + We.default.limitFriends,
                                                    ])),
                                                    Ft.a.createMessage(t, 3e3);
                                            }
                                        }
                                        filterFriendRequest(e) {
                                            const t = {};
                                            for (let s in e)
                                                if (e.hasOwnProperty(s)) {
                                                    let i = e[s];
                                                    i &&
                                                        i.dataInfo.recommType === pn &&
                                                        ((t[s] = i), (t[s].friendRequestType = i.dataInfo.recommType));
                                                }
                                            return t;
                                        }
                                        broadcastEvent(e, t, s) {
                                            this.dispatchEvent(new hn.a(e, t, s)),
                                                this.dispatchEvent(
                                                    new hn.a(
                                                        hn.b.FriendCenterChange,
                                                        t,
                                                        Object(i.a)(Object(i.a)({}, s), {}, { act: e })
                                                    )
                                                );
                                        }
                                    })
                                ) || ln)
                        ) || ln)
                );
                var bn = s('5cla'),
                    yn = s('WV6O');
                class In {
                    static resetNewFriendList() {
                        delete this.newListFriend, (this.newListFriend = void 0);
                    }
                    static addNewFriendUid(e) {
                        void 0 === this.newListFriend && this.getNewFriendList(), this.newListFriend.push(e);
                    }
                    static getNewFriendList() {
                        le.default.removeNewFriend('', !0);
                        let e = [];
                        try {
                            const t = u.a.getInstance().getItemForCurrentUser('f_nf');
                            t && (e = JSON.parse(t));
                        } catch (t) {}
                        this.newListFriend = e.map((e) => e.userId);
                    }
                    static getFriendList(e) {
                        const { userId: t } = e,
                            s = [];
                        return new Promise((e, i) => {
                            rt.default
                                .getFriends()
                                .then((i) => {
                                    if (i) {
                                        const n = Boolean(St.g.getConfigShowAllUser(t));
                                        for (let e = 0; e < i.length; e++)
                                            (1 === i[e].isFr || i[e].isFr || i[e].userId === We.default.supportPage) &&
                                                i[e].userId != t &&
                                                i[e].isValid &&
                                                i[e].userId != We.default.sendToMeId &&
                                                (n || i[e].isActive || i[e].isActivePC || i[e].isActiveWeb) &&
                                                s.push(i[e].userId);
                                        e(s);
                                    } else e([]);
                                })
                                .catch((e) => i(e));
                        });
                    }
                    static getFriendInfo(e) {
                        var t;
                        const { userId: s } = e,
                            i = rt.default.getProfileFriendSync(s);
                        return i
                            ? (void 0 === this.newListFriend && this.getNewFriendList(),
                              {
                                  userId: i.userId,
                                  avatar: i.avatar,
                                  displayName: i.displayName,
                                  isFr: i.isFr,
                                  zaloName: i.zaloName,
                                  bizPkg: i.bizPkg,
                                  bizInfo: i.bizInfo,
                                  isNewFriend:
                                      (null === (t = this.newListFriend) || void 0 === t ? void 0 : t.includes(s)) ||
                                      !1,
                                  isBlocked: i.isBlocked,
                              })
                            : null;
                    }
                }
                In.newListFriend = void 0;
                class _n {
                    static getGroupList(e) {
                        return new Promise((e, t) => {
                            jt.default
                                .getGroupsList()
                                .then((t) => {
                                    const s = t.map((e) => e.userId);
                                    e(s);
                                })
                                .catch(t);
                        });
                    }
                    static getGroupInfo(e) {
                        const { userId: t } = e;
                        return new Promise((e, s) => {
                            jt.default
                                .getGroupById(t)
                                .then((t) => {
                                    e({
                                        userId: t.userId,
                                        avatar: t.avatar,
                                        displayName: t.displayName,
                                        topMember: t.topMember,
                                        totalMember: t.totalMember,
                                        creatorId: t.creatorId,
                                    });
                                })
                                .catch(s);
                        });
                    }
                    static getGroupInfoSync(e) {
                        const { userId: t } = e,
                            s = jt.default.getGroupByIdSync(t);
                        return s
                            ? {
                                  userId: s.userId,
                                  avatar: s.avatar,
                                  displayName: s.displayName,
                                  topMember: s.topMember,
                                  totalMember: s.totalMember,
                                  creatorId: s.creatorId,
                              }
                            : null;
                    }
                }
                class Mn {
                    static getRecommendFriendList() {
                        return new Promise((e, t) => {
                            qe.default
                                .getRecommendedFriends()
                                .then((t) => e(t.recommItems))
                                .catch(t);
                        });
                    }
                    static getRelatedGroup(e) {
                        return new Promise((t, s) => {
                            qe.default.getRelatedGroup(e).then(t).catch(s);
                        });
                    }
                    static getRequestedFriendList() {
                        return new Promise((e, t) => {
                            qe.default.getRequestedFriends().then(e).catch(t);
                        });
                    }
                    static acceptAddFriend(e) {
                        return ys.a.acceptAddFriend(e);
                    }
                    static rejectAddFriend(e) {
                        return ys.a.rejectRequestAddFriend(e);
                    }
                    static makeUndoSentRequestFriend(e) {
                        return ys.a.undoRequestAddFriend(e.userId);
                    }
                    static removeSuggestFriend(e) {
                        return new Promise((t, s) => {
                            qe.default.removeRecommendedFriendV2(e.uid, e.src, e.type).then(t).catch(s);
                        });
                    }
                }
                var Cn;
                const Tn = { currentView: yn.c.FRIEND_LIST, unread: { newFriendRequests: [], newGroupRequests: [] } },
                    On = '1',
                    En = 'ctt_l_a',
                    Sn = 'ctt_l_r';
                Object(pt.b)(bn.b)(
                    (Cn =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Cn =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Cn = class {
                                        constructor() {
                                            (this.type = void 0),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.currentTab = void 0),
                                                (this.data = new Map()),
                                                (this._Logger = void 0),
                                                (this.name = bn.a),
                                                (this.key = bn.a),
                                                this.data.set(On, Tn),
                                                (this.currentTab = '');
                                        }
                                        get Logger() {
                                            return (
                                                this._Logger ||
                                                    (this._Logger = d.ModuleContainer.resolve(
                                                        N.ZLoggerFactory
                                                    ).createZLogger(kt.b.contactTabV2, [this.name])),
                                                this._Logger
                                            );
                                        }
                                        _updateState(e, t, s) {
                                            void 0 === t && (t = On),
                                                void 0 === s && (s = !0),
                                                this.data.set(t, e),
                                                s && Object(Pe.g)(this.name, t);
                                        }
                                        _getState(e) {
                                            void 0 === e && (e = On);
                                            return this.data.get(e);
                                        }
                                        _getAccessTime() {
                                            try {
                                                return JSON.parse(u.a.getInstance().getItemForCurrentUser(En));
                                            } catch (e) {
                                                return (
                                                    this.Logger.zsymb(
                                                        18,
                                                        9649,
                                                        3e4,
                                                        '[_getAccessTime], error: ' + JSON.stringify(e)
                                                    ),
                                                    null
                                                );
                                            }
                                        }
                                        _setAccessTime(e) {
                                            u.a.getInstance().setItemForCurrentUser(En, JSON.stringify(e));
                                        }
                                        _setLastRequestFriendTime(e, t, s) {
                                            let i = [];
                                            try {
                                                i = JSON.parse(u.a.getInstance().getItemForCurrentUser(Sn)) || [];
                                            } catch (r) {
                                                this.Logger.zsymb(
                                                    18,
                                                    9649,
                                                    30001,
                                                    '[_setLastRequestFriendTime], error: ' + JSON.stringify(r)
                                                );
                                            }
                                            let n = [];
                                            switch (e) {
                                                case 'NEW':
                                                    i.find((e) => (null == e ? void 0 : e.userId) === s)
                                                        ? ((n = i.filter((e) => e.userId !== s)),
                                                          (n = [{ ts: t, userId: s }, ...i]))
                                                        : (n = [{ ts: t, userId: s }, ...i]);
                                                    break;
                                                case 'REMOVE':
                                                    n = i.filter((e) => e.userId !== s);
                                            }
                                            u.a.getInstance().setItemForCurrentUser(Sn, JSON.stringify(n));
                                        }
                                        _getLastRequestAddFriendTime() {
                                            let e;
                                            try {
                                                e = JSON.parse(u.a.getInstance().getItemForCurrentUser(Sn));
                                            } catch (t) {
                                                this.Logger.zsymb(
                                                    18,
                                                    9649,
                                                    30002,
                                                    '[_getLastRequestAddFriendTime], error: ' + JSON.stringify(t)
                                                );
                                            }
                                            return e ? e[0] : null;
                                        }
                                        _onChangeView(e) {
                                            switch (
                                                (d.ModuleContainer.resolve(ft.SidebarController).updateSelectedId(null),
                                                e)
                                            ) {
                                                case yn.c.FRIEND_LIST:
                                                    Object(Te.f)({
                                                        type: Ze.SideBarActions.SELECT_FRIEND_LIST,
                                                        payload: { userId: '999' },
                                                    });
                                                    break;
                                                case yn.c.GROUP_LIST:
                                                    Object(Te.f)({
                                                        type: Ze.SideBarActions.SELECT_GROUP_CENTER,
                                                        payload: { userId: '999' },
                                                    });
                                                    break;
                                                case yn.c.FRIEND_REQUEST:
                                                    Object(Te.f)({
                                                        type: Ze.SideBarActions.SELECT_FRIEND_CENTER,
                                                        payload: { userId: '999' },
                                                    });
                                            }
                                        }
                                        _onUpdateUnreadRequest(e, t) {
                                            const s = this._getState();
                                            if (!s) return;
                                            let n = s.unread;
                                            switch (t) {
                                                case 'FRIEND':
                                                    n.newFriendRequests.push(e);
                                                    break;
                                                case 'GROUP':
                                                    n.newGroupRequests.push(e);
                                            }
                                            this._updateState(
                                                Object(i.a)(Object(i.a)({}, s), {}, { unread: n }),
                                                On,
                                                !0
                                            );
                                        }
                                        _clearUnreadRequest() {
                                            const e = this._getState();
                                            if (!e) return;
                                            let t = e.unread;
                                            (t.newFriendRequests = []),
                                                (t.newGroupRequests = []),
                                                this._updateState(
                                                    Object(i.a)(Object(i.a)({}, e), {}, { unread: t }),
                                                    On,
                                                    !0
                                                );
                                        }
                                        init(e) {
                                            throw new Error('Method not implemented.');
                                        }
                                        getItem(e, t) {
                                            return this._getState(e.key);
                                        }
                                        getList(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetItemFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetListFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultItem() {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultList() {
                                            throw new Error('Method not implemented.');
                                        }
                                        resetTabData() {
                                            (this.currentTab = ''),
                                                In.resetNewFriendList(),
                                                d.ModuleContainer.resolve(bn.b).resetData(),
                                                d.ModuleContainer.resolve(bn.f).resetData(),
                                                d.ModuleContainer.resolve(bn.e).resetData(),
                                                d.ModuleContainer.resolve(bn.j).resetData(),
                                                d.ModuleContainer.resolve(bn.i).resetData(),
                                                d.ModuleContainer.resolve(bn.m).resetData();
                                        }
                                        resetData() {
                                            const e = this._getState();
                                            e &&
                                                this._updateState(
                                                    Object(i.a)(
                                                        Object(i.a)({}, e),
                                                        {},
                                                        { currentView: yn.c.FRIEND_LIST }
                                                    )
                                                );
                                        }
                                        changeView(e) {
                                            const t = this._getState();
                                            t &&
                                                this._updateState(
                                                    Object(i.a)(Object(i.a)({}, t), {}, { currentView: e }),
                                                    On,
                                                    !0
                                                ),
                                                (this.currentTab = e),
                                                this._onChangeView(e);
                                        }
                                        onClickContabTabEntry() {
                                            if (document.getElementById('ContactTabV2')) {
                                                const e = this._getState(),
                                                    t = (null == e ? void 0 : e.currentView) || Tn.currentView;
                                                this._onChangeView(t);
                                            }
                                        }
                                        onContactTab(e) {
                                            this._setAccessTime(e), this._clearUnreadRequest();
                                        }
                                        getDefaultView() {
                                            if (this.currentTab) return this.currentTab;
                                            const e = this._getAccessTime(),
                                                t = this._getLastRequestAddFriendTime();
                                            if (!t) return (this.currentTab = yn.c.FRIEND_LIST), this.currentTab;
                                            const s =
                                                    !We.default.contactTabV2.enable_rule_last_view_friend_req ||
                                                    (e && t.ts < e),
                                                i = t.ts < Date.now() - 864e5;
                                            return (
                                                (this.currentTab = i && s ? yn.c.FRIEND_LIST : yn.c.FRIEND_REQUEST),
                                                this.currentTab
                                            );
                                        }
                                        onUpdateRequestTracking(e, t, s, i) {
                                            if (
                                                ('NEW' === t
                                                    ? this._onUpdateUnreadRequest(i, e)
                                                    : 'REMOVE' === t && this._clearUnreadRequest(),
                                                'FRIEND' === e)
                                            )
                                                this._setLastRequestFriendTime(t, s || 0, i);
                                        }
                                        onInitUnreadRequest() {
                                            const e = this._getState();
                                            let t = (null == e ? void 0 : e.unread) || Tn.unread;
                                            const s = (null == e ? void 0 : e.currentView) || Tn.currentView,
                                                i = this._getAccessTime(),
                                                n = this._getLastRequestAddFriendTime();
                                            n &&
                                                i &&
                                                (i < n.ts && t.newFriendRequests.push(n.userId),
                                                this._updateState({ currentView: s, unread: t }, On, !0));
                                        }
                                    })
                                ) || Cn)
                        ) || Cn)
                );
                var wn = s('iq5K');
                const Dn = (e, t) => {
                        const s = He.default.simpleStripVietnamese(t).split(' '),
                            i = He.default.simpleStripVietnamese(e).split(' ');
                        return (() => {
                            const e = [];
                            for (const t of s) {
                                let s = !1;
                                for (let n = 0; n < i.length; ++n)
                                    if (i[n].startsWith(t) && !e.includes(n)) {
                                        e.push(n), (s = !0);
                                        break;
                                    }
                                if (!s) return !1;
                            }
                            return !0;
                        })();
                    },
                    Ln = (e) =>
                        new Promise((t, s) => {
                            if (!e) return t(e);
                            setTimeout(() => {
                                t(e);
                            }, e);
                        });
                var Fn;
                Object(pt.b)(bn.f)(
                    (Fn =
                        Object(d.injectable)()(
                            (Fn =
                                (function (e, t) {
                                    return d.ModuleContainer.inject(bn.e)(e, void 0, 0);
                                })(
                                    (Fn =
                                        (function (e, t) {
                                            return d.ModuleContainer.inject(ft.LabelDataManager)(e, void 0, 1);
                                        })(
                                            (Fn =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (Fn =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === bn.e ? Object : bn.e,
                                                            void 0 === ft.LabelDataManager
                                                                ? Object
                                                                : ft.LabelDataManager,
                                                        ])(
                                                            (Fn = class {
                                                                constructor(e, t) {
                                                                    (this.friendInfoManager = e),
                                                                        (this.labelDataManager = t),
                                                                        (this.type = void 0),
                                                                        (this.name = void 0),
                                                                        (this.key = void 0),
                                                                        (this.listState = void 0),
                                                                        (this.listFriend = void 0),
                                                                        (this.initListFriend = void 0),
                                                                        (this.currentPage = void 0),
                                                                        (this.didSort = void 0),
                                                                        (this.eventBusInstance = void 0),
                                                                        (this._Logger = void 0),
                                                                        (this.name = bn.d),
                                                                        (this.key = bn.d),
                                                                        (this.listState = wn.d),
                                                                        (this.listFriend = []),
                                                                        (this.initListFriend = []),
                                                                        (this.currentPage = 1),
                                                                        (this.didSort = !1),
                                                                        (this.eventBusInstance = null);
                                                                }
                                                                get Logger() {
                                                                    return (
                                                                        this._Logger ||
                                                                            (this._Logger = d.ModuleContainer.resolve(
                                                                                N.ZLoggerFactory
                                                                            ).createZLogger(kt.b.contactTabV2, [
                                                                                this.name,
                                                                            ])),
                                                                        this._Logger
                                                                    );
                                                                }
                                                                _signalRenderList() {
                                                                    Object(Pe.h)(this.name, 'all');
                                                                }
                                                                _signalRenderItem() {
                                                                    Object(Pe.g)(this.name, 'all');
                                                                }
                                                                _signalRenderBoth() {
                                                                    Object(Pe.g)(this.name, 'all'),
                                                                        Object(Pe.h)(this.name, 'all');
                                                                }
                                                                _onRemoveFriend(e) {
                                                                    this.listFriend.includes(e.userId) &&
                                                                        (this.listFriend.splice(
                                                                            this.listFriend.indexOf(e.userId),
                                                                            1
                                                                        ),
                                                                        this.initListFriend.splice(
                                                                            this.initListFriend.indexOf(e.userId),
                                                                            1
                                                                        ),
                                                                        (this.listState.totalRecord =
                                                                            this.listFriend.length),
                                                                        this._signalRenderBoth());
                                                                }
                                                                _onAddFriend(e) {
                                                                    this.listFriend.includes(e.userId) ||
                                                                        (this.listFriend.unshift(e.userId),
                                                                        this.initListFriend.unshift(e.userId),
                                                                        In.addNewFriendUid(e.userId),
                                                                        this._signalRenderList());
                                                                }
                                                                _getItemInfo(e) {
                                                                    return (
                                                                        this.friendInfoManager.getItem(
                                                                            { key: e, version: 1, extraData: null },
                                                                            null
                                                                        ) ||
                                                                        this.friendInfoManager.loadInfoNotRender({
                                                                            userId: e,
                                                                        })
                                                                    );
                                                                }
                                                                _onBlockFriend(e) {
                                                                    this.friendInfoManager.onLoadInfo({
                                                                        userId: e.userId,
                                                                    });
                                                                }
                                                                _onUnBlockFriend(e) {
                                                                    this.friendInfoManager.onLoadInfo({
                                                                        userId: e.userId,
                                                                    });
                                                                }
                                                                _onEditAlias(e) {
                                                                    this.friendInfoManager.onLoadInfo({
                                                                        userId: e.userId,
                                                                    }),
                                                                        (this.listFriend = this._handleFilter(
                                                                            this.listState.searching.searchText,
                                                                            this.listState.searching.sorter,
                                                                            this.listState.searching.filter,
                                                                            !this.isDidSort(),
                                                                            !1
                                                                        )),
                                                                        (this.listState.totalRecord =
                                                                            this.listFriend.length),
                                                                        this._signalRenderBoth();
                                                                }
                                                                _onUpdateTagConv(e, t) {
                                                                    void 0 === t && (t = 'add');
                                                                    let s = !1;
                                                                    e.convIds.forEach((i) => {
                                                                        if (
                                                                            (this.friendInfoManager.onLoadInfo({
                                                                                userId: i,
                                                                            }),
                                                                            this.listState.searching.filter.label.id &&
                                                                                this.listState.searching.filter.label
                                                                                    .id === +e.labelId)
                                                                        ) {
                                                                            const e = this.listFriend.findIndex(
                                                                                (e) => e === i
                                                                            );
                                                                            'remove' === t && -1 !== e
                                                                                ? (this.listFriend.splice(e, 1),
                                                                                  (this.listState.totalRecord =
                                                                                      Math.max(
                                                                                          this.listState.totalRecord -
                                                                                              1,
                                                                                          0
                                                                                      )),
                                                                                  (s = !0))
                                                                                : 'add' === t &&
                                                                                  -1 === e &&
                                                                                  (this.listFriend.push(i),
                                                                                  (this.listFriend = this._handleFilter(
                                                                                      this.listState.searching
                                                                                          .searchText,
                                                                                      this.listState.searching.sorter,
                                                                                      this.listState.searching.filter,
                                                                                      !1,
                                                                                      !1
                                                                                  )),
                                                                                  (this.listState.totalRecord =
                                                                                      this.listFriend.length),
                                                                                  (s = !0));
                                                                        }
                                                                    }),
                                                                        s && this._signalRenderBoth();
                                                                }
                                                                addComponentListeners() {
                                                                    rt.default.subscribeEventFriend(
                                                                        v.EventFriend.REMOVE_FRIEND,
                                                                        this._onRemoveFriend.bind(this)
                                                                    ),
                                                                        rt.default.subscribeEventFriend(
                                                                            v.EventFriend.ADD_FRIEND,
                                                                            this._onAddFriend.bind(this)
                                                                        ),
                                                                        rt.default.subscribeEventFriend(
                                                                            v.EventFriend.BLOCK_FRIEND,
                                                                            this._onBlockFriend.bind(this)
                                                                        ),
                                                                        rt.default.subscribeEventFriend(
                                                                            v.EventFriend.UNBLOCK_FRIEND,
                                                                            this._onUnBlockFriend.bind(this)
                                                                        ),
                                                                        (this.eventBusInstance = Je.default.on(
                                                                            Ze.FetchActions.UPDATE_NAME,
                                                                            this._onEditAlias.bind(this)
                                                                        )),
                                                                        this.labelDataManager.addEventListener(
                                                                            ft.LabelEvents.LabelAddConvs,
                                                                            (e) => {
                                                                                this._onUpdateTagConv(e.payload, 'add');
                                                                            }
                                                                        ),
                                                                        this.labelDataManager.addEventListener(
                                                                            ft.LabelEvents.LabelRemoveConvs,
                                                                            (e) => {
                                                                                this._onUpdateTagConv(
                                                                                    e.payload,
                                                                                    'remove'
                                                                                );
                                                                            }
                                                                        );
                                                                }
                                                                removeComponentListeners() {
                                                                    rt.default.unsubscribeEventFriend(
                                                                        v.EventFriend.REMOVE_FRIEND,
                                                                        this._onRemoveFriend.bind(this)
                                                                    ),
                                                                        rt.default.unsubscribeEventFriend(
                                                                            v.EventFriend.ADD_FRIEND,
                                                                            this._onAddFriend.bind(this)
                                                                        ),
                                                                        rt.default.unsubscribeEventFriend(
                                                                            v.EventFriend.BLOCK_FRIEND,
                                                                            this._onBlockFriend.bind(this)
                                                                        ),
                                                                        rt.default.unsubscribeEventFriend(
                                                                            v.EventFriend.UNBLOCK_FRIEND,
                                                                            this._onUnBlockFriend.bind(this)
                                                                        ),
                                                                        this.eventBusInstance &&
                                                                            this.eventBusInstance.remove(),
                                                                        this.labelDataManager.removeEventListener(
                                                                            ft.LabelEvents.LabelAddConvs,
                                                                            (e) => {
                                                                                this._onUpdateTagConv(e.payload, 'add');
                                                                            }
                                                                        ),
                                                                        this.labelDataManager.removeEventListener(
                                                                            ft.LabelEvents.LabelRemoveConvs,
                                                                            (e) => {
                                                                                this._onUpdateTagConv(
                                                                                    e.payload,
                                                                                    'remove'
                                                                                );
                                                                            }
                                                                        );
                                                                }
                                                                async onLoadList(e) {
                                                                    try {
                                                                        const t = await In.getFriendList(e);
                                                                        (this.listFriend = t),
                                                                            (this.initListFriend = t),
                                                                            (this.listState.totalRecord = t.length),
                                                                            (this.listFriend = this._handleFilter(
                                                                                wn.g.searching.searchText,
                                                                                wn.g.searching.sorter,
                                                                                wn.g.searching.filter,
                                                                                !0,
                                                                                !1
                                                                            )),
                                                                            (this.initListFriend = this._handleFilter(
                                                                                wn.g.searching.searchText,
                                                                                wn.g.searching.sorter,
                                                                                wn.g.searching.filter,
                                                                                !0,
                                                                                !0
                                                                            )),
                                                                            (this.listState.totalRecord =
                                                                                this.listFriend.length),
                                                                            this._signalRenderItem(),
                                                                            this._signalRenderList();
                                                                    } catch (t) {
                                                                        this.Logger.zsymb(
                                                                            18,
                                                                            9651,
                                                                            3e4,
                                                                            '[FriendListController] -> [onLoadList], error: ' +
                                                                                JSON.stringify(t)
                                                                        );
                                                                    }
                                                                }
                                                                onLoadMore() {
                                                                    this.currentPage++, this._signalRenderList();
                                                                }
                                                                onFilterByName(e) {
                                                                    if (!e) return [...this.initListFriend];
                                                                    return [...this.initListFriend].filter((t) => {
                                                                        const s = this._getItemInfo(t);
                                                                        return Dn(
                                                                            (null == s
                                                                                ? void 0
                                                                                : s.displayName.toLowerCase()) || '',
                                                                            e.toLowerCase()
                                                                        );
                                                                    });
                                                                }
                                                                onFilterByLabel(e, t) {
                                                                    if (!e) return t;
                                                                    if (0 === e.length) return [];
                                                                    return t.filter((t) => e.includes(t));
                                                                }
                                                                onFilterAll(e) {
                                                                    return e;
                                                                }
                                                                onFilterHidden(e, t, s) {
                                                                    return t || e
                                                                        ? s
                                                                        : s.filter((e) => !_t.a.isThreadHidden(e));
                                                                }
                                                                onSortAlpha(e, t) {
                                                                    if (e === wn.o.DEFAULT) return t;
                                                                    return t.sort((t, s) => {
                                                                        const i = this._getItemInfo(t),
                                                                            n = this._getItemInfo(s);
                                                                        return ((t, s) => {
                                                                            const i = /^[a-zA-Z]/,
                                                                                n = i.test(
                                                                                    He.default.simpleStripVietnamese(t)
                                                                                ),
                                                                                r = i.test(
                                                                                    He.default.simpleStripVietnamese(s)
                                                                                );
                                                                            switch (e) {
                                                                                case wn.o.ALPHA_INCREASE:
                                                                                    return !n && r
                                                                                        ? 1
                                                                                        : n && !r
                                                                                        ? -1
                                                                                        : t.localeCompare(s);
                                                                                case wn.o.ALPHA_DECREASE:
                                                                                    return !n && r
                                                                                        ? -1
                                                                                        : n && !r
                                                                                        ? 1
                                                                                        : s.localeCompare(t);
                                                                                default:
                                                                                    return 0;
                                                                            }
                                                                        })(
                                                                            (null == i
                                                                                ? void 0
                                                                                : i.displayName.toLowerCase()) ||
                                                                                (null == i
                                                                                    ? void 0
                                                                                    : i.zaloName.toLowerCase()) ||
                                                                                '',
                                                                            (null == n
                                                                                ? void 0
                                                                                : n.displayName.toLowerCase()) ||
                                                                                (null == n
                                                                                    ? void 0
                                                                                    : n.zaloName.toLowerCase()) ||
                                                                                ''
                                                                        );
                                                                    });
                                                                }
                                                                onMovingNewFriend(e) {
                                                                    let t = [],
                                                                        s = [];
                                                                    for (let i = e.length - 1; i >= 0; i--) {
                                                                        const n = this._getItemInfo(e[i]);
                                                                        null != n && n.isNewFriend
                                                                            ? t.unshift(null == n ? void 0 : n.userId)
                                                                            : s.unshift(null == n ? void 0 : n.userId);
                                                                    }
                                                                    return [...t, ...s];
                                                                }
                                                                _handleFilter(e, t, s, i, n) {
                                                                    var r;
                                                                    let a = [];
                                                                    return (
                                                                        (a = this.onFilterByName(e)),
                                                                        (a = this.onFilterByLabel(
                                                                            null == s ||
                                                                                null === (r = s.label) ||
                                                                                void 0 === r
                                                                                ? void 0
                                                                                : r.convs,
                                                                            a
                                                                        )),
                                                                        (a = this.onFilterAll(a)),
                                                                        (a = this.onSortAlpha(t, a)),
                                                                        (a = this.onFilterHidden(n, e, a)),
                                                                        i && (a = this.onMovingNewFriend(a)),
                                                                        a
                                                                    );
                                                                }
                                                                _checkDidSort(e) {
                                                                    return (
                                                                        e !== wn.o.ALPHA_INCREASE
                                                                            ? (this.didSort = !0)
                                                                            : (this.didSort = !1),
                                                                        this.didSort
                                                                    );
                                                                }
                                                                isDidSort() {
                                                                    return this.didSort;
                                                                }
                                                                _updateInitListFriendWithoutDockNewFriends() {
                                                                    (this.initListFriend = this._handleFilter(
                                                                        wn.g.searching.searchText,
                                                                        wn.g.searching.sorter,
                                                                        wn.g.searching.filter,
                                                                        !1,
                                                                        !0
                                                                    )),
                                                                        (this.listState.totalRecord =
                                                                            this.listFriend.length);
                                                                }
                                                                onFilter(e, t, s) {
                                                                    const i = this._checkDidSort(t);
                                                                    i &&
                                                                        this._updateInitListFriendWithoutDockNewFriends(),
                                                                        (this.listFriend = this._handleFilter(
                                                                            e,
                                                                            t,
                                                                            s,
                                                                            !i,
                                                                            !1
                                                                        )),
                                                                        (this.listState.totalRecord =
                                                                            this.listFriend.length),
                                                                        this._signalRenderItem(),
                                                                        this._signalRenderList();
                                                                }
                                                                init(e) {
                                                                    throw new Error('Method not implemented.');
                                                                }
                                                                getItem(e, t) {
                                                                    return this.listState;
                                                                }
                                                                getList(e, t) {
                                                                    return this.listFriend;
                                                                }
                                                                onGetItemFailure(e, t) {
                                                                    throw new Error('Method not implemented.');
                                                                }
                                                                onGetListFailure(e, t) {
                                                                    throw new Error('Method not implemented.');
                                                                }
                                                                getDefaultItem() {
                                                                    throw new Error('Method not implemented.');
                                                                }
                                                                getDefaultList() {
                                                                    throw new Error('Method not implemented.');
                                                                }
                                                                setSearchText(e) {
                                                                    (this.listState.searching.searchText = e),
                                                                        this._signalRenderItem();
                                                                }
                                                                setSorter(e) {
                                                                    (this.listState.searching.sorter = e),
                                                                        this._signalRenderItem();
                                                                }
                                                                setFilter(e) {
                                                                    (this.listState.searching.filter = e),
                                                                        this._signalRenderItem();
                                                                }
                                                                getFilter() {
                                                                    return this.listState.searching.filter;
                                                                }
                                                                getSorter() {
                                                                    return this.listState.searching.sorter;
                                                                }
                                                                resetData() {
                                                                    (this.listFriend = []), (this.initListFriend = []);
                                                                }
                                                                resetState() {
                                                                    (this.listState = {
                                                                        totalRecord: 0,
                                                                        searching: {
                                                                            searchText: '',
                                                                            sorter: wn.o.ALPHA_INCREASE,
                                                                            filter: {
                                                                                label: { convs: null, id: null },
                                                                                admin: '',
                                                                                all: !0,
                                                                            },
                                                                        },
                                                                    }),
                                                                        (this.currentPage = 1),
                                                                        (this.didSort = !1);
                                                                }
                                                            })
                                                        ) || Fn)
                                                ) || Fn)
                                        ) || Fn)
                                ) || Fn)
                        ) || Fn)
                );
                var Rn;
                Object(pt.b)(bn.e)(
                    (Rn =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Rn =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Rn = class {
                                        constructor() {
                                            (this.type = void 0),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.data = new Map()),
                                                (this.name = bn.c),
                                                (this.key = bn.c);
                                        }
                                        init(e) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onLoadInfo(e) {
                                            const t = In.getFriendInfo(e);
                                            t && (this.data.set(e.userId, t), Object(Pe.g)(this.name, e.userId));
                                        }
                                        loadInfoNotRender(e) {
                                            const t = In.getFriendInfo(e);
                                            return t ? (this.data.set(e.userId, t), t) : null;
                                        }
                                        getItem(e, t) {
                                            return this.data.get(e.key);
                                        }
                                        getList(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetItemFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetListFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultItem() {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultList() {
                                            throw new Error('Method not implemented.');
                                        }
                                        resetData() {
                                            this.data.clear();
                                        }
                                    })
                                ) || Rn)
                        ) || Rn)
                );
                var An;
                Object(pt.b)(bn.j)(
                    (An =
                        Object(d.injectable)()(
                            (An =
                                (function (e, t) {
                                    return d.ModuleContainer.inject(bn.i)(e, void 0, 0);
                                })(
                                    (An =
                                        (function (e, t) {
                                            return d.ModuleContainer.inject(ut.h)(e, void 0, 1);
                                        })(
                                            (An =
                                                (function (e, t) {
                                                    return d.ModuleContainer.inject(ft.LabelDataManager)(e, void 0, 2);
                                                })(
                                                    (An =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (An =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    void 0 === bn.i ? Object : bn.i,
                                                                    void 0 === ut.h ? Object : ut.h,
                                                                    void 0 === ft.LabelDataManager
                                                                        ? Object
                                                                        : ft.LabelDataManager,
                                                                ])(
                                                                    (An = class {
                                                                        constructor(e, t, s) {
                                                                            (this.groupInfoManager = e),
                                                                                (this.previewDataManager = t),
                                                                                (this.labelDataManager = s),
                                                                                (this.type = void 0),
                                                                                (this.name = void 0),
                                                                                (this.key = void 0),
                                                                                (this.listState = void 0),
                                                                                (this.listGroup = void 0),
                                                                                (this.initListGroup = void 0),
                                                                                (this.currentPage = void 0),
                                                                                (this._Logger = void 0),
                                                                                (this.name = bn.h),
                                                                                (this.key = bn.h),
                                                                                (this.listState = wn.e),
                                                                                (this.listGroup = []),
                                                                                (this.initListGroup = []),
                                                                                (this.currentPage = 1);
                                                                        }
                                                                        get Logger() {
                                                                            return (
                                                                                this._Logger ||
                                                                                    (this._Logger =
                                                                                        d.ModuleContainer.resolve(
                                                                                            N.ZLoggerFactory
                                                                                        ).createZLogger(
                                                                                            kt.b.contactTabV2,
                                                                                            [this.name]
                                                                                        )),
                                                                                this._Logger
                                                                            );
                                                                        }
                                                                        _signalRenderList() {
                                                                            Object(Pe.h)(this.name, 'all');
                                                                        }
                                                                        _signalRenderItem() {
                                                                            Object(Pe.g)(this.name, 'all');
                                                                        }
                                                                        _signalRenderBoth() {
                                                                            Object(Pe.g)(this.name, 'all'),
                                                                                Object(Pe.h)(this.name, 'all');
                                                                        }
                                                                        _getItemInfo(e) {
                                                                            return (
                                                                                this.groupInfoManager.getItem(
                                                                                    {
                                                                                        key: e,
                                                                                        version: 1,
                                                                                        extraData: null,
                                                                                    },
                                                                                    null
                                                                                ) ||
                                                                                this.groupInfoManager.loadInfoNotRender(
                                                                                    { userId: e }
                                                                                )
                                                                            );
                                                                        }
                                                                        init(e) {
                                                                            throw new Error('Method not implemented.');
                                                                        }
                                                                        getItem(e, t) {
                                                                            return this.listState;
                                                                        }
                                                                        async onLoadList() {
                                                                            try {
                                                                                const e = await _n.getGroupList({});
                                                                                (this.listGroup = e),
                                                                                    (this.initListGroup = e),
                                                                                    (this.listState.totalRecord =
                                                                                        e.length),
                                                                                    this.groupInfoManager.loadMultiGroupInfo(
                                                                                        this.initListGroup
                                                                                    ),
                                                                                    (this.listGroup =
                                                                                        this._handleFilter(
                                                                                            wn.h.searching.searchText,
                                                                                            wn.h.searching.sorter,
                                                                                            wn.h.searching.filter,
                                                                                            !1
                                                                                        )),
                                                                                    (this.initListGroup =
                                                                                        this._handleFilter(
                                                                                            wn.h.searching.searchText,
                                                                                            wn.h.searching.sorter,
                                                                                            wn.h.searching.filter,
                                                                                            !0
                                                                                        )),
                                                                                    (this.listState.totalRecord =
                                                                                        this.listGroup.length),
                                                                                    this._signalRenderItem(),
                                                                                    this._signalRenderList();
                                                                            } catch (e) {
                                                                                this.Logger.zsymb(
                                                                                    18,
                                                                                    9653,
                                                                                    3e4,
                                                                                    '[GroupListController] -> [onLoadList], error: ' +
                                                                                        JSON.stringify(e)
                                                                                );
                                                                            }
                                                                        }
                                                                        onLoadMore() {
                                                                            this.currentPage++,
                                                                                this._signalRenderList();
                                                                        }
                                                                        onFilterByName(e) {
                                                                            if (!e) return [...this.initListGroup];
                                                                            return this.initListGroup.filter((t) => {
                                                                                const s = this._getItemInfo(t);
                                                                                return Dn(
                                                                                    (null == s
                                                                                        ? void 0
                                                                                        : s.displayName.toLowerCase()) ||
                                                                                        '',
                                                                                    e.toLowerCase()
                                                                                );
                                                                            });
                                                                        }
                                                                        onFilterByLabel(e, t) {
                                                                            if (!e) return t;
                                                                            if (0 === e.length) return [];
                                                                            return t.filter((t) => e.includes(t));
                                                                        }
                                                                        onFilterMyAdminGroup(e, t) {
                                                                            if (!e) return t;
                                                                            return t.filter((t) => {
                                                                                const s = this._getItemInfo(t);
                                                                                return (
                                                                                    (null == s
                                                                                        ? void 0
                                                                                        : s.creatorId) === e
                                                                                );
                                                                            });
                                                                        }
                                                                        onFilterAll(e) {
                                                                            return e;
                                                                        }
                                                                        onSortAlpha(e, t) {
                                                                            return e === wn.o.DEFAULT ||
                                                                                e === wn.o.ACTION_INCREASE ||
                                                                                e === wn.o.ACTION_DECREASE
                                                                                ? t
                                                                                : t.sort((t, s) => {
                                                                                      const i = this._getItemInfo(t),
                                                                                          n = this._getItemInfo(s),
                                                                                          r =
                                                                                              (null == i
                                                                                                  ? void 0
                                                                                                  : i.displayName.toLowerCase()) ||
                                                                                              '',
                                                                                          a =
                                                                                              (null == n
                                                                                                  ? void 0
                                                                                                  : n.displayName.toLowerCase()) ||
                                                                                              '';
                                                                                      switch (e) {
                                                                                          case wn.o.ALPHA_INCREASE:
                                                                                              return r.localeCompare(a);
                                                                                          case wn.o.ALPHA_DECREASE:
                                                                                              return a.localeCompare(r);
                                                                                          default:
                                                                                              return 0;
                                                                                      }
                                                                                  });
                                                                        }
                                                                        onFilterHidden(e, t, s) {
                                                                            return t || e
                                                                                ? s
                                                                                : s.filter(
                                                                                      (e) => !_t.a.isThreadHidden(e)
                                                                                  );
                                                                        }
                                                                        onSortActionTime(e, t) {
                                                                            return e === wn.o.DEFAULT ||
                                                                                e === wn.o.ALPHA_INCREASE ||
                                                                                e === wn.o.ALPHA_DECREASE
                                                                                ? t
                                                                                : t.sort((t, s) => {
                                                                                      var i, n;
                                                                                      const r =
                                                                                              (null ===
                                                                                                  (i =
                                                                                                      this.previewDataManager.getPreviewByIDSync(
                                                                                                          t
                                                                                                      )) || void 0 === i
                                                                                                  ? void 0
                                                                                                  : i.messageTime) || 0,
                                                                                          a =
                                                                                              (null ===
                                                                                                  (n =
                                                                                                      this.previewDataManager.getPreviewByIDSync(
                                                                                                          s
                                                                                                      )) || void 0 === n
                                                                                                  ? void 0
                                                                                                  : n.messageTime) || 0;
                                                                                      switch (e) {
                                                                                          case wn.o.ACTION_DECREASE:
                                                                                              if (a && r) {
                                                                                                  if (a > r) return 1;
                                                                                                  if (a < r) return -1;
                                                                                              }
                                                                                              return a && !r
                                                                                                  ? 1
                                                                                                  : !a && r
                                                                                                  ? -1
                                                                                                  : 0;
                                                                                          case wn.o.ACTION_INCREASE:
                                                                                              if (a && r) {
                                                                                                  if (a < r) return 1;
                                                                                                  if (a > r) return -1;
                                                                                              }
                                                                                              return !a && r
                                                                                                  ? 1
                                                                                                  : a && !r
                                                                                                  ? -1
                                                                                                  : 0;
                                                                                          default:
                                                                                              return 0;
                                                                                      }
                                                                                  });
                                                                        }
                                                                        _handleFilter(e, t, s, i) {
                                                                            var n;
                                                                            let r = [];
                                                                            return (
                                                                                (r = this.onFilterByName(e)),
                                                                                (r = this.onFilterByLabel(
                                                                                    null == s ||
                                                                                        null === (n = s.label) ||
                                                                                        void 0 === n
                                                                                        ? void 0
                                                                                        : n.convs,
                                                                                    r
                                                                                )),
                                                                                (r = this.onFilterMyAdminGroup(
                                                                                    (null == s ? void 0 : s.admin) ||
                                                                                        '',
                                                                                    r
                                                                                )),
                                                                                (r = this.onFilterAll(r)),
                                                                                (r = this.onSortAlpha(t, r)),
                                                                                (r = this.onSortActionTime(t, r)),
                                                                                (r = this.onFilterHidden(i, e, r)),
                                                                                r
                                                                            );
                                                                        }
                                                                        onFilter(e, t, s) {
                                                                            (this.listGroup = this._handleFilter(
                                                                                e,
                                                                                t,
                                                                                s,
                                                                                !1
                                                                            )),
                                                                                (this.listState.totalRecord =
                                                                                    this.listGroup.length),
                                                                                this._signalRenderItem(),
                                                                                this._signalRenderList();
                                                                        }
                                                                        _onUpdateTagConv(e, t) {
                                                                            void 0 === t && (t = 'add');
                                                                            let s = !1;
                                                                            e.convIds.forEach((i) => {
                                                                                if (
                                                                                    (this.groupInfoManager.onLoadInfo({
                                                                                        userId: i,
                                                                                    }),
                                                                                    this.listState.searching.filter
                                                                                        .label.id &&
                                                                                        this.listState.searching.filter
                                                                                            .label.id === +e.labelId)
                                                                                ) {
                                                                                    const e = this.listGroup.findIndex(
                                                                                        (e) => e === i
                                                                                    );
                                                                                    'remove' === t && -1 !== e
                                                                                        ? (this.listGroup.splice(e, 1),
                                                                                          (this.listState.totalRecord =
                                                                                              Math.max(
                                                                                                  this.listState
                                                                                                      .totalRecord - 1,
                                                                                                  0
                                                                                              )),
                                                                                          (s = !0))
                                                                                        : 'add' === t &&
                                                                                          -1 === e &&
                                                                                          (this.listGroup.push(i),
                                                                                          (this.listGroup =
                                                                                              this._handleFilter(
                                                                                                  this.listState
                                                                                                      .searching
                                                                                                      .searchText,
                                                                                                  this.listState
                                                                                                      .searching.sorter,
                                                                                                  this.listState
                                                                                                      .searching.filter,
                                                                                                  !1
                                                                                              )),
                                                                                          (this.listState.totalRecord =
                                                                                              this.listGroup.length),
                                                                                          (s = !0));
                                                                                }
                                                                            }),
                                                                                s && this._signalRenderBoth();
                                                                        }
                                                                        _onLeaveGroup(e) {
                                                                            for (let t = 0; t < e.length; t++) {
                                                                                if (!this.listGroup.includes(e[t]))
                                                                                    return;
                                                                                this.listGroup.splice(
                                                                                    this.listGroup.indexOf(e[t]),
                                                                                    1
                                                                                ),
                                                                                    this.initListGroup.splice(
                                                                                        this.listGroup.indexOf(e[t]),
                                                                                        1
                                                                                    ),
                                                                                    (this.listState.totalRecord =
                                                                                        this.listGroup.length);
                                                                            }
                                                                            this._signalRenderBoth();
                                                                        }
                                                                        addComponentListeners() {
                                                                            jt.default.subscribeEventGroup(
                                                                                v.EventGroup.LEAVE_GROUP,
                                                                                this._onLeaveGroup.bind(this)
                                                                            ),
                                                                                this.labelDataManager.addEventListener(
                                                                                    ft.LabelEvents.LabelAddConvs,
                                                                                    (e) => {
                                                                                        this._onUpdateTagConv(
                                                                                            e.payload,
                                                                                            'add'
                                                                                        );
                                                                                    }
                                                                                ),
                                                                                this.labelDataManager.addEventListener(
                                                                                    ft.LabelEvents.LabelRemoveConvs,
                                                                                    (e) => {
                                                                                        this._onUpdateTagConv(
                                                                                            e.payload,
                                                                                            'remove'
                                                                                        );
                                                                                    }
                                                                                );
                                                                        }
                                                                        removeComponentListeners() {
                                                                            jt.default.unsubscribeEventGroup(
                                                                                v.EventGroup.LEAVE_GROUP,
                                                                                this._onLeaveGroup.bind(this)
                                                                            ),
                                                                                this.labelDataManager.removeEventListener(
                                                                                    ft.LabelEvents.LabelAddConvs,
                                                                                    (e) => {
                                                                                        this._onUpdateTagConv(
                                                                                            e.payload,
                                                                                            'add'
                                                                                        );
                                                                                    }
                                                                                ),
                                                                                this.labelDataManager.removeEventListener(
                                                                                    ft.LabelEvents.LabelRemoveConvs,
                                                                                    (e) => {
                                                                                        this._onUpdateTagConv(
                                                                                            e.payload,
                                                                                            'remove'
                                                                                        );
                                                                                    }
                                                                                );
                                                                        }
                                                                        getList(e, t) {
                                                                            return this.listGroup;
                                                                        }
                                                                        onGetItemFailure(e, t) {
                                                                            throw new Error('Method not implemented.');
                                                                        }
                                                                        onGetListFailure(e, t) {
                                                                            throw new Error('Method not implemented.');
                                                                        }
                                                                        getDefaultItem() {
                                                                            throw new Error('Method not implemented.');
                                                                        }
                                                                        getDefaultList() {
                                                                            throw new Error('Method not implemented.');
                                                                        }
                                                                        setSearchText(e) {
                                                                            (this.listState.searching.searchText = e),
                                                                                this._signalRenderItem();
                                                                        }
                                                                        setSorter(e) {
                                                                            (this.listState.searching.sorter = e),
                                                                                this._signalRenderItem();
                                                                        }
                                                                        setFilter(e) {
                                                                            (this.listState.searching.filter = e),
                                                                                this._signalRenderItem();
                                                                        }
                                                                        getFilter() {
                                                                            return this.listState.searching.filter;
                                                                        }
                                                                        getSorter() {
                                                                            return this.listState.searching.sorter;
                                                                        }
                                                                        resetData() {
                                                                            (this.listGroup = []),
                                                                                (this.initListGroup = []);
                                                                        }
                                                                        resetState() {
                                                                            (this.listState = {
                                                                                totalRecord: 0,
                                                                                searching: {
                                                                                    searchText: '',
                                                                                    sorter: wn.o.ACTION_DECREASE,
                                                                                    filter: {
                                                                                        label: {
                                                                                            convs: null,
                                                                                            id: null,
                                                                                        },
                                                                                        admin: '',
                                                                                        all: !0,
                                                                                    },
                                                                                },
                                                                            }),
                                                                                (this.currentPage = 1);
                                                                        }
                                                                    })
                                                                ) || An)
                                                        ) || An)
                                                ) || An)
                                        ) || An)
                                ) || An)
                        ) || An)
                );
                var Pn;
                let Nn;
                Object(pt.b)(bn.i)(
                    (Pn =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Pn =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Pn = class {
                                        constructor() {
                                            (this.type = void 0),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.data = new Map()),
                                                (this.name = bn.g),
                                                (this.key = bn.g);
                                        }
                                        init(e) {
                                            throw new Error('Method not implemented.');
                                        }
                                        async onLoadInfo(e) {
                                            const t = _n.getGroupInfoSync(e);
                                            t && (this.data.set(e.userId, t), Object(Pe.g)(this.name, e.userId));
                                        }
                                        loadInfoNotRender(e) {
                                            const t = _n.getGroupInfoSync(e);
                                            return t ? (this.data.set(e.userId, t), t) : null;
                                        }
                                        loadMultiGroupInfo(e) {
                                            for (const t of e) this.loadInfoNotRender({ userId: t });
                                        }
                                        openGroupMemberPopup(e) {
                                            const t = this.data.get(e);
                                            Tt.ModalManagerV2.openModal({
                                                windowId: '1',
                                                name: v.ModalIdentitiesDefine.GROUP_PROFILE,
                                                params: { group_member: t },
                                            });
                                        }
                                        getItem(e, t) {
                                            return this.data.get(e.key);
                                        }
                                        getList(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetItemFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetListFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultItem() {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultList() {
                                            throw new Error('Method not implemented.');
                                        }
                                        resetData() {
                                            this.data.clear();
                                        }
                                    })
                                ) || Pn)
                        ) || Pn)
                );
                !(function (e) {
                    (e[(e.RECOMMEND = 1)] = 'RECOMMEND'), (e[(e.RECEIVE = 2)] = 'RECEIVE');
                })(Nn || (Nn = {}));
                const jn = 500,
                    Un = 500;
                var Bn;
                Object(pt.b)(bn.m)(
                    (Bn =
                        (function (e, t) {
                            return d.ModuleContainer.inject(bn.b)(e, void 0, 0);
                        })(
                            (Bn =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (Bn =
                                        Reflect.metadata('design:paramtypes', [void 0 === bn.b ? Object : bn.b])(
                                            (Bn = class extends G.b {
                                                constructor(e) {
                                                    super(),
                                                        (this.contactTabController = e),
                                                        (this.type = void 0),
                                                        (this.name = void 0),
                                                        (this.key = void 0),
                                                        (this.data = new Map()),
                                                        (this._Logger = void 0),
                                                        (this.name = bn.k),
                                                        (this.key = bn.k),
                                                        this.data.set('all', {
                                                            isLoadingRecommendFriendList: !1,
                                                            isLoadingRequestedFriendList: !1,
                                                            listFriendReceived: [],
                                                            listFriendSent: [],
                                                            listFriendSuggest: [],
                                                            mapRelatedGroup: {},
                                                        }),
                                                        this.addPublicListeners();
                                                }
                                                get Logger() {
                                                    return (
                                                        this._Logger ||
                                                            (this._Logger = d.ModuleContainer.resolve(
                                                                N.ZLoggerFactory
                                                            ).createZLogger(kt.b.contactTabV2, [this.name])),
                                                        this._Logger
                                                    );
                                                }
                                                _signalRenderItem() {
                                                    Object(Pe.g)(this.name, 'all');
                                                }
                                                init(e) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                getItem(e, t) {
                                                    return this.data.get(e.key);
                                                }
                                                _updateLoadingState(e, t) {
                                                    const {
                                                        listFriendReceived: s = [],
                                                        listFriendSuggest: n = [],
                                                        listFriendSent: r = [],
                                                    } = this.data.get('all') || {};
                                                    let {
                                                        isLoadingRecommendFriendList: a,
                                                        isLoadingRequestedFriendList: o,
                                                    } = this.data.get('all') || {};
                                                    if ('RecommendFriendList' === e)
                                                        switch (t) {
                                                            case 'ON':
                                                                a || 0 !== s.length || 0 !== n.length || (a = !0);
                                                                break;
                                                            case 'OFF':
                                                                a && (a = !1);
                                                        }
                                                    if ('RequestedFriendList' === e)
                                                        switch (t) {
                                                            case 'ON':
                                                                o || 0 !== r.length || (o = !0);
                                                                break;
                                                            case 'OFF':
                                                                o && (o = !1);
                                                        }
                                                    this.data.set(
                                                        'all',
                                                        Object(i.a)(
                                                            Object(i.a)({}, this.data.get('all')),
                                                            {},
                                                            {
                                                                isLoadingRecommendFriendList: a,
                                                                isLoadingRequestedFriendList: o,
                                                            }
                                                        )
                                                    ),
                                                        this._signalRenderItem();
                                                }
                                                async onLoadRequestedFriendList() {
                                                    const e = Date.now();
                                                    try {
                                                        this._updateLoadingState('RequestedFriendList', 'ON');
                                                        const t = await Mn.getRequestedFriendList();
                                                        Date.now() - e < jn && (await Ln(Un)),
                                                            this._updateLoadingState('RequestedFriendList', 'OFF');
                                                        const s = Object.keys(t)
                                                                .map((e) => t[e])
                                                                .sort((e, t) => {
                                                                    var s, i;
                                                                    const n =
                                                                            null === (s = e.fReqInfo) || void 0 === s
                                                                                ? void 0
                                                                                : s.time,
                                                                        r =
                                                                            null === (i = t.fReqInfo) || void 0 === i
                                                                                ? void 0
                                                                                : i.time;
                                                                    return r > n ? 1 : r < n ? -1 : 0;
                                                                }),
                                                            {
                                                                listFriendReceived: n = [],
                                                                listFriendSuggest: r = [],
                                                                mapRelatedGroup: a = {},
                                                            } = this.data.get('all') || {};
                                                        this.data.set(
                                                            'all',
                                                            Object(i.a)(
                                                                Object(i.a)({}, this.data.get('all')),
                                                                {},
                                                                {
                                                                    listFriendReceived: n,
                                                                    listFriendSent: s,
                                                                    listFriendSuggest: r,
                                                                    mapRelatedGroup: a,
                                                                }
                                                            )
                                                        ),
                                                            this._signalRenderItem();
                                                    } catch (t) {
                                                        Date.now() - e < jn && (await Ln(Un)),
                                                            this._updateLoadingState('RequestedFriendList', 'OFF'),
                                                            this.Logger.zsymb(
                                                                18,
                                                                10294,
                                                                3e4,
                                                                '[InvitationController] -> [onLoadRequestedFriendList], error: ' +
                                                                    JSON.stringify(t)
                                                            );
                                                    }
                                                }
                                                async onLoadRecommendFriendList() {
                                                    const e = Date.now();
                                                    try {
                                                        this._updateLoadingState('RecommendFriendList', 'ON');
                                                        const t = await Mn.getRecommendFriendList();
                                                        if (
                                                            (Date.now() - e < jn && (await Ln(Un)),
                                                            this._updateLoadingState('RecommendFriendList', 'OFF'),
                                                            Array.isArray(t) && t.length > 0)
                                                        ) {
                                                            const e = t.filter((e) => {
                                                                    var t;
                                                                    return (
                                                                        (null === (t = e.dataInfo) || void 0 === t
                                                                            ? void 0
                                                                            : t.recommType) === Nn.RECEIVE
                                                                    );
                                                                }),
                                                                s = t.filter((e) => {
                                                                    var t;
                                                                    return (
                                                                        (null === (t = e.dataInfo) || void 0 === t
                                                                            ? void 0
                                                                            : t.recommType) === Nn.RECOMMEND
                                                                    );
                                                                }),
                                                                { listFriendSent: n = [], mapRelatedGroup: r = {} } =
                                                                    this.data.get('all') || {};
                                                            this.data.set(
                                                                'all',
                                                                Object(i.a)(
                                                                    Object(i.a)({}, this.data.get('all')),
                                                                    {},
                                                                    {
                                                                        listFriendReceived: e,
                                                                        listFriendSent: n,
                                                                        listFriendSuggest: s,
                                                                        mapRelatedGroup: r,
                                                                    }
                                                                )
                                                            ),
                                                                s.length > 0 &&
                                                                    this.dispatchEvent(
                                                                        new yn.b(yn.a.LoadRelatedGroups, '', {})
                                                                    ),
                                                                this._signalRenderItem();
                                                        }
                                                    } catch (t) {
                                                        Date.now() - e < jn && (await Ln(Un)),
                                                            this._updateLoadingState('RecommendFriendList', 'OFF'),
                                                            this.Logger.zsymb(
                                                                18,
                                                                10294,
                                                                30001,
                                                                '[InvitationController] -> [onLoadRecommendFriendList], error: ' +
                                                                    JSON.stringify(t)
                                                            );
                                                    }
                                                }
                                                _handleSortFriendSuggestList(e, t) {
                                                    return 0 === e.length
                                                        ? e
                                                        : e.sort((e, s) => {
                                                              var i, n, r, a, o, d;
                                                              const l =
                                                                      t[
                                                                          null === (i = e.dataInfo) || void 0 === i
                                                                              ? void 0
                                                                              : i.userId
                                                                      ] &&
                                                                      t[
                                                                          null === (n = e.dataInfo) || void 0 === n
                                                                              ? void 0
                                                                              : n.userId
                                                                      ].length,
                                                                  c =
                                                                      (null === (r = e.dataInfo) || void 0 === r
                                                                          ? void 0
                                                                          : r.displayName) || '',
                                                                  h =
                                                                      t[
                                                                          null === (a = s.dataInfo) || void 0 === a
                                                                              ? void 0
                                                                              : a.userId
                                                                      ] &&
                                                                      t[
                                                                          null === (o = s.dataInfo) || void 0 === o
                                                                              ? void 0
                                                                              : o.userId
                                                                      ].length,
                                                                  u =
                                                                      (null === (d = s.dataInfo) || void 0 === d
                                                                          ? void 0
                                                                          : d.displayName) || '';
                                                              return l && h
                                                                  ? l === h
                                                                      ? c.localeCompare(u)
                                                                      : h > l
                                                                      ? 1
                                                                      : -1
                                                                  : l && !h
                                                                  ? -1
                                                                  : !l && h
                                                                  ? 1
                                                                  : l || h
                                                                  ? 0
                                                                  : c.localeCompare(u);
                                                          });
                                                }
                                                async onLoadRelatedGroupList() {
                                                    try {
                                                        const { listFriendSuggest: e = [] } =
                                                                this.data.get('all') || {},
                                                            t = e.map((e) => {
                                                                var t;
                                                                return null == e ||
                                                                    null === (t = e.dataInfo) ||
                                                                    void 0 === t
                                                                    ? void 0
                                                                    : t.userId;
                                                            }),
                                                            s = await Mn.getRelatedGroup(t),
                                                            { listFriendReceived: n = [], listFriendSent: r = [] } =
                                                                this.data.get('all') || {},
                                                            a = this._handleSortFriendSuggestList(e, s.groupRelateds);
                                                        this.data.set(
                                                            'all',
                                                            Object(i.a)(
                                                                Object(i.a)({}, this.data.get('all')),
                                                                {},
                                                                {
                                                                    listFriendReceived: n,
                                                                    listFriendSent: r,
                                                                    listFriendSuggest: a,
                                                                    mapRelatedGroup: s.groupRelateds || {},
                                                                }
                                                            )
                                                        ),
                                                            this._signalRenderItem();
                                                    } catch (e) {
                                                        this.Logger.zsymb(
                                                            18,
                                                            10294,
                                                            30002,
                                                            '[InvitationController] -> [onLoadRelatedGroupList], error: ' +
                                                                JSON.stringify(e)
                                                        );
                                                    }
                                                }
                                                handleFriendProfileChange(e) {
                                                    const {
                                                        listFriendReceived: t = [],
                                                        listFriendSuggest: s = [],
                                                        listFriendSent: i = [],
                                                    } = this.data.get('all') || {};
                                                    Object.keys(e).forEach((e) => {
                                                        const n = rt.default.getDName(e),
                                                            r = t.findIndex((t) => t.dataInfo.userId === e);
                                                        -1 !== r && (t[r].displayName = n);
                                                        const a = s.findIndex((t) => t.dataInfo.userId === e);
                                                        -1 !== a && (s[a].displayName = n);
                                                        const o = i.findIndex((t) => t.userId === e);
                                                        -1 !== o && (i[o].displayName = n);
                                                    }),
                                                        this._signalRenderItem();
                                                }
                                                handlePublicFriendEvents(e) {
                                                    const t = e.payload;
                                                    if (t)
                                                        for (let i = 0; i < t.length; i++) {
                                                            var s;
                                                            const n = t[i].ts,
                                                                r =
                                                                    ('add' === t[i].act && t[i].data) ||
                                                                    (null === (s = t[i].data) || void 0 === s
                                                                        ? void 0
                                                                        : s.fromUid),
                                                                a = r === e.userId;
                                                            if (n && r && !a && 'fr' === t[i].act_type)
                                                                switch (t[i].act) {
                                                                    case 'req_v2':
                                                                        this.contactTabController.onUpdateRequestTracking(
                                                                            'FRIEND',
                                                                            'NEW',
                                                                            n,
                                                                            r
                                                                        );
                                                                        break;
                                                                    case 'undo_req':
                                                                        this.contactTabController.onUpdateRequestTracking(
                                                                            'FRIEND',
                                                                            'REMOVE',
                                                                            n,
                                                                            r
                                                                        ),
                                                                            this.dispatchEvent(
                                                                                new yn.b(yn.a.UndoAddFriendEvent, '', r)
                                                                            );
                                                                        break;
                                                                    case 'add':
                                                                        this.contactTabController.onUpdateRequestTracking(
                                                                            'FRIEND',
                                                                            'REMOVE',
                                                                            n,
                                                                            r
                                                                        ),
                                                                            this.dispatchEvent(
                                                                                new yn.b(
                                                                                    yn.a.AcceptAddFriendEvent,
                                                                                    '',
                                                                                    r
                                                                                )
                                                                            );
                                                                        break;
                                                                    case 'reject':
                                                                        this.contactTabController.onUpdateRequestTracking(
                                                                            'FRIEND',
                                                                            'REMOVE',
                                                                            n,
                                                                            r
                                                                        ),
                                                                            this.dispatchEvent(
                                                                                new yn.b(
                                                                                    yn.a.RejectAddFriendEvent,
                                                                                    '',
                                                                                    r
                                                                                )
                                                                            );
                                                                }
                                                        }
                                                }
                                                handlePublicAddFriendEvent(e) {
                                                    let t = [];
                                                    const s = e.payload;
                                                    if (s) {
                                                        for (let e = 0; e < s.length; e++) {
                                                            let i = {};
                                                            (i.userId = s[e].userId),
                                                                (i.zaloName = s[e].zaloName),
                                                                (i.avatar = s[e].avatar),
                                                                (i.displayName = s[e].displayName),
                                                                (i.recommInfo = {
                                                                    message: s[e].friendRequestMsg,
                                                                    source: s[e].friendRequestSource,
                                                                }),
                                                                (i.recommTime = s[e].friendRequestFetchTime),
                                                                (i.recommType = s[e].friendRequestType),
                                                                t.push({ dataInfo: i, recommItemType: 1 });
                                                        }
                                                        this.dispatchEvent(new yn.b(yn.a.ReceiveAddFriendEvent, '', t));
                                                    }
                                                }
                                                addPublicListeners() {
                                                    this.addEventListener(
                                                        yn.a.PublicInvitationEvents,
                                                        this.handlePublicFriendEvents.bind(this)
                                                    ),
                                                        this.addEventListener(
                                                            yn.a.PublicReceiveAddFriendEvent,
                                                            this.handlePublicAddFriendEvent.bind(this)
                                                        ),
                                                        rt.default.connectSignalChangeDNameAndAvatar(
                                                            this.handleFriendProfileChange.bind(this)
                                                        );
                                                }
                                                addComponentListeners() {}
                                                removeComponentListeners() {}
                                                _addFriendReceived(e) {
                                                    const {
                                                            listFriendReceived: t = [],
                                                            listFriendSent: s = [],
                                                            listFriendSuggest: n = [],
                                                            mapRelatedGroup: r = {},
                                                        } = this.data.get('all') || {},
                                                        a = e.concat(t);
                                                    this.data.set(
                                                        'all',
                                                        Object(i.a)(
                                                            Object(i.a)({}, this.data.get('all')),
                                                            {},
                                                            {
                                                                listFriendReceived: a,
                                                                listFriendSent: s,
                                                                listFriendSuggest: n,
                                                                mapRelatedGroup: r,
                                                            }
                                                        )
                                                    ),
                                                        this._signalRenderItem();
                                                }
                                                _removeFriendReceived(e) {
                                                    const {
                                                            listFriendReceived: t = [],
                                                            listFriendSent: s = [],
                                                            listFriendSuggest: n = [],
                                                            mapRelatedGroup: r = {},
                                                        } = this.data.get('all') || {},
                                                        a = t.filter((t) => {
                                                            var s;
                                                            return (
                                                                (null === (s = t.dataInfo) || void 0 === s
                                                                    ? void 0
                                                                    : s.userId) !== e
                                                            );
                                                        });
                                                    this.data.set(
                                                        'all',
                                                        Object(i.a)(
                                                            Object(i.a)({}, this.data.get('all')),
                                                            {},
                                                            {
                                                                listFriendReceived: a,
                                                                listFriendSent: s,
                                                                listFriendSuggest: n,
                                                                mapRelatedGroup: r,
                                                            }
                                                        )
                                                    ),
                                                        this._signalRenderItem();
                                                }
                                                onUpdateFriendRequests(e, t) {
                                                    switch (t) {
                                                        case 'ADD':
                                                            this._addFriendReceived(e);
                                                            break;
                                                        case 'REMOVE':
                                                            this._removeFriendReceived(e), this._removeFriendSent(e);
                                                    }
                                                }
                                                async onRejectFriend(e) {
                                                    return new Promise((t, s) => {
                                                        Mn.rejectAddFriend(e)
                                                            .then(() => {
                                                                this._removeFriendReceived(e), t(e);
                                                            })
                                                            .catch((e) => {
                                                                this.Logger.zsymb(
                                                                    18,
                                                                    10294,
                                                                    30003,
                                                                    '[InvitationController] -> [onRejectFriend], error: ' +
                                                                        JSON.stringify(e)
                                                                ),
                                                                    s(e);
                                                            });
                                                    });
                                                }
                                                async onAddFriend(e) {
                                                    return new Promise((t, s) => {
                                                        Mn.acceptAddFriend(e)
                                                            .then(t)
                                                            .catch((e) => {
                                                                this.Logger.zsymb(
                                                                    18,
                                                                    10294,
                                                                    30004,
                                                                    '[InvitationController] -> [onAddFriend], error: ' +
                                                                        JSON.stringify(e)
                                                                ),
                                                                    s(e);
                                                            });
                                                    });
                                                }
                                                removeFriendSent(e) {
                                                    const {
                                                            listFriendReceived: t = [],
                                                            listFriendSent: s = [],
                                                            listFriendSuggest: n = [],
                                                            mapRelatedGroup: r = {},
                                                        } = this.data.get('all') || {},
                                                        a = s.filter((t) => (null == t ? void 0 : t.userId) !== e);
                                                    this.data.set(
                                                        'all',
                                                        Object(i.a)(
                                                            Object(i.a)({}, this.data.get('all')),
                                                            {},
                                                            {
                                                                listFriendReceived: t,
                                                                listFriendSent: a,
                                                                listFriendSuggest: n,
                                                                mapRelatedGroup: r,
                                                            }
                                                        )
                                                    ),
                                                        this._signalRenderItem();
                                                }
                                                onRemoveFriendSent(e) {
                                                    Mn.makeUndoSentRequestFriend(e)
                                                        .then(() => {
                                                            this.removeFriendSent(e.userId);
                                                        })
                                                        .catch((e) => {
                                                            this.Logger.zsymb(
                                                                18,
                                                                10294,
                                                                30005,
                                                                '[InvitationController] -> [onRemoveFriendSent], error: ' +
                                                                    JSON.stringify(e)
                                                            ),
                                                                e && 301 == e.error_code
                                                                    ? Ft.a.createError(
                                                                          Rt.default.str('STR_UNDO_REQUEST_ERROR_301')
                                                                      )
                                                                    : e && 'ERR_NO_NETWORK' === e.code
                                                                    ? Ft.a.createError(Rt.default.str('STR_CHECK_NET'))
                                                                    : Ft.a.createError(
                                                                          Rt.default.str(
                                                                              'STR_UNDO_REQUEST_ERROR_UNKNOWN'
                                                                          )
                                                                      );
                                                        });
                                                }
                                                _removeFriendSuggest(e) {
                                                    const {
                                                            listFriendReceived: t = [],
                                                            listFriendSent: s = [],
                                                            listFriendSuggest: n = [],
                                                            mapRelatedGroup: r = {},
                                                        } = this.data.get('all') || {},
                                                        a = n.filter((t) => {
                                                            var s;
                                                            return (
                                                                (null == t || null === (s = t.dataInfo) || void 0 === s
                                                                    ? void 0
                                                                    : s.userId) !== e
                                                            );
                                                        });
                                                    this.data.set(
                                                        'all',
                                                        Object(i.a)(
                                                            Object(i.a)({}, this.data.get('all')),
                                                            {},
                                                            {
                                                                listFriendReceived: t,
                                                                listFriendSent: s,
                                                                listFriendSuggest: a,
                                                                mapRelatedGroup: r,
                                                            }
                                                        )
                                                    ),
                                                        this._signalRenderItem();
                                                }
                                                onAddFriendSuggest(e) {
                                                    un.a
                                                        .doAddFriend(e.uid, e.src, null, e.windowId)
                                                        .then(() => {
                                                            this._removeFriendSuggest(e.uid),
                                                                this.onLoadRequestedFriendList();
                                                        })
                                                        .catch((e) => {
                                                            this.Logger.zsymb(
                                                                18,
                                                                10294,
                                                                30006,
                                                                '[InvitationController] -> [onAddFriendSuggest], error: ' +
                                                                    JSON.stringify(e)
                                                            );
                                                        });
                                                }
                                                onRemoveFriendSuggest(e) {
                                                    Mn.removeSuggestFriend(e)
                                                        .then(() => {
                                                            this._removeFriendSuggest(e.uid);
                                                        })
                                                        .catch((e) => {
                                                            this.Logger.zsymb(
                                                                18,
                                                                10294,
                                                                30007,
                                                                '[InvitationController] -> [onRemoveFriendSuggest], error: ' +
                                                                    JSON.stringify(e)
                                                            );
                                                        });
                                                }
                                                openMutualGroupPopup(e) {
                                                    Tt.ModalManagerV2.openModal({
                                                        windowId: '1',
                                                        name: v.ModalIdentitiesDefine.FRIEND_PROFILE,
                                                        params: { userId: e, showMutualGroups: !0 },
                                                    });
                                                }
                                                resetData() {
                                                    this.data.set('all', {
                                                        isLoadingRecommendFriendList: !1,
                                                        isLoadingRequestedFriendList: !1,
                                                        listFriendReceived: [],
                                                        listFriendSent: [],
                                                        listFriendSuggest: [],
                                                        mapRelatedGroup: {},
                                                    });
                                                }
                                                makeExpiredReceivedFriendRequest() {
                                                    let {
                                                        listFriendReceived: e = [],
                                                        listFriendSent: t = [],
                                                        listFriendSuggest: s = [],
                                                        mapRelatedGroup: n = {},
                                                    } = this.data.get('all') || {};
                                                    if (0 !== e.length) {
                                                        for (let t = 0; t < e.length; t++)
                                                            (e[t].dataInfo.recommTime = -1),
                                                                (e[t].dataInfo.recommInfo.source = -1),
                                                                (e[t].dataInfo.recommInfo.message = '');
                                                        this.data.set(
                                                            'all',
                                                            Object(i.a)(
                                                                Object(i.a)({}, this.data.get('all')),
                                                                {},
                                                                {
                                                                    listFriendReceived: e,
                                                                    listFriendSent: t,
                                                                    listFriendSuggest: s,
                                                                    mapRelatedGroup: n,
                                                                }
                                                            )
                                                        ),
                                                            this._signalRenderItem();
                                                    }
                                                }
                                                makeExpiredSentFriendSentRequest() {
                                                    let {
                                                        listFriendReceived: e = [],
                                                        listFriendSent: t = [],
                                                        listFriendSuggest: s = [],
                                                        mapRelatedGroup: n = {},
                                                    } = this.data.get('all') || {};
                                                    if (0 !== t.length) {
                                                        for (let e = 0; e < t.length; e++)
                                                            (t[e].fReqInfo.time = -1),
                                                                (t[e].fReqInfo.src = -1),
                                                                (t[e].fReqInfo.message = '');
                                                        this.data.set(
                                                            'all',
                                                            Object(i.a)(
                                                                Object(i.a)({}, this.data.get('all')),
                                                                {},
                                                                {
                                                                    listFriendReceived: e,
                                                                    listFriendSent: t,
                                                                    listFriendSuggest: s,
                                                                    mapRelatedGroup: n,
                                                                }
                                                            )
                                                        ),
                                                            this._signalRenderItem();
                                                    }
                                                }
                                                getList(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                onGetItemFailure(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                onGetListFailure(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                getDefaultItem() {
                                                    throw new Error('Method not implemented.');
                                                }
                                                getDefaultList() {
                                                    throw new Error('Method not implemented.');
                                                }
                                            })
                                        ) || Bn)
                                ) || Bn)
                        ) || Bn)
                );
                var kn = s('hd49');
                let Gn;
                !(function (e) {
                    e.MessageDelivered = 'MessageDelivered';
                })(Gn || (Gn = {}));
                class xn extends Event {
                    constructor(e, t, s) {
                        super(e), (this.msgId = void 0), (this.payload = void 0), (this.msgId = t), (this.payload = s);
                    }
                }
                var zn,
                    Vn = s('Y/Cm');
                Object(L.h)()(
                    (zn =
                        Object(L.g)()(
                            (zn =
                                Object(d.singleton)(kn.a)(
                                    (zn =
                                        Object(d.injectable)()(
                                            (zn =
                                                (function (e, t) {
                                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 0);
                                                })(
                                                    (zn =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (zn =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    void 0 === N.ZLoggerFactory
                                                                        ? Object
                                                                        : N.ZLoggerFactory,
                                                                ])(
                                                                    (zn = class extends G.b {
                                                                        constructor(e) {
                                                                            super(),
                                                                                (this.logger = void 0),
                                                                                (this.logger = e.createZLogger('feat', [
                                                                                    'message-service',
                                                                                ]));
                                                                        }
                                                                        onStart() {}
                                                                        onDispose() {}
                                                                        onPollingMessages(e, t) {
                                                                            return new Promise((s, i) => {
                                                                                if (!e || 0 === e.length) return s(!1);
                                                                                const n = t
                                                                                        ? { userId: t }
                                                                                        : { userId: e[0].toUid },
                                                                                    r = [...e],
                                                                                    a = () => {
                                                                                        this.messagesDelivered(r);
                                                                                    };
                                                                                Vn.a.preparse(r, n, a, a);
                                                                            });
                                                                        }
                                                                        loadMessage(e) {
                                                                            return Promise.resolve({});
                                                                        }
                                                                        loadMessagesBefore(e, t, s) {}
                                                                        loadMessagesAfter(e, t, s) {}
                                                                        loadLastMessage(e, t) {}
                                                                        messagesDelivered(e) {
                                                                            this.broadcastEvent(
                                                                                Gn.MessageDelivered,
                                                                                '',
                                                                                e
                                                                            );
                                                                        }
                                                                        broadcastEvent(e, t, s) {
                                                                            void 0 === t && (t = ''),
                                                                                He.default.log([
                                                                                    e,
                                                                                    '- id: ',
                                                                                    t,
                                                                                    ' - payload: ',
                                                                                    null == s ? void 0 : s.length,
                                                                                ]),
                                                                                this.dispatchEvent(new xn(e, t, s));
                                                                        }
                                                                    })
                                                                ) || zn)
                                                        ) || zn)
                                                ) || zn)
                                        ) || zn)
                                ) || zn)
                        ) || zn)
                );
                const $n = Object(d.define)('cloud-segment-repository'),
                    Wn = Object(d.define)('cloud-segment-manager'),
                    Kn = Object(d.define)('cloud-message-manager');
                class qn {
                    constructor(e) {
                        this.entity = e;
                    }
                    get conversationId() {
                        return this.entity.conversationId;
                    }
                    get cloudFirstSmsLocalId() {
                        return this.entity.cloudFirstSmsLocalId;
                    }
                    get cloudSegmentCheck() {
                        return this.entity.cloudSegmentCheck;
                    }
                    get hasMore() {
                        return this.entity.hasMore;
                    }
                    get lastCloudVerifiedDttm() {
                        return this.entity.lastCloudVerifiedDttm;
                    }
                    get lastDeletedMsgID() {
                        return this.entity.lastDeletedMsgID;
                    }
                    get lastGetMaxRecentTs() {
                        return this.entity.lastGetMaxRecentTs;
                    }
                    get maxCloudMsgId() {
                        return this.entity.maxCloudMsgId;
                    }
                }
                var Hn,
                    Qn = s('t3h5');
                let Jn =
                    d.ModuleContainer.injectable()(
                        (Hn =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (Hn =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (Hn = class {
                                            constructor() {}
                                            get(e) {
                                                return Qn.a.getSegmentByConvId(e);
                                            }
                                        })
                                    ) || Hn)
                            ) || Hn)
                    ) || Hn;
                var Zn,
                    Xn = s('npvr'),
                    Yn = s('D8Ji');
                let er,
                    tr =
                        d.ModuleContainer.injectable()(
                            (Zn =
                                (function (e, t) {
                                    return d.ModuleContainer.inject($n)(e, void 0, 0);
                                })(
                                    (Zn =
                                        Reflect.metadata(
                                            'design:type',
                                            Function
                                        )(
                                            (Zn =
                                                Reflect.metadata('design:paramtypes', [void 0 === $n ? Object : $n])(
                                                    (Zn = class {
                                                        constructor(e) {
                                                            this.segmentRepository = e;
                                                        }
                                                        get(e) {
                                                            return this.segmentRepository
                                                                .get(e)
                                                                .then((e) => e && new qn(e))
                                                                .catch((e) => {});
                                                        }
                                                        async createOrExtendSegment(e, t) {
                                                            const s = await this.segmentRepository.get(e);
                                                            (s.cloudSegmentCheck = Yn.a.mergeNewSegment(
                                                                t.verifiedRange,
                                                                null == s ? void 0 : s.cloudSegmentCheck
                                                            )),
                                                                (s.maxCloudMsgId = Math.max(
                                                                    s.maxCloudMsgId || 0,
                                                                    t.verifiedRange[1]
                                                                )),
                                                                Qn.a.setSegmentCacheByConvId(e, s),
                                                                await Xn.b.updateSegmentDB(e, s);
                                                        }
                                                    })
                                                ) || Zn)
                                        ) || Zn)
                                ) || Zn)
                        ) || Zn;
                !(function (e) {
                    (e[(e.STOP_RETRY = -69)] = 'STOP_RETRY'),
                        (e[(e.RETRY_LATER = -71)] = 'RETRY_LATER'),
                        (e[(e.FORCE_UPDATE_CONFIG = -72)] = 'FORCE_UPDATE_CONFIG'),
                        (e[(e.UNKNOWN_EXCEPTION = 112)] = 'UNKNOWN_EXCEPTION'),
                        (e[(e.PARAMS_INVALID = 114)] = 'PARAMS_INVALID'),
                        (e[(e.CLIENT_NOT_SUPPORT = 211)] = 'CLIENT_NOT_SUPPORT'),
                        (e[(e.LIMIT_GROUPS_PER_REQUEST = 300)] = 'LIMIT_GROUPS_PER_REQUEST'),
                        (e[(e.LIMIT_MSG_PER_GROUP = 301)] = 'LIMIT_MSG_PER_GROUP'),
                        (e[(e.LIMIT_TOTAL_SYNC_MSG_PER_GROUP = 303)] = 'LIMIT_TOTAL_SYNC_MSG_PER_GROUP'),
                        (e[(e.MISSING_PARAM = 111)] = 'MISSING_PARAM'),
                        (e[(e.GROUP_NOT_EXIST = 161)] = 'GROUP_NOT_EXIST'),
                        (e[(e.NOT_BELONG_TO_GROUP = 164)] = 'NOT_BELONG_TO_GROUP'),
                        (e[(e.IS_DIRTY_GROUP = 302)] = 'IS_DIRTY_GROUP');
                })(er || (er = {}));
                class sr extends Error {
                    constructor(e, t, s) {
                        super(s), (this.code = e), (this.data = t);
                    }
                }
                var ir;
                let nr =
                    d.ModuleContainer.injectable()(
                        (ir =
                            (function (e, t) {
                                return d.ModuleContainer.inject(l.a)(e, void 0, 0);
                            })(
                                (ir =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (ir =
                                            Reflect.metadata('design:paramtypes', [void 0 === l.a ? Object : l.a])(
                                                (ir = class {
                                                    constructor(e) {
                                                        this.config = e;
                                                    }
                                                    get settings() {
                                                        return this.config.get('cloud.auto_download');
                                                    }
                                                    async crawlMissingMessage(e, t) {
                                                        void 0 === t && (t = { nRetry: 0, count: 50 });
                                                        let s = e.conversationId;
                                                        s.startsWith('g') && (s = s.slice(1));
                                                        const i = `${s}_${e.requestMsgId}`;
                                                        let n = this.settings.limit.minMsgDttm,
                                                            r = this.settings.limit.maxMsgFirstSegment;
                                                        const a = {
                                                            groupId: s,
                                                            fromMsgId: e.requestMsgId,
                                                            globalMsgIds: e.globalMsgIds,
                                                            curTotalMsgs: e.curTotalMsgs,
                                                            tsJoinGroup: e.tsJoinGroup,
                                                            minMsgTs: n,
                                                            maxTotalSyncMsg: r,
                                                        };
                                                        return await Yi.default
                                                            .crawlMissingMessage(i, a, {
                                                                requestTimeout: this.settings.fetching.timeout,
                                                                count: t.count,
                                                                nRetry: t.nRetry,
                                                                usePostApi: !0,
                                                            })
                                                            .then((e) => Object(Zi.a)(e))
                                                            .then((e) => {
                                                                try {
                                                                    return JSON.parse(e);
                                                                } catch (t) {
                                                                    throw {
                                                                        error_code: -1,
                                                                        error_message: 'invalid response',
                                                                    };
                                                                }
                                                            })
                                                            .then((e) => {
                                                                const t = e[s];
                                                                if (t.error > 0)
                                                                    throw {
                                                                        error_code: t.error,
                                                                        error_message: 'inner error',
                                                                    };
                                                                return t;
                                                            })
                                                            .catch((e) => {
                                                                if ('number' == typeof e.error_code) {
                                                                    let s = e.data;
                                                                    try {
                                                                        s = JSON.parse(s);
                                                                    } catch (t) {}
                                                                    throw new sr(e.error_code, s, e.error_message);
                                                                }
                                                                throw e;
                                                            });
                                                    }
                                                })
                                            ) || ir)
                                    ) || ir)
                            ) || ir)
                    ) || ir;
                var rr,
                    ar = s('EO3V'),
                    or = s('enz2');
                const dr = {
                    totalMsgCount: 0,
                    fetchedMsgCount: 0,
                    serverMsgCount: 0,
                    newMsgCount: 0,
                    phaseDone: !1,
                    isFilteredByTimeJoin: !1,
                    done: !0,
                    tsJoinGroup: '0',
                };
                let lr =
                    d.ModuleContainer.injectable()(
                        (rr =
                            (function (e, t) {
                                return d.ModuleContainer.injectToken(nr)(e, void 0, 0);
                            })(
                                (rr =
                                    (function (e, t) {
                                        return d.ModuleContainer.inject(Wn)(e, void 0, 1);
                                    })(
                                        (rr =
                                            (function (e, t) {
                                                return d.ModuleContainer.inject(zs.c)(e, void 0, 2);
                                            })(
                                                (rr =
                                                    (function (e, t) {
                                                        return d.ModuleContainer.inject(zs.b)(e, void 0, 3);
                                                    })(
                                                        (rr =
                                                            (function (e, t) {
                                                                return d.ModuleContainer.inject(N.ZLoggerFactory)(
                                                                    e,
                                                                    void 0,
                                                                    4
                                                                );
                                                            })(
                                                                (rr =
                                                                    Reflect.metadata(
                                                                        'design:type',
                                                                        Function
                                                                    )(
                                                                        (rr =
                                                                            Reflect.metadata('design:paramtypes', [
                                                                                void 0 === nr ? Object : nr,
                                                                                void 0 === Wn ? Object : Wn,
                                                                                void 0 === zs.c ? Object : zs.c,
                                                                                void 0 === zs.b ? Object : zs.b,
                                                                                void 0 === N.ZLoggerFactory
                                                                                    ? Object
                                                                                    : N.ZLoggerFactory,
                                                                            ])(
                                                                                (rr = class {
                                                                                    constructor(e, t, s, i, n) {
                                                                                        (this.api = e),
                                                                                            (this.segmentManager = t),
                                                                                            (this.messageRepository =
                                                                                                s),
                                                                                            (this.messageManager = i),
                                                                                            (this.logger = void 0),
                                                                                            (this.logger =
                                                                                                n.createZLogger(
                                                                                                    'cld-msg',
                                                                                                    ['manager']
                                                                                                ));
                                                                                    }
                                                                                    async crawlMissingMessage(e, t, s) {
                                                                                        const n =
                                                                                                await this.segmentManager.get(
                                                                                                    e
                                                                                                ),
                                                                                            r = (() => {
                                                                                                var e;
                                                                                                let t =
                                                                                                    s.minMsgId &&
                                                                                                    Number.parseInt(
                                                                                                        s.minMsgId
                                                                                                    );
                                                                                                return (
                                                                                                    n &&
                                                                                                        n.lastDeletedMsgID &&
                                                                                                        (t = t
                                                                                                            ? Math.max(
                                                                                                                  n.lastDeletedMsgID,
                                                                                                                  t
                                                                                                              )
                                                                                                            : n.lastDeletedMsgID),
                                                                                                    null === (e = t) ||
                                                                                                    void 0 === e
                                                                                                        ? void 0
                                                                                                        : e.toString()
                                                                                                );
                                                                                            })(),
                                                                                            a = '0' !== t,
                                                                                            o = a
                                                                                                ? s.count + 1
                                                                                                : s.count;
                                                                                        if (a && t <= r) return dr;
                                                                                        const d =
                                                                                                await this.messageManager
                                                                                                    .findPrevMessagesFromMsgId(
                                                                                                        e,
                                                                                                        {
                                                                                                            maxMsgId:
                                                                                                                '0' !==
                                                                                                                t
                                                                                                                    ? t
                                                                                                                    : void 0,
                                                                                                            minMsgId: r,
                                                                                                            limit: o,
                                                                                                        }
                                                                                                    )
                                                                                                    .then((e) =>
                                                                                                        e.map(
                                                                                                            (e) =>
                                                                                                                e.entity
                                                                                                        )
                                                                                                    ),
                                                                                            l = new Set();
                                                                                        d.forEach((e) => {
                                                                                            try {
                                                                                                const t =
                                                                                                    Number.parseInt(
                                                                                                        e.msgId
                                                                                                    );
                                                                                                Number.isInteger(t) &&
                                                                                                    l.add(t.toString());
                                                                                            } catch (t) {}
                                                                                        });
                                                                                        const c = Array.from(
                                                                                                l.values()
                                                                                            ),
                                                                                            h =
                                                                                                await this.api.crawlMissingMessage(
                                                                                                    {
                                                                                                        conversationId:
                                                                                                            e,
                                                                                                        requestMsgId: t,
                                                                                                        globalMsgIds: c,
                                                                                                        curTotalMsgs:
                                                                                                            s.curTotalMsgs,
                                                                                                        tsJoinGroup:
                                                                                                            s.tsJoinGroup,
                                                                                                    },
                                                                                                    {
                                                                                                        nRetry: s.nRetry,
                                                                                                        count: s.count,
                                                                                                    }
                                                                                                );
                                                                                        if (
                                                                                            0 === h.groupMsgs.length &&
                                                                                            '0' === h.maxMsgId
                                                                                        )
                                                                                            return dr;
                                                                                        let u =
                                                                                            ar.a.checkDupMessageFromCloud(
                                                                                                e,
                                                                                                h.groupMsgs
                                                                                            );
                                                                                        r &&
                                                                                            r > '0' &&
                                                                                            (u = u.filter(
                                                                                                (e) => e.msgId > r
                                                                                            ));
                                                                                        const g = [...d, ...u];
                                                                                        if (0 === g.length) return dr;
                                                                                        const m = Number.parseInt(
                                                                                            h.lastMsgId,
                                                                                            10
                                                                                        );
                                                                                        let p = Number.parseInt(t);
                                                                                        const f =
                                                                                                ar.a.findMinMaxGroupMsg(
                                                                                                    g,
                                                                                                    p,
                                                                                                    m,
                                                                                                    null == n
                                                                                                        ? void 0
                                                                                                        : n.lastDeletedMsgID
                                                                                                ),
                                                                                            {
                                                                                                groupMsgsToView: b,
                                                                                                groupMsgsAddDb: y,
                                                                                                groupMsgsSearch: I,
                                                                                            } = or.a.findMsgsAddDb(
                                                                                                t,
                                                                                                u,
                                                                                                [],
                                                                                                d,
                                                                                                Object(i.a)(
                                                                                                    {
                                                                                                        apiType: 2,
                                                                                                        conversationId:
                                                                                                            e,
                                                                                                    },
                                                                                                    f
                                                                                                )
                                                                                            );
                                                                                        y.forEach((e) => {
                                                                                            e.src =
                                                                                                v.MSG_SRC.AUTO_LOADER;
                                                                                        }),
                                                                                            await this.messageRepository.saveMessages(
                                                                                                y
                                                                                            ),
                                                                                            await or.a.updateSearchV3(
                                                                                                I,
                                                                                                e
                                                                                            );
                                                                                        const _ = !!h.isFilteredByPhase,
                                                                                            M = h.maxMsgId;
                                                                                        f.minMsgId &&
                                                                                            f.maxMsgId &&
                                                                                            (await this.segmentManager.createOrExtendSegment(
                                                                                                e,
                                                                                                {
                                                                                                    verifiedRange: [
                                                                                                        f.minMsgId,
                                                                                                        f.maxMsgId,
                                                                                                    ],
                                                                                                }
                                                                                            ));
                                                                                        let C = '0';
                                                                                        Number.isInteger(
                                                                                            Number.parseInt(
                                                                                                h.tsJoinGroup
                                                                                            )
                                                                                        )
                                                                                            ? (C = h.tsJoinGroup)
                                                                                            : this.logger.zsymb(
                                                                                                  18,
                                                                                                  8177,
                                                                                                  3e4,
                                                                                                  () => [
                                                                                                      'api res invalid ts join group',
                                                                                                      {
                                                                                                          tsJoinGroup:
                                                                                                              h.tsJoinGroup,
                                                                                                      },
                                                                                                  ]
                                                                                              );
                                                                                        const T =
                                                                                                !!h.isFilteredByTimeJoin,
                                                                                            O = {
                                                                                                totalMsgCount: b.length,
                                                                                                fetchedMsgCount:
                                                                                                    y.length,
                                                                                                serverMsgCount:
                                                                                                    u.length,
                                                                                                newMsgCount: y.length,
                                                                                                phaseDone: _,
                                                                                                isFilteredByTimeJoin: T,
                                                                                                done: !(
                                                                                                    _ ||
                                                                                                    (!T && h.hasMore)
                                                                                                ),
                                                                                                minMsgId: r,
                                                                                                maxMsgId: M.toString(),
                                                                                                tsJoinGroup: C,
                                                                                            };
                                                                                        return (
                                                                                            this.logger.zsymb(
                                                                                                3,
                                                                                                8177,
                                                                                                30001,
                                                                                                '[auto-dl-msg] crawl result',
                                                                                                O
                                                                                            ),
                                                                                            O
                                                                                        );
                                                                                    }
                                                                                })
                                                                            ) || rr)
                                                                    ) || rr)
                                                            ) || rr)
                                                    ) || rr)
                                            ) || rr)
                                    ) || rr)
                            ) || rr)
                    ) || rr;
                d.ModuleContainer.registerSingleton($n, Jn),
                    d.ModuleContainer.registerSingleton(Wn, tr),
                    d.ModuleContainer.registerSingleton(Kn, lr);
                var cr,
                    hr = s('rfrl'),
                    ur = s('KP/S'),
                    gr = s('wiGx');
                const mr = {
                    screen: gr.a.Hidden,
                    error: ur.b.NO_ERROR,
                    progress: 0,
                    numOfSyncedConv: 0,
                    popupVisible: !1,
                    startSyncTime: 0,
                    closing: !1,
                    syncingConversation: null,
                };
                Object(pt.b)(gr.b)(
                    (cr = class {
                        constructor() {
                            (this.state = Object(i.a)({}, mr)),
                                (this.name = 'sync-message-ui'),
                                (this.key = 'window_id');
                        }
                        showPopup() {
                            this.setState((e) => {
                                e.popupVisible = !0;
                            });
                        }
                        setSyncingConversation(e) {
                            this.setState((t) => {
                                t.syncingConversation = e;
                            });
                        }
                        hidePopup() {
                            this.setState((e) => {
                                e.popupVisible = !1;
                            });
                        }
                        hideAllUI() {
                            this.setState((e) => {
                                (e.screen = gr.a.Hidden), (e.closing = !1);
                            });
                        }
                        showError(e) {
                            this.setState((t) => {
                                (t.error = e), (t.screen = gr.a.Error), (t.syncingConversation = null);
                            });
                        }
                        showSuggestNewSync(e) {
                            this.setState((t) => {
                                (t.screen = gr.a.SuggestNewSync), (t.popupVisible = e);
                            });
                        }
                        showSuggestResume() {
                            this.setState((e) => {
                                (e.screen = gr.a.SuggestResume), (e.popupVisible = !1);
                            });
                        }
                        showSyncGuide() {
                            this.setState((e) => {
                                (e.screen = gr.a.SyncGuide), (e.popupVisible = !0);
                            });
                        }
                        showWaitForBackup() {
                            this.setState((e) => {
                                e.screen = gr.a.WaitForBackup;
                            });
                        }
                        showDownloadingBackup() {
                            this.setState((e) => {
                                (e.screen = gr.a.DownloadingBackup), (e.progress = 0);
                            });
                        }
                        showDecryptingBackup() {
                            this.setState((e) => {
                                (e.screen = gr.a.DecryptingBackup), (e.progress = 0);
                            });
                        }
                        showInProgress() {
                            this.setState((e) => {
                                (e.screen = gr.a.SyncInProgress), (e.progress = 0);
                            });
                        }
                        showCloseNotice() {
                            this.setState((e) => {
                                e.closing = !0;
                            });
                        }
                        showSuccessMessage() {
                            this.setState((e) => {
                                (e.screen = gr.a.SyncSuccess), (e.syncingConversation = null);
                            });
                        }
                        showWaitForNetwork() {
                            this.setState((e) => {
                                e.screen = gr.a.WaitForNetwork;
                            });
                        }
                        setProgress(e) {
                            this.setState((t) => {
                                t.progress = e;
                            });
                        }
                        setNumOfSyncedConv(e) {
                            this.setState((t) => {
                                t.numOfSyncedConv = e;
                            });
                        }
                        resetStartSyncTime() {
                            this.setState((e) => {
                                e.startSyncTime = Date.now();
                            });
                        }
                        clearError() {
                            this.setState((e) => {
                                e.error = ur.b.NO_ERROR;
                            });
                        }
                        getStartSyncTime() {
                            return this.state.startSyncTime;
                        }
                        getCurrentError() {
                            return this.state.error;
                        }
                        getCurrentScreen() {
                            return this.state.screen;
                        }
                        getPopupVisible() {
                            return this.state.popupVisible;
                        }
                        init() {}
                        getItem() {
                            return this.state;
                        }
                        getList() {
                            return [];
                        }
                        onGetItemFailure() {}
                        onGetListFailure() {}
                        setState(e) {
                            const t = Object(hr.a)(this.state, e);
                            this.state !== t && ((this.state = t), Object(Pe.g)(this.name, 'current'));
                        }
                    })
                );
                var pr,
                    fr = s('cPHW');
                let vr =
                    d.ModuleContainer.injectable()(
                        (pr = class {
                            start() {}
                            isEnable() {
                                return !1;
                            }
                            canSync() {
                                return ur.a.DISABLED;
                            }
                            suggestSync() {
                                throw new Error('Method not implemented.');
                            }
                            suggestResume() {
                                throw new Error('Method not implemented.');
                            }
                            sync() {
                                throw new Error('Method not implemented.');
                            }
                            resume() {
                                throw new Error('Method not implemented.');
                            }
                            cancel() {
                                throw new Error('Method not implemented.');
                            }
                            confirmCancelSyncInSuggestingPopup() {
                                throw new Error('Method not implemented.');
                            }
                            closeCancelSyncInSuggestingPopup() {
                                throw new Error('Method not implemented.');
                            }
                            pause() {
                                throw new Error('Method not implemented.');
                            }
                            retry() {
                                throw new Error('Method not implemented.');
                            }
                            rejectSuggest() {
                                throw new Error('Method not implemented.');
                            }
                            showSuggestPopup() {
                                throw new Error('Method not implemented.');
                            }
                            closeSuggestPopup() {
                                throw new Error('Method not implemented.');
                            }
                            setRequestBackupTimeout() {
                                throw new Error('Method not implemented.');
                            }
                            clearRequestBackupTimeout() {
                                throw new Error('Method not implemented.');
                            }
                            setAutoCloseSuccessTimeout() {
                                throw new Error('Method not implemented.');
                            }
                            clearAutoCloseSuccessTimeout() {
                                throw new Error('Method not implemented.');
                            }
                            resendRequest() {
                                throw new Error('Method not implemented.');
                            }
                            reset() {
                                throw new Error('Method not implemented.');
                            }
                            hideProgress() {
                                throw new Error('Method not implemented.');
                            }
                            handleCtrlEvents() {}
                        })
                    ) || pr;
                d.ModuleContainer.registerSingleton(fr.a, vr);
                var br = s('Erqw');
                const yr = (e) => {
                    var t;
                    const s = e.step,
                        i = e.registry;
                    let n = null !== (t = e.timeout) && void 0 !== t ? t : 0;
                    const r = e.callback,
                        a = e.args,
                        o = performance.now() + n;
                    let d;
                    function l() {
                        let e = Math.min(o - performance.now(), s);
                        return performance.now() > o ? (i[d] = setTimeout(r, 0, a)) : (i[d] = setTimeout(l, e)), i[d];
                    }
                    return (function () {
                        let e = Math.min(o - performance.now(), s);
                        return (d = setTimeout(l, e)), (i[d] = d), d;
                    })();
                };
                const { setTimeoutUnlimited: Ir, clearTimeoutUnlimited: _r } = (function (e) {
                    var t, s;
                    void 0 === e && (e = {});
                    const i = null !== (t = e.step) && void 0 !== t && t ? 1e4 : 36e5,
                        n = null !== (s = e.registry) && void 0 !== s ? s : {};
                    return {
                        setTimeoutUnlimited: function (e, t) {
                            for (var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), a = 2; a < s; a++)
                                r[a - 2] = arguments[a];
                            const o = yr({ step: i, registry: n, callback: e, timeout: t, args: r });
                            return o;
                        },
                        clearTimeoutUnlimited: (e) => {
                            ((e) => {
                                const t = e.id,
                                    s = e.registry;
                                clearTimeout(s[t]), delete s[t];
                            })({ id: e, registry: n });
                        },
                    };
                })({ registry: {} });
                var Mr,
                    Cr = s('1p+n'),
                    Tr = s('UYft'),
                    Or = s('AULX');
                Object(d.injectable)()(
                    (Mr =
                        Object(d.singleton)(Or.a)(
                            (Mr =
                                Object(L.g)()(
                                    (Mr =
                                        Object(L.e)()(
                                            (Mr =
                                                (function (e, t) {
                                                    return Object(d.inject)(_)(e, void 0, 0);
                                                })(
                                                    (Mr =
                                                        (function (e, t) {
                                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                                        })(
                                                            (Mr =
                                                                Reflect.metadata(
                                                                    'design:type',
                                                                    Function
                                                                )(
                                                                    (Mr =
                                                                        Reflect.metadata('design:paramtypes', [
                                                                            void 0 === I ? Object : I,
                                                                            void 0 === N.ZLoggerFactory
                                                                                ? Object
                                                                                : N.ZLoggerFactory,
                                                                        ])(
                                                                            (Mr = class {
                                                                                constructor(e, t) {
                                                                                    (this.kvCacheFactory = e),
                                                                                        (this.loggerFactory = t),
                                                                                        (this._logger = void 0),
                                                                                        (this._authEvent = void 0),
                                                                                        (this.__cache = void 0),
                                                                                        (this._renewRegistry = {}),
                                                                                        (this.updateEmitter =
                                                                                            new Cr.a()),
                                                                                        (this._logger =
                                                                                            this.loggerFactory.createZLogger(
                                                                                                'feat',
                                                                                                ['group-link']
                                                                                            ));
                                                                                }
                                                                                onAuthenticated(e) {
                                                                                    this._authEvent = e;
                                                                                }
                                                                                _makeCache() {
                                                                                    if (!this._authEvent)
                                                                                        throw new Error(
                                                                                            'Not authenticated'
                                                                                        );
                                                                                    return this.kvCacheFactory.createCache(
                                                                                        `group-link-v3-${
                                                                                            this._authEvent.getSession()
                                                                                                .userId
                                                                                        }`,
                                                                                        { maxSize: 50 }
                                                                                    );
                                                                                }
                                                                                get _cache() {
                                                                                    return (
                                                                                        this.__cache ||
                                                                                            (this.__cache =
                                                                                                this._makeCache()),
                                                                                        this.__cache
                                                                                    );
                                                                                }
                                                                                _scheduleRenew(e, t) {
                                                                                    if (
                                                                                        (this._clearRenewSchedule(e),
                                                                                        !t.enabled)
                                                                                    )
                                                                                        return this;
                                                                                    if (
                                                                                        !We.default.groupLink
                                                                                            .enableScheduleRenew
                                                                                    )
                                                                                        return (
                                                                                            this._logger.debug([
                                                                                                '_scheduleRenew skipped, enableScheduleRenew:',
                                                                                                We.default.groupLink
                                                                                                    .enableScheduleRenew,
                                                                                            ]),
                                                                                            this
                                                                                        );
                                                                                    let s =
                                                                                            t.expirationDate -
                                                                                            ii.a.getTimeNow(),
                                                                                        i = Ir(() => {
                                                                                            this._clearRenewSchedule(e),
                                                                                                this._emitGroupLinkUpdated(
                                                                                                    e,
                                                                                                    !0
                                                                                                );
                                                                                        }, s);
                                                                                    return (
                                                                                        (this._renewRegistry[e] =
                                                                                            () => {
                                                                                                _r(i),
                                                                                                    delete this
                                                                                                        ._renewRegistry[
                                                                                                        e
                                                                                                    ];
                                                                                            }),
                                                                                        this
                                                                                    );
                                                                                }
                                                                                _clearRenewSchedule(e) {
                                                                                    var t, s;
                                                                                    return (
                                                                                        null ===
                                                                                            (t = (s =
                                                                                                this._renewRegistry)[
                                                                                                e
                                                                                            ]) ||
                                                                                            void 0 === t ||
                                                                                            t.call(s),
                                                                                        this
                                                                                    );
                                                                                }
                                                                                onDispose() {
                                                                                    (this._authEvent = void 0),
                                                                                        (this.__cache = void 0);
                                                                                }
                                                                                async _getFromCache(e) {
                                                                                    if (
                                                                                        !We.default.groupLink
                                                                                            .enableCache
                                                                                    )
                                                                                        return void this._logger.debug([
                                                                                            'cache skipped, enableCache:',
                                                                                            We.default.groupLink
                                                                                                .enableCache,
                                                                                        ]);
                                                                                    e = Er(e);
                                                                                    let t = await this._cache.getItem(
                                                                                        e
                                                                                    );
                                                                                    if (t) {
                                                                                        if (
                                                                                            (function (e) {
                                                                                                if (!e) return !1;
                                                                                                let {
                                                                                                    data: t,
                                                                                                    meta: s,
                                                                                                } = e;
                                                                                                if (!t) return !1;
                                                                                                if (!s) return !1;
                                                                                                if (
                                                                                                    br.a.isOverflowAtTime(
                                                                                                        s.ts
                                                                                                    )
                                                                                                )
                                                                                                    return !1;
                                                                                                const i =
                                                                                                    ii.a.getTimeNow();
                                                                                                if (
                                                                                                    s.ts +
                                                                                                        We.default
                                                                                                            .groupLink
                                                                                                            .maxCacheDuration <
                                                                                                    i
                                                                                                )
                                                                                                    return !1;
                                                                                                if (
                                                                                                    t.enabled &&
                                                                                                    t.expirationDate < i
                                                                                                )
                                                                                                    return !1;
                                                                                                return !0;
                                                                                            })(t)
                                                                                        )
                                                                                            return t.data;
                                                                                        await this._cache.removeItem(e);
                                                                                    }
                                                                                }
                                                                                async _fetchAndPutToCache(e, t) {
                                                                                    const s = ii.a.getTimeNow(),
                                                                                        i = await t(),
                                                                                        n = {
                                                                                            enabled: i.enabled,
                                                                                            expirationDate:
                                                                                                i.expiration_date,
                                                                                            link: i.link,
                                                                                        };
                                                                                    let r = { ts: s };
                                                                                    return (
                                                                                        await this._cache.setItem(e, {
                                                                                            data: n,
                                                                                            meta: r,
                                                                                        }),
                                                                                        n
                                                                                    );
                                                                                }
                                                                                async _deleteCache(e) {
                                                                                    await this._cache.removeItem(e);
                                                                                }
                                                                                async getGroupLinkDetail(e, t) {
                                                                                    void 0 === t && (t = !1),
                                                                                        this._logger.zsymb(
                                                                                            12,
                                                                                            9640,
                                                                                            3e4,
                                                                                            ['getting', e]
                                                                                        );
                                                                                    let s = Er(e),
                                                                                        i = await this._getFromCache(s);
                                                                                    if (i && !t)
                                                                                        return (
                                                                                            this._logger.zsymb(
                                                                                                12,
                                                                                                9640,
                                                                                                30001,
                                                                                                ['cache hit', s]
                                                                                            ),
                                                                                            this._scheduleRenew(s, i),
                                                                                            i
                                                                                        );
                                                                                    this._logger.zsymb(
                                                                                        12,
                                                                                        9640,
                                                                                        30002,
                                                                                        ['fetching', s]
                                                                                    );
                                                                                    let n = He.default.getRawGroupId(s);
                                                                                    let r =
                                                                                        await this._fetchAndPutToCache(
                                                                                            s,
                                                                                            () =>
                                                                                                qe.default.getGroupLinkDetail(
                                                                                                    n
                                                                                                )
                                                                                        ).catch(
                                                                                            Tr.a.catch((e) =>
                                                                                                this._logger.zsymb(
                                                                                                    18,
                                                                                                    9640,
                                                                                                    30003,
                                                                                                    ['get failed', s, e]
                                                                                                )
                                                                                            )
                                                                                        );
                                                                                    return (
                                                                                        this._scheduleRenew(s, r),
                                                                                        t &&
                                                                                            (await this._emitGroupLinkUpdated(
                                                                                                e
                                                                                            )),
                                                                                        this._logger.zsymb(
                                                                                            12,
                                                                                            9640,
                                                                                            30004,
                                                                                            ['done', s]
                                                                                        ),
                                                                                        r
                                                                                    );
                                                                                }
                                                                                async renewGroupLink(e) {
                                                                                    this._logger.zsymb(
                                                                                        12,
                                                                                        9640,
                                                                                        30005,
                                                                                        ['renewing', e]
                                                                                    );
                                                                                    let t = Er(e),
                                                                                        s = He.default.getRawGroupId(t);
                                                                                    let i =
                                                                                        await this._fetchAndPutToCache(
                                                                                            t,
                                                                                            () =>
                                                                                                qe.default.renewGroupLink(
                                                                                                    s
                                                                                                )
                                                                                        ).catch(
                                                                                            Tr.a.catch((e) =>
                                                                                                this._logger.zsymb(
                                                                                                    18,
                                                                                                    9640,
                                                                                                    30006,
                                                                                                    [
                                                                                                        'renew failed',
                                                                                                        t,
                                                                                                        e,
                                                                                                    ]
                                                                                                )
                                                                                            )
                                                                                        );
                                                                                    return (
                                                                                        this._scheduleRenew(t, i),
                                                                                        await this._emitGroupLinkUpdated(
                                                                                            t
                                                                                        ),
                                                                                        this._logger.zsymb(
                                                                                            12,
                                                                                            9640,
                                                                                            30007,
                                                                                            ['renew done', e]
                                                                                        ),
                                                                                        i
                                                                                    );
                                                                                }
                                                                                async disableGroupLink(e) {
                                                                                    this._logger.zsymb(
                                                                                        12,
                                                                                        9640,
                                                                                        30008,
                                                                                        ['disabling', e]
                                                                                    );
                                                                                    let t = Er(e),
                                                                                        s = He.default.getRawGroupId(t);
                                                                                    await qe.default
                                                                                        .disableGroupLink(s)
                                                                                        .catch(
                                                                                            Tr.a.catch((e) =>
                                                                                                this._logger.zsymb(
                                                                                                    18,
                                                                                                    9640,
                                                                                                    30009,
                                                                                                    [
                                                                                                        'disable failed',
                                                                                                        t,
                                                                                                        e,
                                                                                                    ]
                                                                                                )
                                                                                            )
                                                                                        ),
                                                                                        await this._emitGroupLinkUpdated(
                                                                                            t,
                                                                                            !0
                                                                                        ),
                                                                                        this._logger.zsymb(
                                                                                            12,
                                                                                            9640,
                                                                                            30010,
                                                                                            ['disable done', e]
                                                                                        );
                                                                                }
                                                                                async _emitGroupLinkUpdated(e, t) {
                                                                                    void 0 === t && (t = !1);
                                                                                    const s = Er(e);
                                                                                    t && (await this._deleteCache(s)),
                                                                                        this.updateEmitter.emit(s, s),
                                                                                        this.updateEmitter.emit('*', s);
                                                                                }
                                                                                async emitGroupLinkUpdated(e) {
                                                                                    return await this._emitGroupLinkUpdated(
                                                                                        e,
                                                                                        !0
                                                                                    );
                                                                                }
                                                                            })
                                                                        ) || Mr)
                                                                ) || Mr)
                                                        ) || Mr)
                                                ) || Mr)
                                        ) || Mr)
                                ) || Mr)
                        ) || Mr)
                );
                function Er(e) {
                    return v.GROUPID_PREFIX + He.default.getRawGroupId(e);
                }
                var Sr,
                    wr = s('TO4U');
                const Dr = { loading: !0 };
                Object(pt.b)(wr.a)(
                    (Sr =
                        (function (e, t) {
                            return Object(d.inject)(Or.a)(e, void 0, 0);
                        })(
                            (Sr =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (Sr =
                                        Reflect.metadata('design:paramtypes', [void 0 === Or.a ? Object : Or.a])(
                                            (Sr = class e {
                                                constructor(e) {
                                                    (this._groupLink = e),
                                                        (this.type = void 0),
                                                        (this.name = 'group-link-ui'),
                                                        (this.key = 'group-link-ui'),
                                                        (this._cache = new O.default({ maxSize: 50 })),
                                                        (this._handleUpdate = (e) => {
                                                            const t = Lr(e);
                                                            this._cache.delete(t), this._startFetchAndSetToSession(t);
                                                        }),
                                                        this._groupLink.updateEmitter.on('*', this._handleUpdate);
                                                }
                                                init() {}
                                                getItem(e, t) {
                                                    if (!e.key.startsWith(v.GROUPID_PREFIX)) return;
                                                    const s = Lr(e.key);
                                                    this._startFetchAndSetToSession(s);
                                                    let i = this._cache.get(s);
                                                    return i || Dr;
                                                }
                                                static shouldSignal(e, t) {
                                                    var s, i, n, r, a, o;
                                                    return (
                                                        !e ||
                                                        (null == e || e.error,
                                                        null == t || t.error,
                                                        null == t || null === (s = t.data) || void 0 === s || s.enabled,
                                                        null == t || null === (i = t.data) || void 0 === i || i.enabled,
                                                        null != e &&
                                                            null !== (n = e.data) &&
                                                            void 0 !== n &&
                                                            n.enabled &&
                                                            null != t &&
                                                            null !== (r = t.data) &&
                                                            void 0 !== r &&
                                                            r.enabled &&
                                                            (null == e ||
                                                                null === (a = e.data) ||
                                                                void 0 === a ||
                                                                a.link,
                                                            null == t ||
                                                                null === (o = t.data) ||
                                                                void 0 === o ||
                                                                o.link),
                                                        !1)
                                                    );
                                                }
                                                signalIfNeeded(t, s, i) {
                                                    e.shouldSignal(s, i) && Object(Pe.g)(this.name, t);
                                                }
                                                _startFetchAndSetToSession(e) {
                                                    const t = this._cache.get(e);
                                                    setTimeout(() => {
                                                        this._groupLink
                                                            .getGroupLinkDetail(e)
                                                            .then((s) => {
                                                                const i = { loading: !1, data: s };
                                                                this._cache.set(e, i), this.signalIfNeeded(e, t, i);
                                                            })
                                                            .catch((s) => {
                                                                const i = { loading: !1, error: s };
                                                                this._cache.set(e, i), this.signalIfNeeded(e, t, i);
                                                            });
                                                    }, 0);
                                                }
                                                getList(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                onGetItemFailure(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                                onGetListFailure(e, t) {
                                                    throw new Error('Method not implemented.');
                                                }
                                            })
                                        ) || Sr)
                                ) || Sr)
                        ) || Sr)
                );
                function Lr(e) {
                    return v.GROUPID_PREFIX + He.default.getRawGroupId(e);
                }
                var Fr = s('akSd'),
                    Rr = s('xQyS'),
                    Ar = s('fqRP'),
                    Pr = s('L904'),
                    Nr = s('EiAw'),
                    jr = s('IoRb');
                let Ur;
                class Br {
                    static get instance() {
                        return Ur || (Ur = new Br()), Ur;
                    }
                    get _eventStore() {
                        return this.__eventStore || (this.__eventStore = s('emRR').default), this.__eventStore;
                    }
                    constructor() {
                        (this.__eventStore = void 0),
                            (this._emitConversationDeleted = (e) => {
                                let t,
                                    s,
                                    i = [];
                                if (
                                    (e.ok
                                        ? ({ conversation: t, toUid: s, allItems: i } = e.value)
                                        : ({ conversation: t, toUid: s, allItems: i } = e.error),
                                    t)
                                )
                                    return;
                                if (i.length && i.every((e) => e.ttlType === wi.a.Quote)) return;
                                const n = { type: Ze.FetchActions.DELETE_CONVERSATION, payload: s };
                                this._eventStore.dispatch(n), Ae.a.dispatch(n), Je.default.send(n.type, n.payload);
                            }),
                            (this._emitDeletedMsgs = (e) => {
                                let t, s;
                                e.ok
                                    ? ({ allItems: s, conversation: t } = e.value)
                                    : ({ allItems: s, conversation: t } = e.error);
                                const i = s.filter((e) => e.ttlType === wi.a.Message).map((e) => e.msgId);
                                Object(Nr.a)({ msgId: i, conversation: t });
                            }),
                            (this._emitUpdateUnread = (e, t) => {
                                let s,
                                    i = [];
                                e.ok ? ({ toUid: s, allItems: i } = e.value) : ({ toUid: s, allItems: i } = e.error),
                                    ot.a.UnreadDataManager.updateUnreadTTLConversation(
                                        s,
                                        i,
                                        null == t ? void 0 : t.get(s)
                                    );
                            }),
                            (this.emitPerConversation = async (e, t) => {
                                let s = await Object(Rr.a)(this._emitConversationDeleted, e);
                                s.ok || Object(jr.a)('_emitConversationDeleted failed', s.error),
                                    (s = await Object(Rr.a)(this._emitDeletedMsgs, e)),
                                    s.ok || Object(jr.a)('_emitDeletedMsgs failed', s.error),
                                    (s = await Object(Rr.a)(this._emitUpdateUnread, e, t)),
                                    s.ok || Object(jr.a)('_emitUpdateUnread failed', s.error);
                            });
                    }
                }
                var kr,
                    Gr = s('LA52'),
                    xr = s('GSaP');
                const zr = (e) => (null == e ? void 0 : e.toUid),
                    Vr = (e) => (null != e && e.ok ? 'success' : 'error');
                Object(d.singleton)(Gr.a)(
                    (kr =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (kr =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (kr = class {
                                        constructor() {
                                            var e = this;
                                            (this._pruning = !1),
                                                (this._task = void 0),
                                                (this._ttl = d.ModuleContainer.resolve(Ar.a)),
                                                (this._logger = void 0),
                                                (this.dispose = () => {}),
                                                (this.prune = async () =>
                                                    this._pruning
                                                        ? await this._task
                                                        : ((this._pruning = !0),
                                                          (this._task = this._pruneFromDB()),
                                                          (this._pruning = !1),
                                                          this._task)),
                                                (this._pruneFromDB = async () => {
                                                    const e = ii.a.getTimeNow();
                                                    this._logger.zsymb(0, 8948, 3e4, 'Pruner execute task', e);
                                                    const t = await Object(Rr.b)(this._ttl.getExpireItemsBefore, e);
                                                    if (!t.ok)
                                                        return (
                                                            this._logger.zsymb(
                                                                18,
                                                                8948,
                                                                30001,
                                                                'Pruner getExpireItemsBefore failed',
                                                                t.error
                                                            ),
                                                            { ok: !1, error: null }
                                                        );
                                                    const s = t.ok ? t.value : [];
                                                    return await this._pruneTTLItems(s);
                                                }),
                                                (this._pruneByMsgsBatch = []),
                                                (this.pruneByMsgs = async (e) => {
                                                    const t = Object(Xe.a)(e);
                                                    this._pruneByMsgsBatch.push(...t),
                                                        setTimeout(() => {
                                                            const e = this._pruneByMsgsBatch;
                                                            (this._pruneByMsgsBatch = []),
                                                                e.length &&
                                                                    (this._logger.zsymb(
                                                                        15,
                                                                        8948,
                                                                        30002,
                                                                        'running a batch {}',
                                                                        e.length
                                                                    ),
                                                                    this._pruneByMsgs(e));
                                                        }, 2e3);
                                                }),
                                                (this._pruneByMsgs = async (e) => {
                                                    const t = ii.a.getTimeNow();
                                                    this._logger.zsymb(15, 8948, 30003, 'deriving {}', e.length);
                                                    let s = xr.a.createFromCurrentSession().deriveTTLItems(e);
                                                    this._logger.zsymb(15, 8948, 30004, 'ttlItems count: {}', s.length),
                                                        (s = s.filter((e) => {
                                                            const s =
                                                                +e.expireOn +
                                                                We.default.ttl.enable_delete_on_filter_minimum_overtime;
                                                            return !isNaN(s) && s < t;
                                                        })),
                                                        this._logger.zsymb(
                                                            15,
                                                            8948,
                                                            30005,
                                                            'expired count: {}',
                                                            s.length
                                                        ),
                                                        (s = s.filter((e) => !this._hasPruneMsgCache(e))),
                                                        s.forEach((e) => {
                                                            this._setPruneMsgCache(e);
                                                        }),
                                                        this._logger.zsymb(
                                                            15,
                                                            8948,
                                                            30006,
                                                            'no cache count: {}',
                                                            s.length
                                                        ),
                                                        s.length
                                                            ? (this._logger.zsymb(
                                                                  3,
                                                                  8948,
                                                                  30007,
                                                                  'pruning {}, {}',
                                                                  s.length,
                                                                  s
                                                              ),
                                                              await this._deleteMsgsAndEmit(s))
                                                            : this._logger.zsymb(15, 8948, 30008, 'no items to prune');
                                                }),
                                                (this._pruneMsgCache = new O.default({ maxSize: 1e4 })),
                                                (this._pruneTTLItems = async (e) => {
                                                    const t = e.map((e) => [e.msgId, e.ttlType]);
                                                    this._logger.zsymb(
                                                        3,
                                                        8948,
                                                        30009,
                                                        'pruning {} items: {}',
                                                        t.length,
                                                        t
                                                    ),
                                                        await this._deleteMsgsAndEmit(e);
                                                    const s = await Object(Rr.b)(this._ttl.deletes, t);
                                                    return (
                                                        s.ok ||
                                                            this._logger.zsymb(
                                                                18,
                                                                8948,
                                                                30010,
                                                                'Pruner deletes ttl failed',
                                                                s.error
                                                            ),
                                                        s
                                                    );
                                                }),
                                                (this._retryErrorMsgsIfNeeded = (e) => {
                                                    for (const s of e) {
                                                        var t;
                                                        if (s.ok) continue;
                                                        const { errorItems: e, toUid: i } = s.error;
                                                        this._logger.zsymb(
                                                            0,
                                                            8948,
                                                            30011,
                                                            '_retryErrorDelete ' + i,
                                                            null == e || null === (t = e[0]) || void 0 === t
                                                                ? void 0
                                                                : t.msgId
                                                        ),
                                                            setTimeout(() => {
                                                                Object(Rr.b)(this._deleteMsgsBelongToTTLItems, e);
                                                            }, 5e3);
                                                    }
                                                }),
                                                (this._retryErrorDelete = (e) =>
                                                    setTimeout(async () => {
                                                        const t = await this._ttl.getMappedMsgsByConvIdFromTTLItems(e),
                                                            s = await Object(Rr.b)(this._deleteMsgsBelongToTTLItems, e);
                                                        !s.ok &&
                                                            this._logger.zsymb(
                                                                18,
                                                                8948,
                                                                30012,
                                                                'Pruner _retryErrorDelete',
                                                                s.error
                                                            ),
                                                            s.ok && this._emitPruneResult(s.value, t);
                                                    }, 5e3)),
                                                (this._emitPruneResult = async (e, t) => {
                                                    for (const s of e)
                                                        await Object(Rr.b)(Br.instance.emitPerConversation, s, t);
                                                }),
                                                (this._deletePerConversation = async function (e, t) {
                                                    var s, i, n, r, a, o, d, l, c;
                                                    void 0 === t && (t = []);
                                                    const h = await Object(Rr.b)(ri.b.vanishMessages, e, t);
                                                    if (!h.ok)
                                                        return {
                                                            ok: !1,
                                                            error: {
                                                                toUid: e,
                                                                allItems: [],
                                                                errorItems: t,
                                                                successItems: [],
                                                            },
                                                        };
                                                    const u =
                                                            null === (s = h.value.vanish) || void 0 === s
                                                                ? void 0
                                                                : s[0],
                                                        g =
                                                            null === (i = h.value.quote) || void 0 === i
                                                                ? void 0
                                                                : i[0];
                                                    if (!u && !g)
                                                        return {
                                                            ok: !1,
                                                            error: {
                                                                toUid: e,
                                                                conversation: {},
                                                                allItems: [],
                                                                errorItems: t,
                                                                successItems: [],
                                                            },
                                                        };
                                                    const m =
                                                        null === (n = h.value.vanish) ||
                                                        void 0 === n ||
                                                        null === (r = n[0]) ||
                                                        void 0 === r ||
                                                        null === (a = r.conv) ||
                                                        void 0 === a
                                                            ? void 0
                                                            : a.conversation;
                                                    let p = [
                                                        ...(null !==
                                                            (o =
                                                                null === (d = h.value.vanish) || void 0 === d
                                                                    ? void 0
                                                                    : d.map((e) => e.res).flat()) && void 0 !== o
                                                            ? o
                                                            : []),
                                                        ...(null !==
                                                            (l =
                                                                null === (c = h.value.quote) || void 0 === c
                                                                    ? void 0
                                                                    : c.flat()) && void 0 !== l
                                                            ? l
                                                            : []),
                                                    ];
                                                    p = p.filter((e) => e);
                                                    const { success: f = [], error: v = [] } = Object(Pr.a)(p, Vr),
                                                        b = f.map((e) => e.info),
                                                        y = v.map((e) => e.info),
                                                        I = [...b, ...y];
                                                    return y.length
                                                        ? {
                                                              ok: !1,
                                                              error: {
                                                                  toUid: e,
                                                                  conversation: m,
                                                                  allItems: I,
                                                                  successItems: b,
                                                                  errorItems: y,
                                                              },
                                                          }
                                                        : {
                                                              ok: !0,
                                                              value: {
                                                                  toUid: e,
                                                                  conversation: m,
                                                                  allItems: I,
                                                                  successItems: b,
                                                              },
                                                          };
                                                }),
                                                (this._deleteMsgsBelongToTTLItems = async (e) => {
                                                    const t = Object(Pr.a)(e, zr),
                                                        s = Object.keys(t).map(
                                                            async (e) => (
                                                                Object(Rr.b)(this._sideEffect, e, t[e]),
                                                                this._deletePerConversation(e, t[e])
                                                            )
                                                        );
                                                    return await Promise.all(s);
                                                }),
                                                (this._sideEffect = async function (t, s) {
                                                    return (
                                                        void 0 === s && (s = []),
                                                        setTimeout(async () => {
                                                            const i = await Object(Rr.b)(
                                                                e._cancelSendingPerConversation,
                                                                t,
                                                                s
                                                            );
                                                            i.ok ||
                                                                e._logger.zsymb(
                                                                    18,
                                                                    8948,
                                                                    30013,
                                                                    'cancelSendingPerConversation failed',
                                                                    i.error
                                                                );
                                                            const n = await Object(Rr.b)(
                                                                e._syncDeletePerConversation,
                                                                t,
                                                                s
                                                            );
                                                            n.ok ||
                                                                e._logger.zsymb(
                                                                    18,
                                                                    8948,
                                                                    30014,
                                                                    'syncDeletePerConversation failed',
                                                                    n.error
                                                                );
                                                        }, 0)
                                                    );
                                                }),
                                                (this._cancelSendingPerConversation = async function (e, t) {
                                                    void 0 === t && (t = []),
                                                        t.forEach((t) =>
                                                            Object(Rr.b)(() => {}, e, null == t ? void 0 : t.cliMsgId)
                                                        );
                                                }),
                                                (this._syncDeletePerConversation = async function (e, t) {
                                                    if ((void 0 === t && (t = []), !We.default.ttl.enable_sync_delete))
                                                        return;
                                                    const s = (t) => {
                                                        +t.msgId &&
                                                            Object(Fr.e)(e, {
                                                                cliMsgId: t.cliMsgId,
                                                                msgId: t.msgId,
                                                                sendDttm: t.sendDttm,
                                                                toUid: e,
                                                                fromUid: t.fromUid,
                                                            });
                                                    };
                                                    t.forEach((e) => Object(Rr.b)(s, e));
                                                }),
                                                (this._pruning = !1),
                                                (this._logger = d.ModuleContainer.resolve(
                                                    N.ZLoggerFactory
                                                ).createZLogger('utils', ['ttl', 'destructor', 'pruner']));
                                        }
                                        _getPruneMsgKey(e) {
                                            return e ? `${e.msgId}|${e.ttlType}` : '';
                                        }
                                        _hasPruneMsgCache(e) {
                                            return this._pruneMsgCache.has(this._getPruneMsgKey(e));
                                        }
                                        _setPruneMsgCache(e) {
                                            this._pruneMsgCache.set(this._getPruneMsgKey(e), void 0);
                                        }
                                        async _deleteMsgsAndEmit(e) {
                                            const t = await this._ttl.getMappedMsgsByConvIdFromTTLItems(e),
                                                s = await Object(Rr.b)(this._deleteMsgsBelongToTTLItems, e);
                                            s.ok ||
                                                (this._logger.zsymb(18, 8948, 30015, 'Pruner', 'deleteMessages failed'),
                                                this._retryErrorDelete(e)),
                                                s.ok && this._retryErrorMsgsIfNeeded(s.value),
                                                s.ok && this._emitPruneResult(s.value, t);
                                        }
                                    })
                                ) || kr)
                        ) || kr)
                );
                function $r(e, t) {
                    return e.reduce((e, s, i, n) => (e[t(s, i, n) ? 0 : 1].push(s), e), [[], []]);
                }
                var Wr;
                const Kr = v.MessageConstants.MAX_MSG_ID;
                Object(d.singleton)(Ar.a)(
                    (Wr =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Wr =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Wr = class {
                                        constructor() {
                                            (this._logger = void 0),
                                                (this.dispose = () => {}),
                                                (this._safePut = async (e) => {
                                                    const t = [],
                                                        s = [],
                                                        i = P.a.getInstance();
                                                    for (const r of e)
                                                        try {
                                                            await i.MsgInfo.TTLItem.insert(r, { replace: !0 }),
                                                                t.push(r);
                                                        } catch (n) {
                                                            s.push([r, n]);
                                                        }
                                                    return [t, s];
                                                }),
                                                (this.putMsgs = async (e) => {
                                                    let t = e.map((e) => Qr(e));
                                                    const [s, i] = $r(t, (e) => e.ok),
                                                        n = s.map((e) => e.value);
                                                    let r = [],
                                                        a = [];
                                                    [a, r] = await this._safePut(n);
                                                    const o = i.map((e) => e.error);
                                                    return r.lastItem || o.length
                                                        ? { ok: !1, error: { invalidItems: o, errorItems: r } }
                                                        : { ok: !0, value: a };
                                                }),
                                                (this.deletes = (e) =>
                                                    P.a.getInstance().MsgInfo.TTLItem.deleteMulti(e)),
                                                (this.getExpireItemsBefore = async (e, t) => {
                                                    const s = t
                                                            ? {
                                                                  from: [t.expireOn, t.toUid, t.msgId, t.ttlType],
                                                                  to: [e, Kr, Kr, Number.MAX_VALUE],
                                                                  excludeFrom: !1,
                                                                  excludeTo: !0,
                                                              }
                                                            : { to: [e, Kr, Number.MAX_VALUE], excludeTo: !1 },
                                                        i = { limit: 50, index: 'expireOn_toUid_pk' },
                                                        n = P.a.getInstance();
                                                    return await n.MsgInfo.TTLItem.getAll(s, i);
                                                }),
                                                (this.getYoungestExpiredItem = async () => {
                                                    const e = {
                                                            to: [Number.MAX_VALUE, Kr, Kr, Number.MAX_VALUE],
                                                            excludeTo: !0,
                                                        },
                                                        t = P.a.getInstance();
                                                    return (
                                                        await t.MsgInfo.TTLItem.getAll(e, {
                                                            limit: 1,
                                                            index: 'expireOn_toUid_pk',
                                                        })
                                                    )[0];
                                                }),
                                                (this.getMappedMsgsByConvIdFromTTLItems = async (e) => {
                                                    const t = bi.b.messageCache;
                                                    let s;
                                                    return t && (s = await t.getMappedMessagesByConvIdAsync(e)), s;
                                                }),
                                                (this._logger = d.ModuleContainer.resolve(
                                                    N.ZLoggerFactory
                                                ).createZLogger('utils', ['ttl', 'destructor', 'ttl']));
                                        }
                                    })
                                ) || Wr)
                        ) || Wr)
                );
                const qr = (e) => ('number' == typeof e ? String(e) : e),
                    Hr = [wi.a.Message, wi.a.Quote],
                    Qr = function (e) {
                        void 0 === e && (e = {});
                        const t = Object(i.a)({}, e);
                        return (
                            (t.cliMsgId = qr(t.cliMsgId)),
                            t.cliMsgId
                                ? ((t.fromUid = qr(t.fromUid)),
                                  t.fromUid
                                      ? ((t.toUid = qr(t.toUid)),
                                        t.toUid
                                            ? ((t.msgId = qr(t.msgId)),
                                              (s = t.ttlType),
                                              Hr.includes(s)
                                                  ? ((t.expireOn = +t.expireOn),
                                                    'number' != typeof t.expireOn
                                                        ? { ok: !1, error: e }
                                                        : { ok: !0, value: t })
                                                  : { ok: !1, error: e })
                                            : { ok: !1, error: e })
                                      : { ok: !1, error: e })
                                : { ok: !1, error: e }
                        );
                        var s;
                    };
                var Jr = s('oOjv'),
                    Zr = s('bB26'),
                    Xr = s('lteq');
                const Yr = { [Mt.c]: {} };
                d.ModuleContainer.registerSingleton(
                    Jr.b,
                    class {
                        constructor() {
                            (this.state = Yr),
                                (this.animationControllers = new Map()),
                                (this._manuallyOff = !1),
                                (this.name = Jr.a),
                                (this.key = 'convId'),
                                (this.isFeatEnabled = () => !this._manuallyOff && We.default.preview_msg_time.enable),
                                (this.state = Yr);
                        }
                        offFeature() {
                            this._manuallyOff = !0;
                        }
                        enableFeature() {
                            this._manuallyOff = !1;
                        }
                        getAnimController(e) {
                            if (!this.isFeatEnabled()) return null;
                            if (!this.animationControllers.has(e)) {
                                const t = new Zr.a(e);
                                this.animationControllers.set(e, t);
                            }
                            return this.animationControllers.get(e) || null;
                        }
                        setScrollDirection(e, t) {
                            if (!this.isFeatEnabled()) return;
                            const s = this.getAnimController(e);
                            null == s || s.setScrollDirection(t);
                        }
                        hasNewMsgInView(e, t) {
                            if (!this.isFeatEnabled()) return;
                            const s = this.getAnimController(e);
                            null == s || s.hasNewMsgInView(t);
                        }
                        hasViewOverflowMsg(e, t) {
                            if (!this.isFeatEnabled()) return;
                            const s = this.getAnimController(e);
                            null == s || s.hasViewOverflowMsg(t);
                        }
                        hitBottom(e, t) {
                            if (!this.isFeatEnabled()) return;
                            const s = this.getAnimController(e);
                            null == s || s.hitBottom(t);
                        }
                        triggerActiveScroll(e, t) {
                            if (!this.isFeatEnabled()) return;
                            const s = this.getAnimController(e);
                            null == s || s.triggerActiveScroll(t);
                        }
                        onChangeConversation(e) {
                            var t;
                            const s = this.getAnimController(e);
                            null == s || s.resetAnimation(),
                                null === (t = Xr.a.getInViewController(e)) || void 0 === t || t.resetPreviewTimestamp();
                        }
                        clearAnimations(e) {
                            const t = this.getAnimController(e);
                            null == t || t.clearAnimations();
                        }
                        onMouseEnterPreviewTime(e, t) {
                            if (!this.isFeatEnabled() || !t) return;
                            const s = this.getAnimController(e);
                            (null == s ? void 0 : s.mountedPreviewTime) === t && (null == s || s.pause());
                        }
                        onMouseLeavePreviewTime(e, t) {
                            if (!this.isFeatEnabled() || !t) return;
                            const s = this.getAnimController(e);
                            (null == s ? void 0 : s.mountedPreviewTime) === t && (null == s || s.resume());
                        }
                        setTopMost(e, t, s) {
                            if (!this.isFeatEnabled()) return;
                            const i = this.getAnimController(e);
                            null == i || i.setTopMost(t, s);
                        }
                        setSecondTopMost(e, t, s) {
                            if (!this.isFeatEnabled()) return;
                            const i = this.getAnimController(e);
                            null == i || i.setSecondTopMost(t, s);
                        }
                        init() {}
                        getItem(e) {
                            return this.state[e.key];
                        }
                        getList(e) {
                            return Object.keys(this.state);
                        }
                        onGetItemFailure(e) {}
                        onGetListFailure(e) {}
                    }
                );
                const ea = Object(d.define)('chat-box-list-controller');
                var ta,
                    sa = s('Ti+8');
                Object(L.h)()(
                    (ta =
                        Object(L.g)()(
                            (ta =
                                Object(d.singleton)(ea)(
                                    (ta =
                                        Object(d.injectable)()(
                                            (ta =
                                                (function (e, t) {
                                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 0);
                                                })(
                                                    (ta =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (ta =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    void 0 === N.ZLoggerFactory
                                                                        ? Object
                                                                        : N.ZLoggerFactory,
                                                                ])(
                                                                    (ta = class {
                                                                        constructor(e) {
                                                                            (this.logger = void 0),
                                                                                (this.handleMessageDelivered = (e) => {
                                                                                    var t;
                                                                                    He.default.log([
                                                                                        'message delivered',
                                                                                        null === (t = e.payload) ||
                                                                                        void 0 === t
                                                                                            ? void 0
                                                                                            : t.length,
                                                                                    ]);
                                                                                }),
                                                                                (this.logger = e.createZLogger('feat', [
                                                                                    'chat-box-list-controller',
                                                                                ]));
                                                                        }
                                                                        onStart() {
                                                                            d.ModuleContainer.resolve(
                                                                                sa.a
                                                                            ).addEventListener(
                                                                                Gn.MessageDelivered,
                                                                                this.handleMessageDelivered
                                                                            );
                                                                        }
                                                                        onDispose() {
                                                                            d.ModuleContainer.resolve(
                                                                                sa.a
                                                                            ).removeEventListener(
                                                                                Gn.MessageDelivered,
                                                                                this.handleMessageDelivered
                                                                            );
                                                                        }
                                                                        openConversation(e) {
                                                                            return Promise.resolve(!0);
                                                                        }
                                                                    })
                                                                ) || ta)
                                                        ) || ta)
                                                ) || ta)
                                        ) || ta)
                                ) || ta)
                        ) || ta)
                );
                var ia,
                    na = s('7nHs');
                const ra = {
                    isShown: !1,
                    modalTitle: '',
                    guideTitle: '',
                    errorCode: '',
                    guideItems: [],
                    showReloadBtn: !0,
                    reloadBtnName: 'STR_BU_CONFIRM_TEXT_4',
                    showDeleteDataBtn: !0,
                    deleteDataBtnName: 'STR_BU_CANCEL_TEXT_4',
                };
                Object(pt.b)(na.a)(
                    (ia = class {
                        constructor() {
                            (this.name = na.b), (this.key = ''), (this.state = ra);
                        }
                        setState(e) {
                            const t = Object(hr.a)(this.state, e);
                            this.state !== t && ((this.state = t), Object(Pe.g)(this.name, ''));
                        }
                        showModal(e) {
                            this.state.isShown ||
                                this.setState((t) =>
                                    Object(i.a)(Object(i.a)(Object(i.a)({}, t), e), {}, { isShown: !0 })
                                );
                        }
                        closeModal() {
                            this.state.isShown &&
                                this.setState((e) =>
                                    Object(i.a)(Object(i.a)(Object(i.a)({}, e), ra), {}, { isShown: !1 })
                                );
                        }
                        init(e) {}
                        getItem(e, t) {
                            return this.state;
                        }
                        getList(e, t) {
                            return [];
                        }
                        onGetItemFailure(e, t) {
                            throw new Error('Method not implemented.');
                        }
                        onGetListFailure(e, t) {
                            throw new Error('Method not implemented.');
                        }
                    })
                );
                var aa,
                    oa = s('Mf7h'),
                    da = s('8c0e');
                const la = new He.LocalId();
                Object(d.injectable)()(
                    (aa =
                        Object(d.singleton)(da.a)(
                            (aa = class {
                                constructor() {
                                    (this._linkPreviewDatas = new Map()),
                                        (this._lastCheckLinks = new Map()),
                                        (this._listeners = new Map());
                                }
                                addListenerAtConv(e, t) {
                                    if (e && 'function' == typeof t) {
                                        const s = this._listeners.get(e);
                                        this._listeners.set(e, [...(s || []), t]);
                                    }
                                }
                                removeListenerAtConv(e, t) {
                                    let s = this._listeners.get(e);
                                    s && s.length > 0 && ((s = s.filter((e) => e !== t)), this._listeners.set(e, s));
                                }
                                removeAllListenerAtConv(e) {
                                    this._listeners.delete(e);
                                }
                                setLastCheckLinkByConvId(e, t) {
                                    this._lastCheckLinks.set(e, t);
                                }
                                isLastCheckLinkOfConv(e, t) {
                                    const s = this._lastCheckLinks.get(e);
                                    return !!s && s === t;
                                }
                                getLinkPreviewDataByConvId(e) {
                                    return this._linkPreviewDatas.get(e) || null;
                                }
                                addLinkDataToConv(e, t) {
                                    const s = this._prepareLinkPreviewData(e, t);
                                    this._linkPreviewDatas.set(e, Object(i.a)({}, s));
                                    const n = {
                                        action: Ze.LinkPreviewActions.NEW_LINK_PREVIEW,
                                        payload: { newLinkPreviewData: Object(i.a)({}, s) },
                                    };
                                    this._notifyLinkPreviewDataChangeToConv(e, n),
                                        oa.a.emit(Ze.LinkPreviewActions.NEW_LINK_PREVIEW, {
                                            newLinkPreviewData: Object(i.a)({}, s),
                                        });
                                }
                                createLoadingLinkPreview(e, t) {
                                    const s = {
                                        id: la.next(),
                                        convId: e,
                                        content: {
                                            title: Rt.default.str('STR_GETTING_LINK_INFO'),
                                            src: t,
                                            desc: '',
                                            thumb: '',
                                            loading: !0,
                                        },
                                        link: t,
                                        shouldParseLinkOrContact: !0,
                                    };
                                    e && this._linkPreviewDatas.set(e, Object(i.a)({}, s));
                                    const n = {
                                        action: Ze.LinkPreviewActions.NEW_LINK_PREVIEW,
                                        payload: { newLinkPreviewData: Object(i.a)({}, s) },
                                    };
                                    this._notifyLinkPreviewDataChangeToConv(e, n),
                                        oa.a.emit(Ze.LinkPreviewActions.NEW_LINK_PREVIEW, {
                                            newLinkPreviewData: Object(i.a)({}, s),
                                        });
                                }
                                removeLinkPreviewData(e) {
                                    if (!e) return;
                                    this._linkPreviewDatas.delete(e);
                                    const t = { action: Ze.LinkPreviewActions.HIDE_LINK_PREVIEW, payload: null };
                                    this._notifyLinkPreviewDataChangeToConv(e, t),
                                        oa.a.emit(Ze.LinkPreviewActions.HIDE_LINK_PREVIEW, null);
                                }
                                _notifyLinkPreviewDataChangeToConv(e, t) {
                                    const s = this._listeners.get(e);
                                    null == s ||
                                        s.forEach((e) => {
                                            'function' == typeof e && e({ action: t.action, payload: t.payload });
                                        });
                                }
                                _prepareLinkPreviewData(e, t) {
                                    return {
                                        id: la.next(),
                                        convId: e,
                                        link: t.link,
                                        content: t.content,
                                        shouldParseLinkOrContact: !1,
                                    };
                                }
                            })
                        ) || aa)
                );
                var ca,
                    ha = s('iy3m'),
                    ua = s('twqL');
                Object(L.h)()(
                    (ca =
                        Object(d.singleton)(ua.a)(
                            (ca =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (ca =
                                        Reflect.metadata(
                                            'design:paramtypes',
                                            []
                                        )(
                                            (ca = class {
                                                constructor() {
                                                    (this.changeTimeFlushNotiReactWhenResumeApp =
                                                        this.changeTimeFlushNotiReactWhenResumeApp.bind(this)),
                                                        (this.changeTimeFlushNotiReactWhenDisNetwork =
                                                            this.changeTimeFlushNotiReactWhenDisNetwork.bind(this)),
                                                        (this.changeTimeFlushNotiReactWhenStartApp =
                                                            this.changeTimeFlushNotiReactWhenStartApp.bind(this));
                                                }
                                                onStart(e) {
                                                    this.changeTimeFlushNotiReactWhenStartApp();
                                                }
                                                changeTimeFlushNotiReactWhenResumeApp() {
                                                    this.changeTimeFlushNotiReact(Object(ha.d)());
                                                }
                                                setupTimer(e) {
                                                    (Si.a.TimeFlushNotiReact = e),
                                                        (Si.a.TimeMaxWaiting = Object(ha.a)()),
                                                        Si.a.setupIntervalToFlushNotiReact(),
                                                        Si.a.setupTimeoutToGoBackNormalCondition();
                                                }
                                                changeTimeFlushNotiReactWhenDisNetwork(e) {
                                                    if (e === en.a.CONNECTED) {
                                                        const e = en.b.getPreStateNetwork();
                                                        e !== en.a.CONNECTED &&
                                                            e !== en.a.NOT_SET &&
                                                            this.changeTimeFlushNotiReact(Object(ha.b)());
                                                    }
                                                }
                                                changeTimeFlushNotiReactWhenStartApp() {
                                                    this.changeTimeFlushNotiReact(Object(ha.e)());
                                                }
                                                changeTimeFlushNotiReact(e) {
                                                    Si.a.notiReactTimeoutId
                                                        ? (Si.a.TimeFlushNotiReact !== e &&
                                                              ((Si.a.TimeFlushNotiReact = e),
                                                              Si.a.setupIntervalToFlushNotiReact()),
                                                          Si.a.TimeMaxWaiting !== Object(ha.a)() &&
                                                              ((Si.a.TimeMaxWaiting = Object(ha.a)()),
                                                              Si.a.setupTimeoutToGoBackNormalCondition()))
                                                        : this.setupTimer(e);
                                                }
                                            })
                                        ) || ca)
                                ) || ca)
                        ) || ca)
                );
                var ga,
                    ma = s('K0f4'),
                    pa = s('buT3'),
                    fa = s('wudS');
                Object(L.h)()(
                    (ga =
                        Object(L.e)()(
                            (ga = class {
                                onAuthenticated(e) {
                                    const { userId: t } = e.getSession();
                                    if (t) {
                                        const e = Object(fa.b)(t),
                                            s = `${e}_${ma.m}`,
                                            i = pa.a.getItem(s);
                                        if (!(null !== i)) return;
                                        const n = 97124,
                                            r = '1' === i,
                                            a = `${e}_${ma.g}`,
                                            o = +(pa.a.getItem(a) || '-1'),
                                            d = isNaN(o) ? -1 : o,
                                            l = `${e}_${ma.i}`,
                                            c = +(pa.a.getItem(l) || '-1'),
                                            h = isNaN(c) ? -1 : c;
                                        if (r) S.default.increaseSuccess(n, 0, d, [h]);
                                        else {
                                            const t = `${e}_${ma.c}`,
                                                s = pa.a.getItem(t),
                                                i = Number(s);
                                            S.default.increaseFailed(n, 0, d, i, Date.now(), [h]);
                                        }
                                        pa.a.removeItem(s), pa.a.removeItem(a), pa.a.removeItem(l);
                                    }
                                }
                                onStart() {
                                    const e = ma.l,
                                        t = pa.a.getItem(e);
                                    if (!(null !== t)) return;
                                    const s = '1' === t,
                                        i = ma.f,
                                        n = +(pa.a.getItem(i) || '-1'),
                                        r = isNaN(n) ? -1 : n,
                                        a = ma.h,
                                        o = +(pa.a.getItem(a) || '-1'),
                                        d = isNaN(o) ? -1 : o;
                                    if (s) S.default.increaseSuccess(97123, 0, r, [d]);
                                    else {
                                        const e = pa.a.getItem(ma.b),
                                            t = Number(e);
                                        S.default.increaseFailed(97123, 0, r, t, Date.now(), [d]);
                                    }
                                    pa.a.removeItem(e), pa.a.removeItem(i), pa.a.removeItem(a);
                                }
                            })
                        ) || ga)
                );
                var va,
                    ba = s('l9L4'),
                    ya = s('CDcE');
                Object(L.d)()(
                    (va =
                        Object(d.injectable)()(
                            (va =
                                Object(d.singleton)(ba.a)(
                                    (va =
                                        (function (e, t) {
                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 0);
                                        })(
                                            (va =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (va =
                                                        Reflect.metadata('design:paramtypes', [
                                                            void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                        ])(
                                                            (va = class {
                                                                constructor(e) {
                                                                    (this._isFirstLoginMap = new Map()),
                                                                        (this._firstLoginTimeMap = new Map()),
                                                                        (this._logger = void 0),
                                                                        (this._logger = e.createZLogger('utils', [
                                                                            'first-login-checker',
                                                                        ]));
                                                                }
                                                                getFirstLoginTime(e) {
                                                                    if (this.firstLoginTimeMap.has(e))
                                                                        return (
                                                                            this.firstLoginTimeMap.get(e) ||
                                                                            this.getDefaultFirstLoginTime()
                                                                        );
                                                                    try {
                                                                        const t = u.a
                                                                            .getInstance()
                                                                            .getItemForCurrentUser(
                                                                                v.FirstLoginLocalStorageKeys
                                                                                    .FIRST_LOGIN_TIME
                                                                            );
                                                                        null != t &&
                                                                            this.firstLoginTimeMap.set(e, parseInt(t));
                                                                    } catch (t) {
                                                                        this.logger.zsymb(
                                                                            21,
                                                                            8183,
                                                                            3e4,
                                                                            'getFirstLoginTime error {} - {}',
                                                                            e,
                                                                            Object(ya.f)(t, 2)
                                                                        );
                                                                    }
                                                                    return (
                                                                        this.firstLoginTimeMap.get(e) ||
                                                                        this.getDefaultFirstLoginTime()
                                                                    );
                                                                }
                                                                isFirstLogin(e) {
                                                                    return !!this._isFirstLoginMap.get(e);
                                                                }
                                                                onApplicationReady(e) {
                                                                    this.removeFirstLoginFlag();
                                                                }
                                                                setFirstLogin(e, t) {
                                                                    this._isFirstLoginMap.set(e, t);
                                                                }
                                                                setFirstLoginTime(e, t) {
                                                                    this.firstLoginTimeMap.set(e, t);
                                                                    try {
                                                                        u.a
                                                                            .getInstance()
                                                                            .setItemForCurrentUser(
                                                                                v.FirstLoginLocalStorageKeys
                                                                                    .FIRST_LOGIN_TIME,
                                                                                (t && t.toString()) || ''
                                                                            );
                                                                    } catch (s) {
                                                                        this.logger.zsymb(
                                                                            21,
                                                                            8183,
                                                                            30001,
                                                                            'setFirstLoginTime error {} - {} - {}',
                                                                            e,
                                                                            t,
                                                                            Object(ya.f)(s, 2)
                                                                        );
                                                                    }
                                                                }
                                                                removeFirstLoginFlag() {
                                                                    const e = rt.default.getUidMe(),
                                                                        t = u.a.getInstance();
                                                                    t.getItem(
                                                                        v.FirstLoginLocalStorageKeys.IS_FIRST_LOGIN
                                                                    ) === e &&
                                                                        t.removeItem(
                                                                            v.FirstLoginLocalStorageKeys.IS_FIRST_LOGIN
                                                                        );
                                                                }
                                                                getDefaultFirstLoginTime() {
                                                                    return ii.a.getTimeNow();
                                                                }
                                                                get firstLoginTimeMap() {
                                                                    return this._firstLoginTimeMap;
                                                                }
                                                                get logger() {
                                                                    return this._logger;
                                                                }
                                                            })
                                                        ) || va)
                                                ) || va)
                                        ) || va)
                                ) || va)
                        ) || va)
                );
                const Ia = Object(d.define)('transfer-data-suggestion-loader');
                var _a = s('cgeJ'),
                    Ma = s('XVri'),
                    Ca = s('bAqL');
                var Ta = class {
                    constructor(e) {
                        (this._logger = void 0), (this._moduleName = void 0), (this._moduleName = e);
                    }
                    log() {
                        this.Logger.zsymb(0, 8218, 3e4, this.moduleTagName, ...arguments);
                    }
                    logError(e, t) {
                        const s = null == t ? '' : this.stringifyDepthLevel(t);
                        this.Logger.zsymb(18, 8218, 30001, this.moduleTagName, e, s);
                    }
                    stringifyDepthLevel(e) {
                        return Object(Ca.g)(e, Object(Ca.c)());
                    }
                    get Logger() {
                        return (
                            this._logger ||
                                (this._logger = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger('msg-sync', [
                                    Ma.a,
                                ])),
                            this._logger
                        );
                    }
                    get moduleTagName() {
                        return this._moduleName + ' - ';
                    }
                };
                var Oa,
                    Ea = class {
                        constructor(e) {
                            (this.moduleName = e), (this._logger = void 0), (this._logger = new Ta(this.moduleName));
                        }
                        get Logger() {
                            return this._logger;
                        }
                    };
                function Sa(e) {
                    try {
                        return JSON.stringify(e);
                    } catch (t) {
                        return '';
                    }
                }
                function wa(e) {
                    return JSON.parse(e);
                }
                Object(d.injectable)()(
                    (Oa =
                        Object(d.singleton)(Ia)(
                            (Oa =
                                Reflect.metadata(
                                    'design:type',
                                    Function
                                )(
                                    (Oa =
                                        Reflect.metadata(
                                            'design:paramtypes',
                                            []
                                        )(
                                            (Oa = class extends Ea {
                                                constructor() {
                                                    super(_a.d.LOADER),
                                                        (this._friendManager = void 0),
                                                        (this._groupManager = void 0);
                                                }
                                                async loadLastCloseBannerDownloadPC() {
                                                    const e = this.getSecureLocalStorageDB();
                                                    if (!e)
                                                        return (
                                                            this.Logger.logError(
                                                                'Load last close banner download pc failed cause invalid storage'
                                                            ),
                                                            Promise.reject()
                                                        );
                                                    try {
                                                        const t = await e.getItemForCurrentUserAsync(_a.b);
                                                        return null != t
                                                            ? wa(t)
                                                            : (this.Logger.logError(
                                                                  'Load last close banner download pc failed null'
                                                              ),
                                                              null);
                                                    } catch (t) {
                                                        return (
                                                            this.Logger.logError(
                                                                'Load last close banner download pc failed',
                                                                t
                                                            ),
                                                            t
                                                        );
                                                    }
                                                }
                                                async loadListConversationsFromDB() {
                                                    const e = this.getSecureLocalStorageDB();
                                                    if (!e)
                                                        return (
                                                            this.Logger.logError(
                                                                'Load list conversations from DB failed cause invalid storage'
                                                            ),
                                                            Promise.reject([])
                                                        );
                                                    try {
                                                        const t = await e.getItemForCurrentUserAsync(_a.c);
                                                        return null != t
                                                            ? wa(t)
                                                            : (this.Logger.logError(
                                                                  'Load list conversations from DB failed null'
                                                              ),
                                                              []);
                                                    } catch (t) {
                                                        return (
                                                            this.Logger.logError(
                                                                'Load list conversations from DB failed',
                                                                t
                                                            ),
                                                            []
                                                        );
                                                    }
                                                }
                                                async loadListFriends() {
                                                    const e = this.getFriendManagerModule();
                                                    if (e)
                                                        try {
                                                            return await e.getFriends();
                                                        } catch (t) {
                                                            return (
                                                                this.Logger.logError('Load list friends failed', t), []
                                                            );
                                                        }
                                                    return this.Logger.log('Load list friends empty'), [];
                                                }
                                                async loadListGroups() {
                                                    const e = this.getGroupManagerModule();
                                                    if (e)
                                                        try {
                                                            return await e.getGroupsList();
                                                        } catch (t) {
                                                            return (
                                                                this.Logger.logError('Load list groups failed', t), []
                                                            );
                                                        }
                                                    return this.Logger.log('Load list groups empty'), [];
                                                }
                                                async loadRegisteredData() {
                                                    const e = this.getSecureLocalStorageDB();
                                                    if (!e)
                                                        return (
                                                            this.Logger.logError(
                                                                'Load registered data failed cause invalid storage'
                                                            ),
                                                            Promise.reject()
                                                        );
                                                    try {
                                                        let t = e.getItemForCurrentUser(
                                                            v.RegisterLocalStorageKeys.IS_REGISTERED_ON_THIS_DEVICE
                                                        );
                                                        return null != t
                                                            ? { isRegisteredOnThisDevice: wa(t) }
                                                            : (this.Logger.log('Load registered data null'), null);
                                                    } catch (t) {
                                                        return (
                                                            this.Logger.logError('Load registered data failed', t), t
                                                        );
                                                    }
                                                }
                                                async loadSyncMessagesData() {
                                                    const e = this.getSecureLocalStorageDB();
                                                    if (!e)
                                                        return (
                                                            this.Logger.logError(
                                                                'Load sync messages data failed cause invalid storage'
                                                            ),
                                                            Promise.reject()
                                                        );
                                                    try {
                                                        const t = e.getItemForCurrentUser('sync_cross_settings');
                                                        return t
                                                            ? wa(t)
                                                            : (this.Logger.log('Load sync messages data null'), null);
                                                    } catch (t) {
                                                        return (
                                                            this.Logger.logError('Load sync messages data failed', t), t
                                                        );
                                                    }
                                                }
                                                async loadTransferMessagesData() {
                                                    const e = this.getSecureLocalStorageDB();
                                                    if (!e)
                                                        return (
                                                            this.Logger.logError(
                                                                'Load transfer messages data failed cause invalid storage'
                                                            ),
                                                            Promise.reject()
                                                        );
                                                    try {
                                                        const t = await e.getItemForCurrentUserAsync(_a.k);
                                                        return t
                                                            ? wa(t)
                                                            : (this.Logger.logError(
                                                                  'Load transfer messages data failed null'
                                                              ),
                                                              null);
                                                    } catch (t) {
                                                        return (
                                                            this.Logger.logError(
                                                                'Load transfer messages data failed',
                                                                t
                                                            ),
                                                            t
                                                        );
                                                    }
                                                }
                                                async setLastCloseBannerDownloadPC(e) {
                                                    const t = this.getSecureLocalStorageDB();
                                                    return t
                                                        ? await t.setItemForCurrentUserAsync(_a.b, Sa(e))
                                                        : Promise.reject('Invalid storage');
                                                }
                                                async setListConversationsFirstLoginToDB(e) {
                                                    const t = this.getSecureLocalStorageDB();
                                                    return t
                                                        ? await t.setItemForCurrentUserAsync(_a.c, Sa(e))
                                                        : Promise.reject('Invalid storage');
                                                }
                                                async updateTransferMessagesData(e) {
                                                    const t = {
                                                        lastTransferSuccessTime:
                                                            e.lastTransferSuccessTime || Date.now(),
                                                    };
                                                    try {
                                                        return await this.getSecureLocalStorageDB().setItemForCurrentUserAsync(
                                                            _a.k,
                                                            Sa(t)
                                                        );
                                                    } catch (s) {
                                                        return s;
                                                    }
                                                }
                                                getFriendManagerModule() {
                                                    var e;
                                                    this._friendManager ||
                                                        (this._friendManager =
                                                            null === (e = s('UiPd')) || void 0 === e
                                                                ? void 0
                                                                : e.default);
                                                    return this._friendManager;
                                                }
                                                getGroupManagerModule() {
                                                    var e;
                                                    this._groupManager ||
                                                        (this._groupManager =
                                                            null === (e = s('Gm1y')) || void 0 === e
                                                                ? void 0
                                                                : e.default);
                                                    return this._groupManager;
                                                }
                                                getSecureLocalStorageDB() {
                                                    return u.a.getInstance();
                                                }
                                            })
                                        ) || Oa)
                                ) || Oa)
                        ) || Oa)
                );
                var Da = s('n09q'),
                    La = s('31cx'),
                    Fa = s('a1r1'),
                    Ra = s('BO4k');
                var Aa,
                    Pa = class extends Ea {
                        constructor(e, t) {
                            super(Ma.c.MANAGER),
                                (this._eventMap = new Map()),
                                (this._fistLoginTime = void 0),
                                (this._listConversationsBeforeLogin = []),
                                (this._moduleLoader = void 0),
                                (this._moduleUIManager = void 0),
                                (this._moduleLoader = e),
                                (this._moduleUIManager = t),
                                (this.handleUpdateConfigs = this.handleUpdateConfigs.bind(this)),
                                (this.isDisplayedBannerDownloadPCSuggestion =
                                    this.isDisplayedBannerDownloadPCSuggestion.bind(this)),
                                (this.isDisplayedBubbleInfoEcard = this.isDisplayedBubbleInfoEcard.bind(this)),
                                (this.isDisplayedCloseButtonBannerDownloadPC =
                                    this.isDisplayedCloseButtonBannerDownloadPC.bind(this)),
                                (this.isDisplayedConversationFooter = this.isDisplayedConversationFooter.bind(this)),
                                (this.isDisplayedGlobalSearchFooter = this.isDisplayedGlobalSearchFooter.bind(this)),
                                (this.isDisplayedSearchInConversationFooter =
                                    this.isDisplayedSearchInConversationFooter.bind(this)),
                                (this.isDisplayedMilestoneInPreviewMedia =
                                    this.isDisplayedMilestoneInPreviewMedia.bind(this)),
                                (this.isDisplayedSuggestionInMediaList =
                                    this.isDisplayedSuggestionInMediaList.bind(this)),
                                (this.isDisplayedTransferModal = this.isDisplayedTransferModal.bind(this)),
                                (this.isValidForTransferMessages = this.isValidForTransferMessages.bind(this));
                        }
                        addEventListeners(e, t) {
                            this.eventMap.set(e, [...(this.eventMap.get(e) || []), t]);
                        }
                        callTransferMessages(e) {}
                        closeBannerDownloadPCSuggestion() {}
                        getConversationFooterRendererHeight() {
                            return this.isDisplayedConversationFooter() ? Ma.b.CONVERSATION : 0;
                        }
                        getFirstLoginTime() {
                            return this.firstLoginTime;
                        }
                        getGlobalSearchFooterRendererHeight() {
                            return this.isDisplayedConversationFooter() ? Ma.b.GLOBAL_SEARCH : 0;
                        }
                        getLogger() {
                            return this.Logger;
                        }
                        getUrlDownloadPC() {
                            return '';
                        }
                        hasConversationBeforeFirstLogin(e) {
                            return this._listConversationsBeforeLogin.includes(e);
                        }
                        hideTransferMessagesModal() {}
                        async initialize() {
                            (this.firstLoginTime = d.ModuleContainer.resolve(Fa.a).getFirstLoginTime(this.getUserId())),
                                this.handleUpdateConfigs(Ra.a()),
                                this.registerSubscriptions(),
                                await this.initializeListConversationsBeforeFirstLogin();
                        }
                        isDisplayedBannerDownloadPCSuggestion() {
                            return !!this.isEnabledFeature() && Ra.g();
                        }
                        isDisplayedBubbleInfoEcard(e) {
                            return !!this.isEnabledFeature() && !!Ra.h() && this.hasConversationBeforeFirstLogin(e);
                        }
                        isDisplayedCloseButtonBannerDownloadPC() {
                            return !!this.isEnabledFeature() && Ra.k();
                        }
                        isDisplayedConversationFooter() {
                            return !!this.isEnabledFeature() && Ra.l();
                        }
                        isDisplayedCTADownloadPC() {
                            return !!this.isEnabledFeature() && Ra.i();
                        }
                        isDisplayedCTATransferMessages() {
                            return !!this.isEnabledFeature() && Ra.j();
                        }
                        isDisplayedGlobalSearchFooter() {
                            return !!this.isEnabledFeature() && Ra.m();
                        }
                        isDisplayedSearchInConversationFooter(e) {
                            return !!this.isEnabledFeature() && !!Ra.p() && this.hasConversationBeforeFirstLogin(e);
                        }
                        isDisplayedMilestoneInPreviewMedia(e) {
                            return !!this.isEnabledFeature() && !!Ra.o() && this.hasConversationBeforeFirstLogin(e);
                        }
                        isDisplayedSuggestionInMediaList(e) {
                            return !!this.isEnabledFeature() && !!Ra.n() && this.hasConversationBeforeFirstLogin(e);
                        }
                        isDisplayedTransferModal() {
                            return !!this.isEnabledFeature() && Ra.q();
                        }
                        isEnabledFeature() {
                            return Ra.r();
                        }
                        isValidSupportDownloadPC() {
                            return !1;
                        }
                        isValidForTransferMessages() {
                            return this.isEnabledFeature();
                        }
                        needTransferMessages() {}
                        removeEventListeners(e, t) {
                            const s = this.eventMap.get(e);
                            if (Array.isArray(s)) {
                                const e = s.findIndex((e) => e === t);
                                -1 !== e && s.splice(e, 1);
                            }
                        }
                        setFirstLoginTime(e) {
                            this.firstLoginTime = e;
                        }
                        shouldTransferMessages() {
                            return !1;
                        }
                        showTransferMessagesModal() {}
                        registerSubscriptions() {
                            We.$AppConfig.subscribe(this.handleUpdateConfigs);
                        }
                        isFirstLogin() {
                            return d.ModuleContainer.resolve(Fa.a).isFirstLogin(this.getUserId());
                        }
                        async initializeListConversationsBeforeFirstLogin() {
                            this._listConversationsBeforeLogin = await this.loadListConversationsBeforeFirstLogin();
                        }
                        handleUpdateConfigs(e) {
                            void 0 === e && (e = {});
                            const { data_content: t } = Ra.b(e),
                                { first_time_login_device: s } = e;
                            t && this.UIManager.updateDataContent(Object(La.a)(t)),
                                null != s && (this.firstLoginTime = s);
                        }
                        async loadListConversations() {
                            const e = [],
                                t = await this.loaderModule.loadListFriends();
                            Array.isArray(t) &&
                                t.forEach((t) => {
                                    e.push(t.userId);
                                });
                            const s = await this.loaderModule.loadListGroups();
                            return (
                                Array.isArray(s) &&
                                    s.forEach((t) => {
                                        e.push(t.userId);
                                    }),
                                e
                            );
                        }
                        async loadListConversationsBeforeFirstLogin() {
                            let e;
                            if (this.isFirstLogin())
                                (e = await this.loadListConversations()),
                                    this.loaderModule.setListConversationsFirstLoginToDB(e);
                            else {
                                const t = await this.loaderModule.loadListConversationsFromDB();
                                (e = t),
                                    (t || []).length ||
                                        ((e = await this.loadListConversations()),
                                        this.loaderModule.setListConversationsFirstLoginToDB(e));
                            }
                            return e;
                        }
                        notifyEvent(e) {
                            for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                s[i - 1] = arguments[i];
                            const n = this.eventMap.get(e);
                            Array.isArray(n) && n.forEach((e) => Promise.resolve(() => e(...s)));
                        }
                        get firstLoginTime() {
                            return this._fistLoginTime;
                        }
                        set firstLoginTime(e) {
                            this._fistLoginTime = e;
                        }
                        get eventMap() {
                            return this._eventMap;
                        }
                        get loaderModule() {
                            return this._moduleLoader;
                        }
                        get UIManager() {
                            return this._moduleUIManager;
                        }
                        getUserId() {
                            const e = d.ModuleContainer.resolve(L.a),
                                { userId: t } = e.getSession() || {};
                            return t || '';
                        }
                    },
                    Na = s('mgoj'),
                    ja = s('JCvM');
                Object(d.injectable)()(
                    (Aa =
                        Object(L.d)()(
                            (Aa =
                                Object(d.singleton)(Da.a)(
                                    (Aa =
                                        (function (e, t) {
                                            return Object(d.inject)(Ia)(e, void 0, 0);
                                        })(
                                            (Aa =
                                                (function (e, t) {
                                                    return Object(d.inject)(Na.a)(e, void 0, 1);
                                                })(
                                                    (Aa =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (Aa =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    Object,
                                                                    void 0 === ja.ITransferDataSuggestionUIManager
                                                                        ? Object
                                                                        : ja.ITransferDataSuggestionUIManager,
                                                                ])(
                                                                    (Aa = class extends Pa {
                                                                        constructor(e, t) {
                                                                            super(e, t),
                                                                                (this._lastCloseBannerTimestamp = 0),
                                                                                (this.handleBeforeUnload =
                                                                                    this.handleBeforeUnload.bind(this));
                                                                        }
                                                                        closeBannerDownloadPCSuggestion() {
                                                                            const e = ii.a.getTimeNow();
                                                                            (this.lastCloseBannerTimestamp = e),
                                                                                this.UIManager.closeBannerDownloadPCSuggestion(),
                                                                                this.loaderModule.setLastCloseBannerDownloadPC(
                                                                                    e
                                                                                );
                                                                        }
                                                                        getUrlDownloadPC() {
                                                                            return Object(Ra.f)();
                                                                        }
                                                                        async initialize() {
                                                                            await super.initialize(),
                                                                                await this.loadLastCloseBannerTimestamp();
                                                                        }
                                                                        isDisplayedBannerDownloadPCSuggestion() {
                                                                            if (
                                                                                !super.isDisplayedBannerDownloadPCSuggestion()
                                                                            )
                                                                                return !1;
                                                                            if (!this.isValidSupportDownloadPC())
                                                                                return !1;
                                                                            const e = Object(Ra.e)();
                                                                            return (
                                                                                this.lastCloseBannerTimestamp + e <=
                                                                                ii.a.getTimeNow()
                                                                            );
                                                                        }
                                                                        isValidSupportDownloadPC() {
                                                                            const e = Object(Ca.d)().toLowerCase();
                                                                            return (
                                                                                null !=
                                                                                Object(Ra.d)().find(
                                                                                    (t) => e.indexOf(t) > -1
                                                                                )
                                                                            );
                                                                        }
                                                                        isValidForTransferMessages() {
                                                                            return !1;
                                                                        }
                                                                        onApplicationReady(e) {
                                                                            this.isDisplayedBannerDownloadPCSuggestion() &&
                                                                                Ca.a.logAction(
                                                                                    Ca.a.BannerDownloadPC.DISPLAYED
                                                                                ),
                                                                                this.isEnabledFeature() &&
                                                                                    Ca.a.logAction(
                                                                                        Ca.a.Common
                                                                                            .DISPLAYED_NOT_ENOUGH_DATA_MESSAGE
                                                                                    );
                                                                        }
                                                                        handleBeforeUnload() {
                                                                            this.logActionBeforeUnload();
                                                                        }
                                                                        async loadLastCloseBannerTimestamp() {
                                                                            try {
                                                                                const e =
                                                                                    await this.loaderModule.loadLastCloseBannerDownloadPC();
                                                                                e &&
                                                                                    (this.lastCloseBannerTimestamp = e);
                                                                            } catch (e) {}
                                                                        }
                                                                        logActionBeforeUnload() {
                                                                            const e = Object(Ca.b)();
                                                                            Ca.a.logActionInfo(e, !0);
                                                                        }
                                                                        registerSubscriptions() {
                                                                            super.registerSubscriptions(),
                                                                                d.ModuleContainer.resolve(
                                                                                    L.a
                                                                                ).addEventListenerOnce(
                                                                                    L.b.BeforeUnload,
                                                                                    this.handleBeforeUnload
                                                                                );
                                                                        }
                                                                        get lastCloseBannerTimestamp() {
                                                                            return this._lastCloseBannerTimestamp;
                                                                        }
                                                                        set lastCloseBannerTimestamp(e) {
                                                                            this._lastCloseBannerTimestamp = e;
                                                                        }
                                                                    })
                                                                ) || Aa)
                                                        ) || Aa)
                                                ) || Aa)
                                        ) || Aa)
                                ) || Aa)
                        ) || Aa)
                );
                var Ua,
                    Ba = class extends Ea {
                        constructor() {
                            super(Ma.c.UI),
                                (this.key = ja.c),
                                (this.name = ja.c),
                                (this.dataState = Object(i.a)({}, Ma.f)),
                                (this.UIState = Object(i.a)({}, Ma.g));
                        }
                        closeBannerDownloadPCSuggestion() {}
                        hideTransferMessagesModal() {}
                        init(e) {}
                        initialize() {
                            const { data_content: e } = Object(Ra.b)(Object(Ra.a)());
                            this.handleUpdateContent(e);
                        }
                        getItem(e, t) {
                            return e.key === Ma.e ? this.dataState : e.key === Ma.h ? this.UIState : {};
                        }
                        getList(e, t) {
                            return [];
                        }
                        turnOffDisplayingEntryPoints() {
                            this.handleUpdateRenderer({ isDisplayedEntryPoints: !1 });
                        }
                        onGetItemFailure(e, t) {}
                        onGetListFailure(e, t) {}
                        showTransferMessagesModal() {}
                        updateDataContent(e) {
                            this.handleUpdateContent(e);
                        }
                        setDataState(e) {
                            const t = Object(hr.a)(this.dataState, e);
                            this.dataState !== t && ((this.dataState = t), Object(Pe.g)(this.name, Ma.e));
                        }
                        setUIState(e) {
                            const t = Object(hr.a)(this.UIState, e);
                            this.UIState !== t && ((this.UIState = t), Object(Pe.g)(this.name, Ma.h));
                        }
                        handleUpdateContent(e) {
                            this.setDataState((t) => {
                                (t.version = e.version), (t.content = e.content);
                            });
                        }
                        handleUpdateRenderer(e) {
                            this.setUIState((t) => {
                                for (const s in e) t[s] = e[s];
                            });
                        }
                    };
                Object(pt.b)(ja.b)(
                    (Ua = class extends Ba {
                        closeBannerDownloadPCSuggestion() {
                            this.setUIState((e) => {
                                e[_a.j.BANNER_DOWNLOAD].isDisplayed = !1;
                            });
                        }
                        getItem(e, t) {
                            const s = super.getItem(e, t);
                            if (!s) return;
                            let i = {};
                            if (e.key === _a.f) {
                                const { content: e = {} } = s;
                                for (const t in e) {
                                    const s = e[t];
                                    if (s)
                                        for (const e in s) {
                                            var n;
                                            i[t] || (i[t] = {}),
                                                (i[t][e] = null === (n = s[e]) || void 0 === n ? void 0 : n.web);
                                        }
                                }
                            } else i = s;
                            return i;
                        }
                    })
                );
                var ka = Object(d.define)('forward-message'),
                    Ga = s('oAAg');
                Ga.Pool;
                var xa,
                    za,
                    Va,
                    $a,
                    Wa,
                    Ka = Object(d.define)('forward-message-pool');
                (xa = Object(d.singleton)(ka)),
                    (za = function (e, t) {
                        return Object(d.inject)(Ka)(e, void 0, 0);
                    }),
                    (Va = Reflect.metadata('design:type', Function)),
                    ($a = Reflect.metadata('design:paramtypes', [Object])),
                    Object(d.injectable)(
                        (Wa =
                            xa(
                                (Wa =
                                    za(
                                        (Wa =
                                            Va(
                                                (Wa =
                                                    $a(
                                                        (Wa = class {
                                                            constructor(e) {
                                                                (this._pool = void 0), (this.pool = e);
                                                            }
                                                            forward(e, t) {
                                                                const s = this.buildTask();
                                                                this.pool.use(s);
                                                            }
                                                            buildTask() {
                                                                return async () => {};
                                                            }
                                                            get pool() {
                                                                return this._pool;
                                                            }
                                                            set pool(e) {
                                                                this._pool = e;
                                                            }
                                                        })
                                                    ) || Wa)
                                            ) || Wa)
                                    ) || Wa)
                            ) || Wa)
                    );
                var qa = Object(d.define)('pin-topic-message-loader');
                var Ha = Object(d.define)('pin-topic-storage'),
                    Qa = Ha,
                    Ja = s('UIHX'),
                    Za = s('0URt'),
                    Xa = s('DRpF');
                function Ya(e) {
                    return !(-1 === Object(Za.g)().indexOf(e.msgType)) && !Object(Xa.a)(e);
                }
                var eo = s('3ZdV');
                var to = s('YYsv');
                function so(e, t, s) {
                    return s === e ? 1 : s < t ? 0 : -1;
                }
                function io(e) {
                    const t = { needFetch: !1, reason: '' };
                    if (null == e || null == e || !e.lastFetch) return (t.needFetch = !0), (t.reason = 'empty'), t;
                    const { lastFetch: s } = e,
                        i = (function (e) {
                            return br.a.isOverflowAtTime(e);
                        })(s);
                    if (i) return (t.needFetch = !0), (t.reason = 'overflow'), t;
                    const n = (function (e) {
                        return Date.now() - e > Object(eo.e)();
                    })(s);
                    if (n) return (t.needFetch = !0), (t.reason = 'expired'), t;
                    const r = (function (e) {
                        const t = u.a.getInstance().getItemForCurrentUser(to.g.FORCE_FETCH_MILESTONE);
                        return !(!t || isNaN(+t)) && e < +t;
                    })(s);
                    return r ? ((t.needFetch = !0), (t.reason = 'forcedByServer'), t) : t;
                }
                function no(e) {
                    const t = [];
                    return (
                        e.forEach((e) => {
                            t.push({ topicId: e.id, topicType: e.type });
                        }),
                        t
                    );
                }
                function ro(e) {
                    var t;
                    return (null === (t = e.params) || void 0 === t ? void 0 : t.client_msg_id) || '';
                }
                function ao(e) {
                    var t;
                    return (null === (t = e.params) || void 0 === t ? void 0 : t.global_msg_id) || '';
                }
                function oo(e, t, s) {
                    let i = t;
                    const { topics: n } = s;
                    if (!Array.isArray(n)) return i;
                    switch (e) {
                        case Ja.a.ADD: {
                            const { index: e } = s;
                            i = null == e ? [...n, ...t] : [...t.slice(0, e), ...n, ...t.slice(e)];
                            break;
                        }
                        case Ja.a.REMOVE: {
                            const e = {};
                            n.forEach((t) => {
                                e[t.id] = t.type;
                            }),
                                (i = []),
                                t.forEach((t) => {
                                    (!e.hasOwnProperty(t.id) || (e.hasOwnProperty(t.id) && e[t.id] !== t.type)) &&
                                        i.push(t);
                                });
                            break;
                        }
                    }
                    return i;
                }
                function lo(e) {
                    const t = (e) => {
                            if (!Array.isArray(e)) return e;
                            const t = [];
                            for (let s = 0; s < e.length; s++) {
                                const i = e[s];
                                i &&
                                    (null != i.id && (i.id = i.id.toString()),
                                    null != i.topicId && (i.topicId = i.topicId.toString()),
                                    null != i.type && (i.type = parseInt(i.type)),
                                    null != i.topicType && (i.topicType = parseInt(i.topicType)),
                                    t.push(i));
                            }
                            return t;
                        },
                        s = Object(i.a)({}, e);
                    return (
                        null != s.oldTopic && (s.oldTopic = t([s.oldTopic])[0]),
                        null != s.topic && (s.topic = t([s.topic])[0]),
                        null != s.topics && (s.topics = t(s.topics)),
                        s
                    );
                }
                function co(e) {
                    let t = {};
                    if (!e.params) return e;
                    try {
                        t = JSON.parse(e.params);
                    } catch (s) {
                        return;
                    }
                    if (t.extra && t.extra.constructor === String)
                        try {
                            t.extra = JSON.parse(t.extra);
                        } catch (s) {
                            return;
                        }
                    return (e.params = t), e;
                }
                var ho,
                    uo = function () {
                        const e = {};
                        return {
                            clear: () => {
                                for (const t in e) delete e[t];
                            },
                            get: (t) => e[t],
                            getCache: () => e,
                            set: (t, s) => {
                                e[t] = s;
                            },
                            has: (t) => e.hasOwnProperty(t),
                            remove: (t) => {
                                delete e[t];
                            },
                        };
                    };
                var go =
                    Object(d.injectable)()(
                        (ho =
                            (function (e, t) {
                                return Object(d.inject)(Qa)(e, void 0, 0);
                            })(
                                (ho =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (ho =
                                            Reflect.metadata('design:paramtypes', [Object])(
                                                (ho = class {
                                                    constructor(e) {
                                                        (this.storage = e),
                                                            (this.clientMsgCache = void 0),
                                                            (this.globalMsgCache = void 0),
                                                            (this.globalMsgCache = uo()),
                                                            (this.clientMsgCache = uo());
                                                    }
                                                    clear(e) {
                                                        switch (e) {
                                                            case Ja.g.GLOBAL:
                                                                return void this.globalMsgCache.clear();
                                                            case Ja.g.CLIENT:
                                                                return void this.clientMsgCache.clear();
                                                            default:
                                                                return (
                                                                    this.globalMsgCache.clear(),
                                                                    void this.clientMsgCache.clear()
                                                                );
                                                        }
                                                    }
                                                    loadMessages(e) {
                                                        return new Promise((t, s) => {
                                                            (e && 0 !== e.length) || s('Invalid topics');
                                                            const i = e.length;
                                                            for (let n = 0; n < i; n++) {
                                                                const t = e[n];
                                                                if (!t) continue;
                                                                let i = ao(t);
                                                                if (i && '0' !== i)
                                                                    this.getMessage(Ja.g.GLOBAL, i)
                                                                        .then()
                                                                        .catch((e) => {
                                                                            s(e);
                                                                        });
                                                                else {
                                                                    let e = ro(t);
                                                                    if (e) {
                                                                        let i = t.params && t.params.senderUid;
                                                                        this.getMessage(Ja.g.CLIENT, e, { userId: i })
                                                                            .then()
                                                                            .catch((e) => {
                                                                                s(e);
                                                                            });
                                                                    }
                                                                }
                                                            }
                                                            t();
                                                        });
                                                    }
                                                    getMessageFromTopic(e) {
                                                        if (e.type !== Ja.i.MESSAGE || !e.params) return {};
                                                        let t = ao(e);
                                                        if (this.globalMsgCache && this.globalMsgCache.has(t))
                                                            return this.globalMsgCache.get(t) || {};
                                                        let s = ro(e);
                                                        return (
                                                            (this.clientMsgCache &&
                                                                this.clientMsgCache.has(s) &&
                                                                this.clientMsgCache.get(s)) ||
                                                            {}
                                                        );
                                                    }
                                                    removeMessages(e) {
                                                        Array.isArray(e) &&
                                                            e.forEach((e) => {
                                                                const t = ao(e),
                                                                    s = ro(e);
                                                                this.globalMsgCache.remove(t),
                                                                    this.clientMsgCache.remove(s);
                                                            });
                                                    }
                                                    getMessage(e, t, s) {
                                                        void 0 === s && (s = {});
                                                        return new Promise((i, n) => {
                                                            switch (e) {
                                                                case Ja.g.GLOBAL: {
                                                                    let s = this.globalMsgCache.get(t);
                                                                    s
                                                                        ? i(s)
                                                                        : this.storage
                                                                              .getMessagesByIds([t])
                                                                              .then((s) => {
                                                                                  s
                                                                                      ? (this.setMessage(e, t, s), i(s))
                                                                                      : n('Not found');
                                                                              })
                                                                              .catch((e) => {
                                                                                  n(e);
                                                                              });
                                                                    break;
                                                                }
                                                                case Ja.g.CLIENT: {
                                                                    const { userId: r } = s;
                                                                    let a = this.clientMsgCache.get(t);
                                                                    a
                                                                        ? i(a)
                                                                        : this.storage
                                                                              .getMessageByCliMsgId(t, {
                                                                                  myUID: rt.default.getUidMe(),
                                                                                  userId: r,
                                                                              })
                                                                              .then((s) => {
                                                                                  s
                                                                                      ? (this.setMessage(e, t, s), i(s))
                                                                                      : n('Not found');
                                                                              })
                                                                              .catch((e) => {
                                                                                  n(e);
                                                                              });
                                                                    break;
                                                                }
                                                                default:
                                                                    n('Unknown');
                                                            }
                                                        });
                                                    }
                                                    setMessage(e, t, s) {
                                                        switch (e) {
                                                            case Ja.g.GLOBAL:
                                                                return void this.globalMsgCache.set(t, s);
                                                            case Ja.g.CLIENT:
                                                                return void this.clientMsgCache.set(t, s);
                                                            default:
                                                                return;
                                                        }
                                                    }
                                                })
                                            ) || ho)
                                    ) || ho)
                            ) || ho)
                    ) || ho;
                d.ModuleContainer.register(qa, go);
                var mo = Object(d.define)('pin-topic-data-repository'),
                    po = s('ZsEe');
                var fo = function () {
                    const e = {},
                        t = (t) => e[t] || null;
                    return {
                        clear: () => {
                            for (const t in e) delete e[t];
                        },
                        get: t,
                        getAll: () => e,
                        getLastFetch: (e) => {
                            var s;
                            return (null === (s = t(e)) || void 0 === s ? void 0 : s.lastFetch) || 0;
                        },
                        getLastModified: (e) => {
                            var s;
                            return (null === (s = t(e)) || void 0 === s ? void 0 : s.lastModified) || 0;
                        },
                        getTopics: (e) => {
                            var s;
                            return (null === (s = t(e)) || void 0 === s ? void 0 : s.topics) || [];
                        },
                        getVersion: (e) => {
                            var s;
                            return (null === (s = t(e)) || void 0 === s ? void 0 : s.version) || 0;
                        },
                        has: (t) => !!e[t],
                        remove: (t) => {
                            delete e[t];
                        },
                        set: (t, s) => {
                            e[t] = s;
                        },
                    };
                };
                var vo = function (e) {
                    const t = [];
                    let s = !1;
                    const i = e || (() => {}),
                        n = () => t.length,
                        r = (e) => {
                            s = e;
                        },
                        a = () => {
                            if (s) return;
                            if (!n()) return void i();
                            const e = t.shift();
                            e &&
                                (r(!0),
                                e()
                                    .then(() => {
                                        r(!1), a();
                                    })
                                    .catch(() => {
                                        r(!1), a();
                                    }));
                        };
                    return {
                        enqueue: (e) => {
                            t.push(e), a();
                        },
                        dequeue: a,
                        getLength: n,
                    };
                };
                var bo = function () {
                        const e = [];
                        let t;
                        const s = () => e.length,
                            i = (n, r) => {
                                if ((r && (t = r), !s())) return t && t(n);
                                const a = e.shift();
                                a &&
                                    ((e, t) => {
                                        const { callback: s } = e;
                                        let n;
                                        'function' == typeof s && (n = s(e.data, t)), i(n);
                                    })(a, n);
                            };
                        return {
                            enqueue: (t) => {
                                e.push(t);
                            },
                            dequeue: i,
                            getLength: s,
                        };
                    },
                    yo = s('u+F0');
                var Io = Object(d.define)('pin-topic-request-handler');
                function _o(e) {
                    return new Promise((t) => {
                        let s = 0,
                            i = 0,
                            n = {};
                        for (let r in e)
                            s++,
                                e[r]
                                    .then((e) => {
                                        (n[r] = e), i++, i === s && t(n);
                                    })
                                    .catch(() => {
                                        (n[r] = null), i++, i === s && t(n);
                                    });
                        0 === s && t({});
                    });
                }
                function Mo(e, t) {
                    return Object(ya.f)(e, Number.isInteger(+t) ? t : 1 / 0);
                }
                var Co,
                    To = class {
                        constructor(e, t) {
                            (this.moduleName = e), (this.instanceNames = t), (this.instanceMap = new Map());
                        }
                        error(e) {
                            const t = this.getLogger(e);
                            if (void 0 !== t) {
                                for (var s = arguments.length, i = new Array(s > 1 ? s - 1 : 0), n = 1; n < s; n++)
                                    i[n - 1] = arguments[n];
                                t.zsymb(18, 9938, 3e4, ...i);
                            }
                        }
                        info(e) {
                            const t = this.getLogger(e);
                            if (void 0 !== t) {
                                for (var s = arguments.length, i = new Array(s > 1 ? s - 1 : 0), n = 1; n < s; n++)
                                    i[n - 1] = arguments[n];
                                t.zsymb(0, 9938, 30001, ...i);
                            }
                        }
                        getLogger(e) {
                            if (this.instanceNames.includes(e) && void 0 === this.instanceMap.get(e)) {
                                const t = this.LoggerFactory.createZLogger(kt.b.pinTopic, [this.moduleName, e]);
                                this.instanceMap.set(e, t);
                            }
                            return this.instanceMap.get(e);
                        }
                        get LoggerFactory() {
                            return d.ModuleContainer.resolve(N.ZLoggerFactory);
                        }
                    },
                    Oo = To;
                !(function (e) {
                    (e.CONTROL = 'control'),
                        (e.CREATE = 'create'),
                        (e.FETCH = 'fetch'),
                        (e.LOAD = 'load'),
                        (e.REORDER = 'reorder'),
                        (e.UNPIN = 'unpin');
                })(Co || (Co = {}));
                var Eo,
                    So = class extends Oo {
                        constructor() {
                            super(Ja.f.DataRepository, [
                                Co.CONTROL,
                                Co.CREATE,
                                Co.FETCH,
                                Co.LOAD,
                                Co.REORDER,
                                Co.UNPIN,
                            ]);
                        }
                        infoControl() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.CONTROL, ...t);
                        }
                        infoCreate() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.CREATE, ...t);
                        }
                        infoFetch() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.FETCH, ...t);
                        }
                        infoLoad() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.LOAD, ...t);
                        }
                        infoReorder() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.REORDER, ...t);
                        }
                        infoUnpin() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Co.UNPIN, ...t);
                        }
                        errorControl() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.CONTROL, ...t);
                        }
                        errorCreate() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.CREATE, ...t);
                        }
                        errorFetch() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.FETCH, ...t);
                        }
                        errorLoad() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.LOAD, ...t);
                        }
                        errorReorder() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.REORDER, ...t);
                        }
                        errorUnpin() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Co.UNPIN, ...t);
                        }
                        logInfo(e) {
                            if (this.isEnableLog()) {
                                for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                    s[i - 1] = arguments[i];
                                super.info(e, ...s);
                            }
                        }
                        logError(e) {
                            if (this.isEnableLog()) {
                                for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                    s[i - 1] = arguments[i];
                                super.error(e, ...s);
                            }
                        }
                        isEnableLog() {
                            return Object(eo.h)();
                        }
                    };
                var wo =
                    Object(d.injectable)()(
                        (Eo =
                            (function (e, t) {
                                return Object(d.inject)(Qa)(e, void 0, 0);
                            })(
                                (Eo =
                                    (function (e, t) {
                                        return Object(d.inject)(Io)(e, void 0, 1);
                                    })(
                                        (Eo =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (Eo =
                                                    Reflect.metadata('design:paramtypes', [Object, Object])(
                                                        (Eo = class {
                                                            constructor(e, t) {
                                                                (this.storage = e),
                                                                    (this.fetcher = t),
                                                                    (this.cache = void 0),
                                                                    (this.eventQueue = void 0),
                                                                    (this.logger = void 0),
                                                                    (this.pendingWhenLoadQueue = void 0),
                                                                    (this.requestID = void 0),
                                                                    (this.cache = fo()),
                                                                    (this.eventQueue = {}),
                                                                    (this.pendingWhenLoadQueue = {}),
                                                                    (this.logger = new So()),
                                                                    (this.requestID = new po.a());
                                                            }
                                                            clear() {
                                                                this.cache.clear();
                                                                for (const e in this.pendingWhenLoadQueue)
                                                                    delete this.pendingWhenLoadQueue[e];
                                                                for (const e in this.eventQueue)
                                                                    delete this.eventQueue[e];
                                                            }
                                                            clearPinTopicsForConversation(e, t) {
                                                                void 0 === t && (t = !1),
                                                                    this.cache.remove(e),
                                                                    delete this.pendingWhenLoadQueue[e],
                                                                    delete this.eventQueue[e],
                                                                    this.Storage.clearTopics(e, t);
                                                            }
                                                            createPinTopic(e, t, s) {
                                                                void 0 === s && (s = {});
                                                                return new Promise((n, r) => {
                                                                    const a = this.getRequestID();
                                                                    this.Logger.infoCreate(a, `call cId:${e}`),
                                                                        this.loadDataFromCacheOrDB(e).then((o) => {
                                                                            const { checkEnableToCreate: d } = s || {};
                                                                            let l = null;
                                                                            if (d) {
                                                                                const { enable: s, oldTopic: i } = d(
                                                                                    e,
                                                                                    t,
                                                                                    o
                                                                                );
                                                                                if (!s)
                                                                                    return (
                                                                                        this.Logger.infoCreate(
                                                                                            a,
                                                                                            `cId:${e} react limit`
                                                                                        ),
                                                                                        r({
                                                                                            code: yo.a
                                                                                                .PINBOARD_OVER_MAXIMUM,
                                                                                            message: '',
                                                                                            data: { cache: o },
                                                                                        })
                                                                                    );
                                                                                i && (l = i);
                                                                            }
                                                                            const { version: c } = o;
                                                                            this.Logger.infoCreate(a, `cId:${e}`, c),
                                                                                this.Fetcher.createTopic(e, t, c)
                                                                                    .then((t) => {
                                                                                        this.Logger.infoCreate(
                                                                                            a,
                                                                                            `cId:${e}, create topic success`
                                                                                        );
                                                                                        let s = t.response.data;
                                                                                        (s.oldVersion = c),
                                                                                            l &&
                                                                                                (s.oldTopic = {
                                                                                                    topicId: l.id,
                                                                                                    topicType: l.type,
                                                                                                }),
                                                                                            (s = lo(s)),
                                                                                            this.enqueueEvent(
                                                                                                e,
                                                                                                this.addTopic.bind(
                                                                                                    this,
                                                                                                    e,
                                                                                                    s,
                                                                                                    (e) => n(e)
                                                                                                )
                                                                                            );
                                                                                    })
                                                                                    .catch((t) => {
                                                                                        const s = t.error;
                                                                                        (s.data = Object(i.a)(
                                                                                            Object(i.a)(
                                                                                                {},
                                                                                                null == s
                                                                                                    ? void 0
                                                                                                    : s.data
                                                                                            ),
                                                                                            {},
                                                                                            { cache: o }
                                                                                        )),
                                                                                            this.Logger.errorCreate(
                                                                                                a,
                                                                                                `cId:${e}, create topic fail`,
                                                                                                Mo(t, Object(eo.b)())
                                                                                            ),
                                                                                            r(s);
                                                                                    });
                                                                        });
                                                                });
                                                            }
                                                            getEntryPointPromotionalTooltipShowedStatus() {
                                                                return this.Storage.getEntryPointPromotionalTooltipShowedStatus();
                                                            }
                                                            handleReceivingEvent(e, t) {
                                                                return new Promise((s, i) => {
                                                                    if (
                                                                        (this.Logger.infoControl(
                                                                            `call ${e}`,
                                                                            Mo(t, Object(eo.b)())
                                                                        ),
                                                                        e === Ja.c.FORCE_SYNC)
                                                                    ) {
                                                                        const { conversationIds: e } = t;
                                                                        if (!Array.isArray(e))
                                                                            return i(
                                                                                'Invalid conversationIds for force all'
                                                                            );
                                                                        if (0 === e.length)
                                                                            this.Storage.setForcedFetchMilestone(
                                                                                Date.now()
                                                                            );
                                                                        else
                                                                            for (let t = 0; t < e.length; t++) {
                                                                                var n;
                                                                                const r =
                                                                                    null === (n = e[t]) || void 0 === n
                                                                                        ? void 0
                                                                                        : n.toString();
                                                                                r &&
                                                                                    (this.clearPinTopicsForConversation(
                                                                                        r
                                                                                    ),
                                                                                    this.fetchTopics(r)
                                                                                        .then((e) => {
                                                                                            s(e);
                                                                                        })
                                                                                        .catch(i));
                                                                            }
                                                                    } else {
                                                                        const { conversationId: n } = t;
                                                                        this.loadDataFromCacheOrDB(n).then((n) => {
                                                                            this.processEventControl(e, t, n, s, i);
                                                                        });
                                                                    }
                                                                });
                                                            }
                                                            loadPinTopics(e, t) {
                                                                return new Promise((s, i) => {
                                                                    e ||
                                                                        i({
                                                                            status: Ja.h.ERROR,
                                                                            error: {
                                                                                code: yo.a.INVALID_PARAMETERS,
                                                                                message: 'ConversationId not valid',
                                                                            },
                                                                        });
                                                                    const n = this.getRequestID();
                                                                    if (
                                                                        (this.Logger.infoLoad(n, `call cId:${e}`),
                                                                        t && t !== Ja.d.NONE)
                                                                    )
                                                                        return (
                                                                            this.Logger.infoLoad(
                                                                                n,
                                                                                `force fetch cId:${e}`,
                                                                                t
                                                                            ),
                                                                            this.fetchTopics(e).then((e) => {
                                                                                s(e);
                                                                            })
                                                                        );
                                                                    this.loadDataFromCacheOrDB(e).then((r) => {
                                                                        if (
                                                                            (this.Logger.infoLoad(n, `cId:${e}`),
                                                                            t === Ja.d.NONE)
                                                                        )
                                                                            return s(r);
                                                                        this.doCheckAndFetchData(r)
                                                                            .then((e) => {
                                                                                s(e);
                                                                            })
                                                                            .catch(i);
                                                                    });
                                                                });
                                                            }
                                                            reorderPinTopics(e, t) {
                                                                return new Promise((s, i) => {
                                                                    const n = this.getRequestID();
                                                                    this.Logger.infoReorder(n, `call cId:${e}`),
                                                                        this.loadDataFromCacheOrDB(e).then((r) => {
                                                                            const { version: a } = r,
                                                                                o = no(t);
                                                                            this.Logger.infoReorder(n, `cId:${e}`, a),
                                                                                this.Fetcher.reorderTopics(e, o, a)
                                                                                    .then((i) => {
                                                                                        this.Logger.infoReorder(
                                                                                            n,
                                                                                            `cId:${e}, reorder topic success`
                                                                                        );
                                                                                        let r = i.response.data;
                                                                                        (r.oldVersion = a),
                                                                                            (r.topics = t),
                                                                                            (r = lo(r)),
                                                                                            this.enqueueEvent(
                                                                                                e,
                                                                                                this.setTopics.bind(
                                                                                                    this,
                                                                                                    e,
                                                                                                    r,
                                                                                                    (e) => s(e)
                                                                                                )
                                                                                            );
                                                                                    })
                                                                                    .catch((t) => {
                                                                                        this.Logger.errorReorder(
                                                                                            n,
                                                                                            `cId:${e}, reorder topic fail`,
                                                                                            Mo(t, Object(eo.b)())
                                                                                        ),
                                                                                            i(t.error);
                                                                                    });
                                                                        });
                                                                });
                                                            }
                                                            setEntryPointPromotionalTooltipShowedStatus(e) {
                                                                this.Storage.setEntryPointPromotionalTooltipShowedStatus(
                                                                    e
                                                                );
                                                            }
                                                            unpinTopics(e, t) {
                                                                return new Promise((s, i) => {
                                                                    const n = this.getRequestID();
                                                                    this.Logger.infoUnpin(n, `call cId:${e}`),
                                                                        this.loadDataFromCacheOrDB(e).then((r) => {
                                                                            const { version: a } = r,
                                                                                o = no(t);
                                                                            this.Logger.infoUnpin(n, `cId:${e}`, a),
                                                                                this.Fetcher.unpinTopics(e, o, a)
                                                                                    .then((i) => {
                                                                                        this.Logger.infoUnpin(
                                                                                            n,
                                                                                            `cId:${e} unpin topic success`
                                                                                        );
                                                                                        let r = i.response.data;
                                                                                        (r.oldVersion = a),
                                                                                            (r.topics = t),
                                                                                            (r = lo(r)),
                                                                                            this.enqueueEvent(
                                                                                                e,
                                                                                                this.removeTopics.bind(
                                                                                                    this,
                                                                                                    e,
                                                                                                    r,
                                                                                                    (e) => s(e)
                                                                                                )
                                                                                            );
                                                                                    })
                                                                                    .catch((t) => {
                                                                                        this.Logger.errorUnpin(
                                                                                            n,
                                                                                            `cId:${e}, unpin topic fail`,
                                                                                            Mo(t, Object(eo.b)())
                                                                                        ),
                                                                                            i(t.error);
                                                                                    });
                                                                        });
                                                                });
                                                            }
                                                            setPendingQueue(e, t) {
                                                                t && !this.pendingWhenLoadQueue[e]
                                                                    ? (this.pendingWhenLoadQueue[e] = bo())
                                                                    : delete this.pendingWhenLoadQueue[e];
                                                            }
                                                            isInPending(e) {
                                                                return !!this.pendingWhenLoadQueue[e];
                                                            }
                                                            openPendingQueue(e) {
                                                                this.setPendingQueue(e, !0);
                                                            }
                                                            closePendingQueue(e) {
                                                                this.setPendingQueue(e, !1);
                                                            }
                                                            enqueuePending(e, t) {
                                                                this.pendingWhenLoadQueue[e] &&
                                                                    this.pendingWhenLoadQueue[e].enqueue(t);
                                                            }
                                                            loadTopicsFromDB(e) {
                                                                this.openPendingQueue(e);
                                                                return new Promise((t) => {
                                                                    const s = this.getRequestID();
                                                                    this.Logger.infoLoad(s, `DB call cId:${e}`),
                                                                        this.Storage.loadTopics(e)
                                                                            .then((i) => {
                                                                                const n = this.handleLoadDBFinish(e, i);
                                                                                this.Logger.infoLoad(
                                                                                    s,
                                                                                    `DB cId:${e} success`
                                                                                ),
                                                                                    t({
                                                                                        status: Ja.h.SUCCESS,
                                                                                        response: { data: n },
                                                                                    });
                                                                            })
                                                                            .catch((i) => {
                                                                                const n = this.handleLoadDBFinish(
                                                                                    e,
                                                                                    null
                                                                                );
                                                                                this.Logger.errorLoad(
                                                                                    s,
                                                                                    `DB cId:${e} fail`,
                                                                                    Mo(
                                                                                        null == i ? void 0 : i.error,
                                                                                        Object(eo.b)()
                                                                                    )
                                                                                ),
                                                                                    t({
                                                                                        status: Ja.h.ERROR,
                                                                                        response: { data: n },
                                                                                    });
                                                                            });
                                                                });
                                                            }
                                                            getRequestID() {
                                                                return this.requestID.next();
                                                            }
                                                            handleLoadDBFinish(e, t) {
                                                                var s;
                                                                let i;
                                                                var n;
                                                                t &&
                                                                    (i = {
                                                                        conversationId: (n = t).conversationId,
                                                                        topics: n.topics,
                                                                        version: n.boardVersion,
                                                                        lastFetch: n.lastFetch,
                                                                        lastModified: Date.now(),
                                                                    }),
                                                                    (t &&
                                                                        (null === (s = i) || void 0 === s
                                                                            ? void 0
                                                                            : s.conversationId) === e) ||
                                                                        (i = (function (e) {
                                                                            return {
                                                                                conversationId: e,
                                                                                topics: [],
                                                                                version: 0,
                                                                                lastFetch: 0,
                                                                                lastModified: 0,
                                                                            };
                                                                        })(e));
                                                                let r = i;
                                                                if (!io(r).needFetch && this.isInPending(e)) {
                                                                    const t = (e) => {
                                                                        e && (r = e);
                                                                    };
                                                                    this.pendingWhenLoadQueue[e].dequeue(i, t);
                                                                }
                                                                return this.closePendingQueue(e), r;
                                                            }
                                                            fetchTopics(e, t) {
                                                                void 0 === t && (t = 0), this.openPendingQueue(e);
                                                                return new Promise((s, i) => {
                                                                    const n = this.getRequestID();
                                                                    this.Logger.infoFetch(n, `call cId:${e}`, t),
                                                                        this.Fetcher.fetchTopics(e, t)
                                                                            .then((t) => {
                                                                                this.Logger.infoFetch(
                                                                                    n,
                                                                                    `cId:${e} success`
                                                                                ),
                                                                                    this.closePendingQueue(e);
                                                                                const { response: i } = t,
                                                                                    r = i.data.topics;
                                                                                for (let e = 0; e < r.length; e++)
                                                                                    r[e] = co(r[e]);
                                                                                this.loadExtraDataForTopics(r).then(
                                                                                    (t) => {
                                                                                        const n = {
                                                                                            conversationId: e,
                                                                                            topics: t,
                                                                                            version: i.data.version,
                                                                                            lastFetch: Date.now(),
                                                                                            lastModified: Date.now(),
                                                                                        };
                                                                                        this.setToCache(e, n),
                                                                                            this.setTopicsToDB(n),
                                                                                            s(n);
                                                                                    }
                                                                                );
                                                                            })
                                                                            .catch((t) => {
                                                                                this.Logger.errorFetch(
                                                                                    n,
                                                                                    `cId:${e} fail`,
                                                                                    Mo(t, Object(eo.b)())
                                                                                ),
                                                                                    this.closePendingQueue(e);
                                                                            });
                                                                });
                                                            }
                                                            doCheckAndFetchData(e) {
                                                                return new Promise((t, s) => {
                                                                    const i = io(e);
                                                                    if (
                                                                        (this.Logger.infoFetch(
                                                                            `cId:${e.conversationId} needFetch:${i.needFetch} reason:${i.reason}`
                                                                        ),
                                                                        !i.needFetch)
                                                                    )
                                                                        return t(e);
                                                                    this.fetchTopics(e.conversationId)
                                                                        .then((s) => {
                                                                            t(s || e);
                                                                        })
                                                                        .catch(s);
                                                                });
                                                            }
                                                            getDataInPendingQueueAfterMutation(e, t) {
                                                                if (e.conversationId !== t.conversationId) return t;
                                                                if (e.oldVersion != t.version) return t;
                                                                return {
                                                                    topics: oo(e.type, t.topics, {
                                                                        index: e.index,
                                                                        topics: e.topics,
                                                                    }),
                                                                    version: e.version,
                                                                    conversationId: e.conversationId,
                                                                    lastModified: Date.now(),
                                                                    lastFetch: t.lastFetch,
                                                                };
                                                            }
                                                            setToCache(e, t) {
                                                                return (
                                                                    null == t.lastModified &&
                                                                        (t.lastModified = Date.now()),
                                                                    this.cache.set(e, t),
                                                                    t
                                                                );
                                                            }
                                                            addToCache(e, t, s) {
                                                                void 0 === s && (s = 0);
                                                                const i = this.getCache(e),
                                                                    { topic: n, version: r } = t;
                                                                let a = Date.now(),
                                                                    o = [];
                                                                i
                                                                    ? ((o = oo(Ja.a.ADD, i.topics, {
                                                                          topics: [n],
                                                                          index: s,
                                                                      })),
                                                                      (a = i.lastFetch))
                                                                    : o.push(n),
                                                                    t.lastFetch && (a = t.lastFetch);
                                                                const d = {
                                                                    conversationId: e,
                                                                    topics: o,
                                                                    version: r,
                                                                    lastModified: Date.now(),
                                                                    lastFetch: a,
                                                                };
                                                                return this.setToCache(e, d);
                                                            }
                                                            removeInCache(e, t, s) {
                                                                if ((void 0 === s && (s = 0), !this.cache.has(e)))
                                                                    return null;
                                                                const i = this.getCache(e),
                                                                    { topics: n } = i;
                                                                if (t.topic)
                                                                    for (let a = 0; a < n.length; a++) {
                                                                        const e = n[a];
                                                                        if (
                                                                            e.id === t.topic.id &&
                                                                            e.type === t.topic.type
                                                                        ) {
                                                                            n.splice(a, 1);
                                                                            break;
                                                                        }
                                                                    }
                                                                else n.splice(s, 1);
                                                                const r = {
                                                                    conversationId: e,
                                                                    topics: n,
                                                                    version: t.version,
                                                                    lastModified: Date.now(),
                                                                    lastFetch: i.lastFetch,
                                                                };
                                                                return this.setToCache(e, r);
                                                            }
                                                            enqueueEvent(e, t) {
                                                                if (!this.eventQueue[e]) {
                                                                    const t = () => {
                                                                        delete this.eventQueue[e];
                                                                    };
                                                                    this.eventQueue[e] = vo(t);
                                                                }
                                                                this.eventQueue[e].enqueue(t);
                                                            }
                                                            addTopic(e, t, s) {
                                                                return new Promise((i, n) => {
                                                                    if (this.isInPending(e)) {
                                                                        const s = {
                                                                            data: {
                                                                                type: Ja.a.ADD,
                                                                                conversationId: e,
                                                                                oldTopic: t.oldTopic,
                                                                                topics: [t.topic],
                                                                                version: t.version,
                                                                                oldVersion: t.oldVersion,
                                                                                index: t.index,
                                                                            },
                                                                            callback:
                                                                                this.getDataInPendingQueueAfterMutation,
                                                                        };
                                                                        return this.enqueuePending(e, s), i();
                                                                    }
                                                                    const r = (n) => {
                                                                        const { oldVersion: r, version: a } = t,
                                                                            o = so(r, a, n.version);
                                                                        if (
                                                                            (this.Logger.infoCreate(
                                                                                `add call cId:${e} actCode:${o}`,
                                                                                r,
                                                                                a,
                                                                                n.version
                                                                            ),
                                                                            1 === o)
                                                                        ) {
                                                                            const {
                                                                                oldTopic: n,
                                                                                index: r,
                                                                                topic: o,
                                                                            } = t;
                                                                            n &&
                                                                                n.topicId &&
                                                                                this.removeInCache(e, {
                                                                                    topic: {
                                                                                        id: n.topicId,
                                                                                        type: n.topicType,
                                                                                    },
                                                                                    version: a,
                                                                                }),
                                                                                co(o),
                                                                                this.loadExtraDataForTopics([o])
                                                                                    .then((n) => {
                                                                                        const a = {
                                                                                                topic: n[0],
                                                                                                version: t.version,
                                                                                            },
                                                                                            o = this.addToCache(
                                                                                                e,
                                                                                                a,
                                                                                                r
                                                                                            );
                                                                                        this.setTopicsToDB(o),
                                                                                            i(),
                                                                                            s && s(this.getCache(e));
                                                                                    })
                                                                                    .catch(() => {
                                                                                        i();
                                                                                    });
                                                                        } else
                                                                            0 === o
                                                                                ? this.fetchTopics(e)
                                                                                      .then((e) => {
                                                                                          s && s(e), i();
                                                                                      })
                                                                                      .catch(() => {
                                                                                          s && s(this.getCache(e)), i();
                                                                                      })
                                                                                : i();
                                                                    };
                                                                    this.loadDataFromCacheOrDB(e).then((e) => {
                                                                        r(e);
                                                                    });
                                                                });
                                                            }
                                                            removeTopics(e, t, s) {
                                                                return new Promise((i) => {
                                                                    if (this.isInPending(e)) {
                                                                        const s = {
                                                                            data: {
                                                                                type: Ja.a.REMOVE,
                                                                                conversationId: e,
                                                                                topics: t.topics,
                                                                                version: t.version,
                                                                                oldVersion: t.oldVersion,
                                                                            },
                                                                            callback:
                                                                                this.getDataInPendingQueueAfterMutation,
                                                                        };
                                                                        return this.enqueuePending(e, s), i();
                                                                    }
                                                                    const n = (n) => {
                                                                        const { oldVersion: r, version: a } = t,
                                                                            o = so(r, a, n.version);
                                                                        if (
                                                                            (this.Logger.infoUnpin(
                                                                                `remove call cId:${e} actCode:${o}`,
                                                                                r,
                                                                                a,
                                                                                n.version
                                                                            ),
                                                                            1 === o)
                                                                        ) {
                                                                            const { topics: r } = t;
                                                                            let o = n;
                                                                            for (let t = 0; t < r.length; t++)
                                                                                o = this.removeInCache(e, {
                                                                                    topic: r[t],
                                                                                    version: a,
                                                                                });
                                                                            return (
                                                                                this.setTopicsToDB(o),
                                                                                s && s(this.getCache(e)),
                                                                                i()
                                                                            );
                                                                        }
                                                                        0 === o
                                                                            ? this.fetchTopics(e)
                                                                                  .then((e) => {
                                                                                      s && s(e), i();
                                                                                  })
                                                                                  .catch(() => {
                                                                                      s && s(this.getCache(e)), i();
                                                                                  })
                                                                            : i();
                                                                    };
                                                                    this.loadDataFromCacheOrDB(e).then((e) => {
                                                                        n(e);
                                                                    });
                                                                });
                                                            }
                                                            setTopics(e, t, s) {
                                                                return new Promise((i) => {
                                                                    if (this.isInPending(e)) {
                                                                        const s = {
                                                                            data: {
                                                                                type: Ja.a.REORDER,
                                                                                conversationId: e,
                                                                                topics: t.topics,
                                                                                version: t.version,
                                                                                oldVersion: t.oldVersion,
                                                                            },
                                                                            callback:
                                                                                this.getDataInPendingQueueAfterMutation,
                                                                        };
                                                                        return this.enqueuePending(e, s), i();
                                                                    }
                                                                    const n = (n) => {
                                                                        const { oldVersion: r, version: a } = t,
                                                                            o = so(r, a, n.version);
                                                                        if (
                                                                            (this.Logger.infoReorder(
                                                                                `set call cId:${e} actCode:${o}`,
                                                                                r,
                                                                                a,
                                                                                n.version
                                                                            ),
                                                                            1 === o)
                                                                        ) {
                                                                            const r = n.topics,
                                                                                a = [];
                                                                            for (let e = 0; e < t.topics.length; e++) {
                                                                                const s = t.topics[e],
                                                                                    i = r.find(
                                                                                        (e) =>
                                                                                            e.id === s.id &&
                                                                                            e.type === s.type
                                                                                    );
                                                                                i && a.push(i);
                                                                            }
                                                                            const o = {
                                                                                conversationId: e,
                                                                                topics: a,
                                                                                version: t.version,
                                                                                lastModified: Date.now(),
                                                                                lastFetch:
                                                                                    (null == n
                                                                                        ? void 0
                                                                                        : n.lastFetch) || 0,
                                                                            };
                                                                            return (
                                                                                this.setToCache(e, o),
                                                                                this.setTopicsToDB(o),
                                                                                s && s(this.getCache(e)),
                                                                                i()
                                                                            );
                                                                        }
                                                                        0 === o
                                                                            ? this.fetchTopics(e)
                                                                                  .then((e) => {
                                                                                      s && s(e), i();
                                                                                  })
                                                                                  .catch(() => {
                                                                                      s && s(this.getCache(e)), i();
                                                                                  })
                                                                            : i();
                                                                    };
                                                                    this.loadDataFromCacheOrDB(e).then((e) => {
                                                                        n(e);
                                                                    });
                                                                });
                                                            }
                                                            loadDataFromCacheOrDB(e) {
                                                                return new Promise((t) => {
                                                                    const s = this.getCache(e);
                                                                    s
                                                                        ? t(s)
                                                                        : this.loadTopicsFromDB(e).then((s) => {
                                                                              const i = s.response.data;
                                                                              this.setToCache(e, i), t(i);
                                                                          });
                                                                });
                                                            }
                                                            setTopicsToDB(e) {
                                                                return new Promise((t, s) => {
                                                                    const i = {
                                                                        conversationId: e.conversationId,
                                                                        boardVersion: e.version,
                                                                        topics: e.topics,
                                                                        lastFetch: e.lastFetch,
                                                                    };
                                                                    this.Storage.setTopics(i).then(t).catch(s);
                                                                });
                                                            }
                                                            processEventControl(e, t, s, n, r) {
                                                                const { conversationId: a } = t;
                                                                let o = {
                                                                    oldVersion: t.oldVersion,
                                                                    version: t.version,
                                                                };
                                                                const d = lo(t);
                                                                switch (e) {
                                                                    case Ja.c.CREATE:
                                                                        (o = Object(i.a)(
                                                                            Object(i.a)({}, o),
                                                                            {},
                                                                            {
                                                                                oldTopic: d.oldTopic,
                                                                                topic: d.topic,
                                                                                index: 0,
                                                                            }
                                                                        )),
                                                                            this.enqueueEvent(
                                                                                a,
                                                                                this.addTopic.bind(this, a, o, (e) =>
                                                                                    n(e)
                                                                                )
                                                                            );
                                                                        break;
                                                                    case Ja.c.UNPIN: {
                                                                        const e = d.topic,
                                                                            t = [];
                                                                        e &&
                                                                            null != e.topicId &&
                                                                            null != e.topicType &&
                                                                            t.push({
                                                                                id: e.topicId,
                                                                                type: e.topicType,
                                                                            }),
                                                                            (o = Object(i.a)(
                                                                                Object(i.a)({}, o),
                                                                                {},
                                                                                { topics: t }
                                                                            )),
                                                                            this.enqueueEvent(
                                                                                a,
                                                                                this.removeTopics.bind(
                                                                                    this,
                                                                                    a,
                                                                                    o,
                                                                                    (e) => n(e)
                                                                                )
                                                                            );
                                                                        break;
                                                                    }
                                                                    case Ja.c.REORDER: {
                                                                        var l;
                                                                        const e = [],
                                                                            t =
                                                                                (null === (l = d.topics) || void 0 === l
                                                                                    ? void 0
                                                                                    : l.length) || 0;
                                                                        for (let i = 0; i < t; i++) {
                                                                            var c;
                                                                            const t =
                                                                                null === (c = d.topics) || void 0 === c
                                                                                    ? void 0
                                                                                    : c[i];
                                                                            if (
                                                                                t &&
                                                                                null != t.topicId &&
                                                                                null != t.topicType
                                                                            ) {
                                                                                const i = s.topics.find(
                                                                                    (e) =>
                                                                                        e.id === t.topicId &&
                                                                                        e.type === t.topicType
                                                                                );
                                                                                i && e.push(i);
                                                                            }
                                                                        }
                                                                        (o = Object(i.a)(
                                                                            Object(i.a)({}, o),
                                                                            {},
                                                                            { topics: e }
                                                                        )),
                                                                            this.enqueueEvent(
                                                                                a,
                                                                                this.setTopics.bind(this, a, o, (e) =>
                                                                                    n(e)
                                                                                )
                                                                            );
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            loadStickerThumb(e) {
                                                                const t = (e) => `${e.id}_${e.type}`;
                                                                return new Promise((s) => {
                                                                    const i = {};
                                                                    for (let o = 0; o < e.length; o++) {
                                                                        var n, r;
                                                                        const s = e[o];
                                                                        if (
                                                                            (null === (n = s.params) || void 0 === n
                                                                                ? void 0
                                                                                : n.msg_type) === v.MSG_STICKER ||
                                                                            (null === (r = s.params) || void 0 === r
                                                                                ? void 0
                                                                                : r.msg_type) === v.CLI_MSG_TYPE_STICKER
                                                                        ) {
                                                                            var a;
                                                                            const e =
                                                                                null === (a = s.params) || void 0 === a
                                                                                    ? void 0
                                                                                    : a.extra;
                                                                            e &&
                                                                                null != e.catId &&
                                                                                null != e.id &&
                                                                                (i[t(s)] =
                                                                                    this.StickerManager.getStickerIfNotExist(
                                                                                        e.catId,
                                                                                        e.id
                                                                                    ));
                                                                        }
                                                                    }
                                                                    Object.keys(i).length > 0
                                                                        ? _o(i).then((i) => {
                                                                              for (let s = 0; s < e.length; s++) {
                                                                                  const n = e[s],
                                                                                      r = i[t(n)];
                                                                                  r &&
                                                                                      r.id ===
                                                                                          parseInt(n.params.extra.id) &&
                                                                                      r.cateId ===
                                                                                          parseInt(
                                                                                              n.params.extra.catId
                                                                                          ) &&
                                                                                      ((n.params.thumb =
                                                                                          r.stickerUrl || ''),
                                                                                      (e[s] = n));
                                                                              }
                                                                              s(e);
                                                                          })
                                                                        : s(e);
                                                                });
                                                            }
                                                            loadExtraDataForTopics(e) {
                                                                return new Promise((t) => {
                                                                    this.loadStickerThumb(e).then((e) => {
                                                                        t(e);
                                                                    });
                                                                });
                                                            }
                                                            getCache(e) {
                                                                return this.cache.get(e);
                                                            }
                                                            get Fetcher() {
                                                                return this.fetcher;
                                                            }
                                                            get Logger() {
                                                                return this.logger;
                                                            }
                                                            get StickerManager() {
                                                                return Qe.g;
                                                            }
                                                            get Storage() {
                                                                return this.storage;
                                                            }
                                                        })
                                                    ) || Eo)
                                            ) || Eo)
                                    ) || Eo)
                            ) || Eo)
                    ) || Eo;
                d.ModuleContainer.register(mo, wo);
                var Do = class {
                    createOneOnOneTopic(e, t, s, i) {
                        void 0 === e && (e = ''), void 0 === s && (s = 0), void 0 === i && (i = 'vi');
                        let n = { conversationId: e, topic: t, version: s, lang: i };
                        He.default.logCoreInfo('[PinTopic] - createOneOnOneTopic params: ', n);
                        const r =
                            ze.b.getFriendBoardDomain() +
                            '/api/friendboard/create?' +
                            this.getCommonParams() +
                            '&params=' +
                            this.getEncodedParams(n);
                        return this.getRequest(r, null, 12067);
                    }
                    getListOneOnOnePinTopics(e, t) {
                        void 0 === e && (e = ''), void 0 === t && (t = 0);
                        let s = { conversationId: e, version: t };
                        He.default.logCoreInfo('[PinTopic] - getListOneOnOnePinTopics params: ', s);
                        const i =
                            ze.b.getFriendBoardDomain() +
                            '/api/friendboard/list?' +
                            Yi.default._getCommonParams() +
                            '&params=' +
                            this.getEncodedParams(s);
                        return this.getRequest(i, null, 12065);
                    }
                    reorderOneOnOnePinTopics(e, t, s, i) {
                        void 0 === e && (e = ''), void 0 === s && (s = 0), void 0 === i && (i = 'vi');
                        let n = { conversationId: e, topics: t, version: s, lang: i };
                        He.default.logCoreInfo('[PinTopic] - reorderOneOnOnePinTopics params: ', n);
                        const r =
                            ze.b.getFriendBoardDomain() +
                            '/api/friendboard/reorder?' +
                            this.getCommonParams() +
                            '&params=' +
                            this.getEncodedParams(n);
                        return this.getRequest(r, null, 12068);
                    }
                    unpinOneOnOneTopics(e, t, s, i) {
                        void 0 === e && (e = ''), void 0 === s && (s = 0), void 0 === i && (i = 'vi');
                        let n = { conversationId: e, topics: t, version: s, lang: i };
                        He.default.logCoreInfo('[PinTopic] - unpinOneOnOneTopics params: ', n);
                        const r =
                            ze.b.getFriendBoardDomain() +
                            '/api/friendboard/multi_unpin?' +
                            this.getCommonParams() +
                            '&params=' +
                            this.getEncodedParams(n);
                        return this.getRequest(r, null, 12069);
                    }
                    getCommonParams() {
                        return Yi.default._getCommonParams();
                    }
                    getEncodedParams(e) {
                        return Yi.default.getEncodedParams(e);
                    }
                    getRequest(e, t, s, i, n, r, a, o, d) {
                        return Yi.default._get(e, t, s, i, n, r, a, o, d);
                    }
                };
                var Lo,
                    Fo = function () {
                        let e;
                        function t() {
                            return e || (e = new Do()), e;
                        }
                        const s = (e) =>
                            new Promise((t, s) => {
                                e.then(Zi.a).then(t).catch(s);
                            });
                        return {
                            createOneOnOneTopic: function (e, n, r) {
                                void 0 === r && (r = 0);
                                const a = Object(i.a)({}, n),
                                    { params: o } = a;
                                o && o.extra && o.extra.constructor === Object && (o.extra = JSON.stringify(o.extra)),
                                    o && (a.params = JSON.stringify(o)),
                                    null == a.src && (a.src = -1),
                                    null == a.pinAct && (a.pinAct = 1);
                                const d = Rt.default.getCurrentLanguageName();
                                return s(t().createOneOnOneTopic(e, a, r, d));
                            },
                            getListOneOnOnePinTopics: function (e, i) {
                                return void 0 === i && (i = 0), s(t().getListOneOnOnePinTopics(e, i));
                            },
                            reorderOneOnOnePinTopics: function (e, i, n) {
                                void 0 === n && (n = 0);
                                const r = Rt.default.getCurrentLanguageName();
                                return s(t().reorderOneOnOnePinTopics(e, i, n, r));
                            },
                            unpinOneOnOneTopics: function (e, i, n) {
                                void 0 === n && (n = 0);
                                const r = Rt.default.getCurrentLanguageName();
                                return s(t().unpinOneOnOneTopics(e, i, n, r));
                            },
                        };
                    };
                !(function (e) {
                    (e.CREATE = 'create'), (e.FETCH = 'fetch'), (e.REORDER = 'reorder'), (e.UNPIN = 'unpin');
                })(Lo || (Lo = {}));
                var Ro = class extends Oo {
                    constructor() {
                        super(Ja.f.Network, [Lo.CREATE, Lo.FETCH, Lo.REORDER, Lo.UNPIN]);
                    }
                    infoCreate() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logInfo(Lo.CREATE, ...t);
                    }
                    infoFetch() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logInfo(Lo.FETCH, ...t);
                    }
                    infoReorder() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logInfo(Lo.REORDER, ...t);
                    }
                    infoUnpin() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logInfo(Lo.UNPIN, ...t);
                    }
                    errorCreate() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logError(Lo.CREATE, ...t);
                    }
                    errorFetch() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logError(Lo.FETCH, ...t);
                    }
                    errorReorder() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logError(Lo.REORDER, ...t);
                    }
                    errorUnpin() {
                        for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                        this.logError(Lo.UNPIN, ...t);
                    }
                    logInfo(e) {
                        if (this.isEnableLog()) {
                            for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                s[i - 1] = arguments[i];
                            super.info(e, ...s);
                        }
                    }
                    logError(e) {
                        if (this.isEnableLog()) {
                            for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                s[i - 1] = arguments[i];
                            super.error(e, ...s);
                        }
                    }
                    isEnableLog() {
                        return Object(eo.i)();
                    }
                };
                var Ao,
                    Po = class {
                        constructor() {
                            (this.apiClient = void 0),
                                (this.logger = void 0),
                                (this.requestID = void 0),
                                (this.apiClient = Fo()),
                                (this.logger = new Ro()),
                                (this.requestID = new po.a());
                        }
                        async fetchTopics(e, t) {
                            void 0 === t && (t = 0);
                            const s = this.getRequestId();
                            this.Logger.infoFetch(s, `call cId:${e}`, t);
                            try {
                                const i = await this.apiClient.getListOneOnOnePinTopics(e, t);
                                return (
                                    this.Logger.infoFetch(s, `cId:${e} success`, i.version),
                                    { status: Ja.h.SUCCESS, response: { data: { topics: i.data, version: i.version } } }
                                );
                            } catch (i) {
                                return (
                                    this.Logger.errorFetch(s, `cId:${e} fail`, Mo(i, Object(eo.d)())),
                                    Promise.reject({
                                        status: Ja.h.ERROR,
                                        error: { code: i.code || i.error_code, message: i.error_message },
                                    })
                                );
                            }
                        }
                        async createTopic(e, t, s) {
                            void 0 === s && (s = 0);
                            const i = this.getRequestId();
                            this.Logger.infoCreate(i, `call cId:${e}`, s);
                            try {
                                const n = await this.apiClient.createOneOnOneTopic(e, t, s);
                                return (
                                    this.Logger.infoCreate(i, `cId:${e} success`, n.version),
                                    { status: Ja.h.SUCCESS, response: { data: { topic: n.data, version: n.version } } }
                                );
                            } catch (n) {
                                return (
                                    this.Logger.errorCreate(i, `cId:${e} fail`, Mo(n, Object(eo.d)())),
                                    Promise.reject({
                                        status: Ja.h.ERROR,
                                        error: { code: n.code || n.error_code, message: n.error_message },
                                    })
                                );
                            }
                        }
                        async unpinTopics(e, t, s) {
                            void 0 === s && (s = 0);
                            const i = this.getRequestId();
                            this.Logger.infoUnpin(i, `call cId:${e}`, s);
                            try {
                                const n = await this.apiClient.unpinOneOnOneTopics(e, t, s);
                                return (
                                    this.Logger.infoUnpin(i, `cId:${e} success`, n.version),
                                    { status: Ja.h.SUCCESS, response: { data: n } }
                                );
                            } catch (n) {
                                return (
                                    this.Logger.errorUnpin(i, `cId:${e} fail`, Mo(n, Object(eo.d)())),
                                    Promise.reject({
                                        status: Ja.h.ERROR,
                                        error: { code: n.code || n.error_code, message: n.error_message },
                                    })
                                );
                            }
                        }
                        async reorderTopics(e, t, s) {
                            void 0 === s && (s = 0);
                            const i = this.getRequestId();
                            this.Logger.infoReorder(i, `call cId:${e}`, s);
                            try {
                                const n = await this.apiClient.reorderOneOnOnePinTopics(e, t, s);
                                return (
                                    this.Logger.infoReorder(i, `cId:${e} success`, n.version),
                                    { status: Ja.h.SUCCESS, response: { data: n } }
                                );
                            } catch (n) {
                                return (
                                    this.Logger.errorUnpin(i, `cId:${e} fail`, Mo(n, Object(eo.d)())),
                                    Promise.reject({
                                        status: Ja.h.ERROR,
                                        error: { code: n.code || n.error_code, message: n.error_message },
                                    })
                                );
                            }
                        }
                        getRequestId() {
                            return this.requestID.next();
                        }
                        get Logger() {
                            return this.logger;
                        }
                    };
                d.ModuleContainer.register(Io, Po);
                var No =
                    Object(d.singleton)(Ha)(
                        (Ao = class {
                            constructor() {
                                this._storage = void 0;
                            }
                            async clearTopics(e, t) {
                                void 0 === t && (t = !1);
                                try {
                                    let s;
                                    if (t) s = this.storage.removeConversationTopics(e);
                                    else {
                                        const t = { conversationId: e, topics: [] },
                                            i = ['topics'];
                                        s = this.storage.updateGroupTopic(t, i);
                                    }
                                    return await s, e;
                                } catch (s) {
                                    return Promise.reject(s);
                                }
                            }
                            async loadTopics(e) {
                                try {
                                    return (await this.loadTopicsFromDB(e)).response.data;
                                } catch (t) {
                                    return Promise.reject(t);
                                }
                            }
                            async setTopics(e) {
                                try {
                                    return await this.setTopicsToDB(e);
                                } catch (t) {
                                    return Promise.reject(t);
                                }
                            }
                            getEntryPointPromotionalTooltipShowedStatus() {
                                const e = u.a
                                    .getInstance()
                                    .getItemForCurrentUser(Ja.e.ONE_ON_ONE_ENTRY_POINT_PROMOTIONAL_TOOLTIP_SHOWED);
                                if (null === e) return null;
                                try {
                                    return JSON.parse(e);
                                } catch (t) {
                                    return !1;
                                }
                            }
                            async getMessagesByIds(e) {
                                try {
                                    const t = await this.storage.getMessagesByIds(e);
                                    let s;
                                    e && e.length > 0 && (s = e[0]);
                                    let i = null;
                                    return s && (i = t[s]), i || Promise.reject('Not found');
                                } catch (t) {
                                    return Promise.reject(t);
                                }
                            }
                            async getMessageByCliMsgId(e, t) {
                                void 0 === t && (t = {});
                                try {
                                    const { myUID: s, userId: i } = t;
                                    if (i) {
                                        let t = i;
                                        s == i && (t = '0');
                                        const n = await this.storage.getMessageByCliMsgIdOwnerId(e, t);
                                        return n || Promise.reject('Not found');
                                    }
                                    const n = await this.storage.getMessageByCliMsgId(e);
                                    if (!n || !n.length) return Promise.reject('Not found');
                                    n.length;
                                    const r = n && n[0];
                                    return r || Promise.reject('Not found');
                                } catch (s) {
                                    return Promise.reject(s);
                                }
                            }
                            setEntryPointPromotionalTooltipShowedStatus(e) {
                                u.a
                                    .getInstance()
                                    .setItemForCurrentUser(
                                        Ja.e.ONE_ON_ONE_ENTRY_POINT_PROMOTIONAL_TOOLTIP_SHOWED,
                                        JSON.stringify(e)
                                    );
                            }
                            setForcedFetchMilestone(e) {
                                u.a.getInstance().setItemForCurrentUser(Ja.e.FORCE_FETCH_MILESTONE, e.toString());
                            }
                            async loadTopicsFromDB(e) {
                                try {
                                    const t = await this.storage.getGroupTopic(e);
                                    return { status: Ja.h.SUCCESS, response: { data: t } };
                                } catch (t) {
                                    return Promise.reject({
                                        status: Ja.h.ERROR,
                                        error: {
                                            code: null == t ? void 0 : t.code,
                                            message:
                                                (null == t ? void 0 : t.message) ||
                                                (null == t ? void 0 : t.error_message),
                                            data: t,
                                        },
                                    });
                                }
                            }
                            async setTopicsToDB(e) {
                                return await this.storage.setGroupTopic(e);
                            }
                            get storage() {
                                return this._storage || (this._storage = s('XS0u').default), this._storage;
                            }
                        })
                    ) || Ao;
                d.ModuleContainer.register(Qa, No);
                var jo = s('+3r3');
                var Uo,
                    Bo = Object(d.define)('pin-topic-one-on-one-controller');
                !(function (e) {
                    (e.CONTROL = 'control'),
                        (e.CREATE = 'create'),
                        (e.LOAD = 'load'),
                        (e.REORDER = 'reorder'),
                        (e.UNPIN = 'unpin');
                })(Uo || (Uo = {}));
                var ko,
                    Go = class extends Oo {
                        constructor() {
                            super(Ja.f.OneOnOneController, [Uo.CONTROL, Uo.CREATE, Uo.LOAD, Uo.REORDER, Uo.UNPIN]);
                        }
                        infoControl() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Uo.CONTROL, ...t);
                        }
                        infoCreate() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Uo.CREATE, ...t);
                        }
                        infoLoad() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Uo.LOAD, ...t);
                        }
                        infoReorder() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Uo.REORDER, ...t);
                        }
                        infoUnpin() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logInfo(Uo.UNPIN, ...t);
                        }
                        errorControl() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Uo.CONTROL, ...t);
                        }
                        errorCreate() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Uo.CREATE, ...t);
                        }
                        errorLoad() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Uo.LOAD, ...t);
                        }
                        errorReorder() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Uo.REORDER, ...t);
                        }
                        errorUnpin() {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            this.logError(Uo.UNPIN, ...t);
                        }
                        logInfo(e) {
                            if (this.isEnableLog()) {
                                for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                    s[i - 1] = arguments[i];
                                super.info(e, ...s);
                            }
                        }
                        logError(e) {
                            if (this.isEnableLog()) {
                                for (var t = arguments.length, s = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
                                    s[i - 1] = arguments[i];
                                super.error(e, ...s);
                            }
                        }
                        isEnableLog() {
                            return Object(eo.g)();
                        }
                    };
                Object(d.injectable)()(
                    (ko =
                        Object(d.singleton)(Bo)(
                            (ko =
                                (function (e, t) {
                                    return Object(d.inject)(mo)(e, void 0, 0);
                                })(
                                    (ko =
                                        (function (e, t) {
                                            return Object(d.inject)(qa)(e, void 0, 1);
                                        })(
                                            (ko =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (ko =
                                                        Reflect.metadata('design:paramtypes', [Object, Object])(
                                                            (ko = class {
                                                                constructor(e, t) {
                                                                    (this.dataRepository = e),
                                                                        (this.messageLoader = t),
                                                                        (this.events = {}),
                                                                        (this.logger = void 0),
                                                                        (this.requestID = void 0),
                                                                        this.initialize(),
                                                                        (this.logger = new Go()),
                                                                        (this.requestID = new po.a());
                                                                }
                                                                getPinTopic(e, t, s) {
                                                                    return new Promise((i, n) => {
                                                                        this.loadPinTopics(e)
                                                                            .then((e) => {
                                                                                const { topics: r } = e,
                                                                                    a = r.find(
                                                                                        (e) =>
                                                                                            e.id ===
                                                                                                (null == t
                                                                                                    ? void 0
                                                                                                    : t.toString()) &&
                                                                                            e.type === s
                                                                                    );
                                                                                a ? i(a) : n(null);
                                                                            })
                                                                            .catch(n);
                                                                    });
                                                                }
                                                                getMessageFromTopic(e) {
                                                                    return this.MessageLoader.getMessageFromTopic(e);
                                                                }
                                                                displayEntryPointPromotionalTooltip() {
                                                                    this.DataRepository.setEntryPointPromotionalTooltipShowedStatus(
                                                                        !0
                                                                    );
                                                                }
                                                                isDisplayedEntryPointPromotionalTooltip() {
                                                                    if (!Object(eo.l)()) return !0;
                                                                    const e =
                                                                        this.DataRepository.getEntryPointPromotionalTooltipShowedStatus();
                                                                    return null !== e && Boolean(e);
                                                                }
                                                                async loadPinTopics(e, t) {
                                                                    if ((void 0 === t && (t = !1), !Object(eo.k)()))
                                                                        return Promise.reject({
                                                                            code: to.c.OFF_FEATURE,
                                                                            message: '',
                                                                        });
                                                                    const s = this.getRequestID();
                                                                    try {
                                                                        var i;
                                                                        let n;
                                                                        t && (n = to.e.OPEN_DIALOG),
                                                                            this.Logger.infoLoad(s, `call cId:${e}`, t);
                                                                        const r =
                                                                            await this.DataRepository.loadPinTopics(
                                                                                e,
                                                                                n
                                                                            );
                                                                        return (
                                                                            this.Logger.infoLoad(
                                                                                s,
                                                                                `res cId:${e}`,
                                                                                !!r,
                                                                                r.conversationId,
                                                                                null === (i = r.topics) || void 0 === i
                                                                                    ? void 0
                                                                                    : i.length
                                                                            ),
                                                                            {
                                                                                conversationId: r.conversationId,
                                                                                topics: r.topics,
                                                                            }
                                                                        );
                                                                    } catch (n) {
                                                                        return (
                                                                            this.Logger.errorLoad(
                                                                                s,
                                                                                `err cId:${e}`,
                                                                                Mo(n, Object(eo.a)())
                                                                            ),
                                                                            Promise.reject(n)
                                                                        );
                                                                    }
                                                                }
                                                                addEventListener(e, t) {
                                                                    this.events[e] || (this.events[e] = []),
                                                                        this.events[e].push(t);
                                                                }
                                                                removeEventListener(e, t) {
                                                                    const s = this.events[e],
                                                                        i = (this.events[e] || []).length;
                                                                    for (let n = 0; n < i; n++)
                                                                        if (s[n] === t) {
                                                                            s.splice(n, 1);
                                                                            break;
                                                                        }
                                                                    0 === s.length && delete this.events[e];
                                                                }
                                                                removeEventListeners(e) {
                                                                    delete this.events[e];
                                                                }
                                                                handleEventControl(e) {
                                                                    if (!Object(eo.k)()) return;
                                                                    const t = this.getRequestID();
                                                                    this.Logger.infoControl(
                                                                        t,
                                                                        'recv',
                                                                        e.act,
                                                                        Mo(e.data, Object(eo.a)())
                                                                    ),
                                                                        this.DataRepository.handleReceivingEvent(
                                                                            e.act,
                                                                            e.data
                                                                        )
                                                                            .then((s) => {
                                                                                if (
                                                                                    (this.Logger.infoControl(
                                                                                        t,
                                                                                        'res',
                                                                                        e.act,
                                                                                        Mo(s, Object(eo.a)())
                                                                                    ),
                                                                                    e.act === to.d.UNPIN)
                                                                                ) {
                                                                                    let t = [];
                                                                                    if (
                                                                                        (Array.isArray(e.data.topics) &&
                                                                                            e.data.topics.forEach(
                                                                                                (e) => {
                                                                                                    s.topics.find(
                                                                                                        (t) =>
                                                                                                            t.id ===
                                                                                                                e.topicId &&
                                                                                                            t.type ===
                                                                                                                e.topicType
                                                                                                    ) ||
                                                                                                        t.push({
                                                                                                            topicId:
                                                                                                                e.topicId,
                                                                                                            topicType:
                                                                                                                e.topicType,
                                                                                                        });
                                                                                                }
                                                                                            ),
                                                                                        t.length > 0)
                                                                                    ) {
                                                                                        const s = {};
                                                                                        t.forEach((t) => {
                                                                                            s[
                                                                                                `${t.topicId}_${t.topicType}`
                                                                                            ] = this.getPinTopic(
                                                                                                e.data.conversationId,
                                                                                                t.topicId,
                                                                                                t.topicType
                                                                                            );
                                                                                        }),
                                                                                            _o(s).then((e) => {
                                                                                                const t = Object.keys(
                                                                                                    e
                                                                                                ).map((t) => e[t]);
                                                                                                this.MessageLoader.removeMessages(
                                                                                                    t
                                                                                                );
                                                                                            });
                                                                                    }
                                                                                }
                                                                                this.MessageLoader.loadMessages(
                                                                                    s.topics
                                                                                ),
                                                                                    this.notifyChangeEvent(
                                                                                        s.conversationId,
                                                                                        s.topics
                                                                                    );
                                                                            })
                                                                            .catch((s) => {
                                                                                this.Logger.errorControl(
                                                                                    t,
                                                                                    'err',
                                                                                    e.act,
                                                                                    Mo(s, Object(eo.a)())
                                                                                );
                                                                            });
                                                                }
                                                                async createPinTopic(e, t, s) {
                                                                    if ((void 0 === s && (s = 2), !Object(eo.k)()))
                                                                        return Promise.reject({
                                                                            code: to.c.OFF_FEATURE,
                                                                            message: '',
                                                                        });
                                                                    const i = this.getRequestID();
                                                                    try {
                                                                        var n;
                                                                        if (
                                                                            (this.Logger.infoCreate(
                                                                                i,
                                                                                `call cId:${e}`,
                                                                                !!t,
                                                                                s
                                                                            ),
                                                                            !this.isValidNetwork())
                                                                        )
                                                                            return Promise.reject({
                                                                                code: to.c.NO_NETWORK,
                                                                                message: 'STR_CHECK_NET',
                                                                            });
                                                                        const r = await this.retryable(s, () =>
                                                                            this.processCreatePinTopic(e, t, s)
                                                                        );
                                                                        return (
                                                                            this.Logger.infoCreate(
                                                                                i,
                                                                                `res cId:${e}`,
                                                                                !!r,
                                                                                null == r ? void 0 : r.conversationId,
                                                                                null == r ||
                                                                                    null === (n = r.topics) ||
                                                                                    void 0 === n
                                                                                    ? void 0
                                                                                    : n.length
                                                                            ),
                                                                            r
                                                                        );
                                                                    } catch (r) {
                                                                        return (
                                                                            this.Logger.errorCreate(
                                                                                i,
                                                                                `err cId:${e}`,
                                                                                Mo(r, Object(eo.a)())
                                                                            ),
                                                                            Promise.reject(r)
                                                                        );
                                                                    }
                                                                }
                                                                async reorderPinTopics(e, t, s) {
                                                                    if ((void 0 === s && (s = 2), !Object(eo.k)()))
                                                                        return Promise.reject({
                                                                            code: to.c.OFF_FEATURE,
                                                                            message: '',
                                                                        });
                                                                    const i = this.getRequestID();
                                                                    try {
                                                                        var n;
                                                                        if (
                                                                            (this.Logger.infoReorder(
                                                                                i,
                                                                                `call cId:${e}`,
                                                                                t.length,
                                                                                s
                                                                            ),
                                                                            !this.isValidNetwork())
                                                                        )
                                                                            return Promise.reject({
                                                                                code: to.c.NO_NETWORK,
                                                                                message: 'STR_CHECK_NET',
                                                                            });
                                                                        const r = await this.retryable(s, () =>
                                                                            this.processReorderPinTopics(e, t, s)
                                                                        );
                                                                        return (
                                                                            this.Logger.infoReorder(
                                                                                i,
                                                                                `res cId:${e}`,
                                                                                !!r,
                                                                                null == r ? void 0 : r.conversationId,
                                                                                null == r ||
                                                                                    null === (n = r.topics) ||
                                                                                    void 0 === n
                                                                                    ? void 0
                                                                                    : n.length
                                                                            ),
                                                                            r
                                                                        );
                                                                    } catch (r) {
                                                                        return (
                                                                            this.Logger.errorReorder(
                                                                                i,
                                                                                `err cId:${e}`,
                                                                                Mo(r, Object(eo.a)())
                                                                            ),
                                                                            Promise.reject(r)
                                                                        );
                                                                    }
                                                                }
                                                                async unpinPinTopics(e, t, s) {
                                                                    if ((void 0 === s && (s = 2), !Object(eo.k)()))
                                                                        return Promise.reject({
                                                                            code: to.c.OFF_FEATURE,
                                                                            message: '',
                                                                        });
                                                                    const i = this.getRequestID();
                                                                    try {
                                                                        var n;
                                                                        if (
                                                                            (this.Logger.infoUnpin(
                                                                                i,
                                                                                `call cId:${e}`,
                                                                                t.length,
                                                                                s
                                                                            ),
                                                                            !this.isValidNetwork())
                                                                        )
                                                                            return Promise.reject({
                                                                                code: to.c.NO_NETWORK,
                                                                                message: 'STR_CHECK_NET',
                                                                            });
                                                                        const r = await this.retryable(s, () =>
                                                                            this.processUnpinPinTopics(e, t, s)
                                                                        );
                                                                        return (
                                                                            this.Logger.infoUnpin(
                                                                                i,
                                                                                `res cId:${e}`,
                                                                                !!r,
                                                                                null == r ? void 0 : r.conversationId,
                                                                                null == r ||
                                                                                    null === (n = r.topics) ||
                                                                                    void 0 === n
                                                                                    ? void 0
                                                                                    : n.length
                                                                            ),
                                                                            r
                                                                        );
                                                                    } catch (r) {
                                                                        return (
                                                                            this.Logger.errorUnpin(
                                                                                i,
                                                                                `err cId:${e}`,
                                                                                Mo(r, Object(eo.a)())
                                                                            ),
                                                                            Promise.reject(r)
                                                                        );
                                                                    }
                                                                }
                                                                isMessagePinnable(e) {
                                                                    return (function (e) {
                                                                        return Ya(e);
                                                                    })(e);
                                                                }
                                                                initialize() {
                                                                    this.FriendManager.subscribeEventFriend(
                                                                        v.EventFriend.REMOVE_FRIEND,
                                                                        (e) => {
                                                                            const { userId: t } = e;
                                                                            t && this.clearTopics(t);
                                                                        }
                                                                    ),
                                                                        Object(jo.b)(this.clear);
                                                                }
                                                                clear() {
                                                                    this.DataRepository.clear(),
                                                                        this.MessageLoader.clear();
                                                                }
                                                                checkEnableToCreate(e, t, s) {
                                                                    const i = (() => {
                                                                        if (t.type === to.i.MESSAGE) {
                                                                            const i = s.topics,
                                                                                n = t.params.global_msg_id,
                                                                                r = t.params.client_msg_id,
                                                                                a = t.params.senderUid;
                                                                            for (let t = 0; t < i.length; t++) {
                                                                                const s = i[t];
                                                                                if (s.type === to.i.MESSAGE) {
                                                                                    const t =
                                                                                        this.MessageLoader.getMessageFromTopic(
                                                                                            s
                                                                                        );
                                                                                    if (
                                                                                        null != t &&
                                                                                        null != n &&
                                                                                        t.msgId === n
                                                                                    )
                                                                                        return s;
                                                                                    if (
                                                                                        null != t &&
                                                                                        null != r &&
                                                                                        t.cliMsgId === r &&
                                                                                        t.fromUid === a &&
                                                                                        t.toUid === e
                                                                                    )
                                                                                        return s;
                                                                                }
                                                                            }
                                                                        }
                                                                        return null;
                                                                    })();
                                                                    return s.topics.length < Object(eo.c)() || i
                                                                        ? { enable: !0, oldTopic: i }
                                                                        : { enable: !1, oldTopic: null };
                                                                }
                                                                clearTopics(e) {
                                                                    this.DataRepository.loadPinTopics(e, to.e.NONE)
                                                                        .then((t) => {
                                                                            this.DataRepository.clearPinTopicsForConversation(
                                                                                e,
                                                                                !0
                                                                            ),
                                                                                this.MessageLoader.removeMessages(
                                                                                    t.topics
                                                                                ),
                                                                                this.notifyChangeEvent(e, []);
                                                                        })
                                                                        .catch();
                                                                }
                                                                getRequestID() {
                                                                    return this.requestID.next();
                                                                }
                                                                async fetchTopicsForHandleTopLevelErrors(e, t) {
                                                                    return await this.DataRepository.loadPinTopics(
                                                                        e,
                                                                        t
                                                                    );
                                                                }
                                                                async handleTopLevelErrorInvalidBoardVersion(e, t, s) {
                                                                    const { conversationId: i } = t;
                                                                    try {
                                                                        const e =
                                                                            await this.fetchTopicsForHandleTopLevelErrors(
                                                                                i,
                                                                                to.e.OUT_OF_DATE
                                                                            );
                                                                        return s ? await s() : e;
                                                                    } catch (n) {
                                                                        return Promise.reject(e);
                                                                    }
                                                                }
                                                                async handleTopLevelErrorRolledData(e, t) {
                                                                    const { conversationId: s } = t;
                                                                    try {
                                                                        const t =
                                                                            await this.fetchTopicsForHandleTopLevelErrors(
                                                                                s,
                                                                                to.e.ROLLED_DATA
                                                                            );
                                                                        return (
                                                                            this.notifyChangeEvent(
                                                                                t.conversationId,
                                                                                t.topics
                                                                            ),
                                                                            Promise.reject({
                                                                                code: to.c.TOPIC_NOT_IN_PIN_LIST,
                                                                                message:
                                                                                    e.message ||
                                                                                    'STR_PIN_GENERAL_ERROR',
                                                                            })
                                                                        );
                                                                    } catch (i) {
                                                                        return Promise.reject(e);
                                                                    }
                                                                }
                                                                async handleTopLevelErrorUserBlockFriend(e) {
                                                                    return Promise.reject({
                                                                        code: to.c.USER_BLOCK_FRIEND,
                                                                        message: e.message || 'STR_TOAST_BLOCK',
                                                                    });
                                                                }
                                                                async handleTopLevelErrorUserNonFriend(e) {
                                                                    return Promise.reject({
                                                                        code: to.c.USER_NON_FRIEND,
                                                                        message: e.message || 'STR_PIN_NOT_ZALO_FRIEND',
                                                                    });
                                                                }
                                                                async handleTopLevelErrors(e, t, s) {
                                                                    return e.code === to.c.INVALID_BOARD_VERSION
                                                                        ? await this.handleTopLevelErrorInvalidBoardVersion(
                                                                              e,
                                                                              t,
                                                                              s
                                                                          )
                                                                        : e.code === to.c.TOPIC_NOT_IN_PIN_LIST
                                                                        ? await this.handleTopLevelErrorRolledData(e, t)
                                                                        : e.code === to.c.USER_BLOCK_FRIEND
                                                                        ? await this.handleTopLevelErrorUserBlockFriend(
                                                                              e
                                                                          )
                                                                        : e.code === to.c.USER_NON_FRIEND
                                                                        ? await this.handleTopLevelErrorUserNonFriend(e)
                                                                        : Promise.reject(e);
                                                                }
                                                                isValidNetwork() {
                                                                    return en.b.getStateNetwork() === en.a.CONNECTED;
                                                                }
                                                                notifyEvent(e) {
                                                                    const t = this.events[e],
                                                                        s = (this.events[e] || []).length;
                                                                    for (
                                                                        var i = arguments.length,
                                                                            n = new Array(i > 1 ? i - 1 : 0),
                                                                            r = 1;
                                                                        r < i;
                                                                        r++
                                                                    )
                                                                        n[r - 1] = arguments[r];
                                                                    for (let a = 0; a < s; a++)
                                                                        'function' == typeof t[a] && t[a](...n);
                                                                }
                                                                notifyChangeEvent(e, t) {
                                                                    this.notifyEvent('onchange', e, t);
                                                                }
                                                                notifyExceedEvent(e, t, s) {
                                                                    this.notifyEvent('onexceed', e, t, s);
                                                                }
                                                                async processCreatePinTopic(e, t, s) {
                                                                    void 0 === s && (s = 2);
                                                                    if (!this.FriendManager.isFriend(e))
                                                                        return Promise.reject({
                                                                            code: to.c.USER_NON_FRIEND,
                                                                            message: 'STR_PIN_NOT_ZALO_FRIEND',
                                                                        });
                                                                    if (this.FriendManager.isBlocked(e))
                                                                        return Promise.reject({
                                                                            code: to.c.USER_BLOCK_FRIEND,
                                                                            message: 'STR_TOAST_BLOCK',
                                                                        });
                                                                    try {
                                                                        const s =
                                                                            await this.DataRepository.createPinTopic(
                                                                                e,
                                                                                t,
                                                                                {
                                                                                    checkEnableToCreate:
                                                                                        this.checkEnableToCreate.bind(
                                                                                            this
                                                                                        ),
                                                                                }
                                                                            );
                                                                        return (
                                                                            this.MessageLoader.loadMessages(s.topics),
                                                                            this.notifyChangeEvent(
                                                                                s.conversationId,
                                                                                s.topics
                                                                            ),
                                                                            {
                                                                                conversationId: s.conversationId,
                                                                                topics: s.topics,
                                                                            }
                                                                        );
                                                                    } catch (n) {
                                                                        try {
                                                                            const i = await this.handleTopLevelErrors(
                                                                                n,
                                                                                { conversationId: e },
                                                                                this.createPinTopic.bind(
                                                                                    this,
                                                                                    e,
                                                                                    t,
                                                                                    s - 1
                                                                                )
                                                                            );
                                                                            return {
                                                                                conversationId: i.conversationId,
                                                                                topics: i.topics,
                                                                            };
                                                                        } catch (r) {
                                                                            if (r.code === to.c.PINBOARD_OVER_MAXIMUM) {
                                                                                var i;
                                                                                const s =
                                                                                    null == r ||
                                                                                    null === (i = r.data) ||
                                                                                    void 0 === i
                                                                                        ? void 0
                                                                                        : i.cache;
                                                                                this.notifyExceedEvent(
                                                                                    e,
                                                                                    (null == s ? void 0 : s.topics) ||
                                                                                        [],
                                                                                    t
                                                                                );
                                                                            }
                                                                            return Promise.reject(r);
                                                                        }
                                                                    }
                                                                }
                                                                async processReorderPinTopics(e, t, s) {
                                                                    void 0 === s && (s = 2);
                                                                    try {
                                                                        const s =
                                                                            await this.DataRepository.reorderPinTopics(
                                                                                e,
                                                                                t
                                                                            );
                                                                        return (
                                                                            this.notifyChangeEvent(
                                                                                s.conversationId,
                                                                                s.topics
                                                                            ),
                                                                            {
                                                                                conversationId: s.conversationId,
                                                                                topics: s.topics,
                                                                            }
                                                                        );
                                                                    } catch (i) {
                                                                        try {
                                                                            const n = await this.handleTopLevelErrors(
                                                                                i,
                                                                                { conversationId: e },
                                                                                this.reorderPinTopics.bind(
                                                                                    this,
                                                                                    e,
                                                                                    t,
                                                                                    s - 1
                                                                                )
                                                                            );
                                                                            return {
                                                                                conversationId: n.conversationId,
                                                                                topics: n.topics,
                                                                            };
                                                                        } catch (n) {
                                                                            return Promise.reject(n);
                                                                        }
                                                                    }
                                                                }
                                                                async processUnpinPinTopics(e, t, s) {
                                                                    void 0 === s && (s = 2);
                                                                    try {
                                                                        const s = await this.DataRepository.unpinTopics(
                                                                            e,
                                                                            t
                                                                        );
                                                                        return (
                                                                            this.MessageLoader.removeMessages(t),
                                                                            this.notifyChangeEvent(
                                                                                s.conversationId,
                                                                                s.topics
                                                                            ),
                                                                            {
                                                                                conversationId: s.conversationId,
                                                                                topics: s.topics,
                                                                            }
                                                                        );
                                                                    } catch (i) {
                                                                        try {
                                                                            const n = await this.handleTopLevelErrors(
                                                                                i,
                                                                                { conversationId: e },
                                                                                this.unpinPinTopics.bind(
                                                                                    this,
                                                                                    e,
                                                                                    t,
                                                                                    s - 1
                                                                                )
                                                                            );
                                                                            return {
                                                                                conversationId: n.conversationId,
                                                                                topics: n.topics,
                                                                            };
                                                                        } catch (n) {
                                                                            return Promise.reject(n);
                                                                        }
                                                                    }
                                                                }
                                                                async retryable(e, t) {
                                                                    return null != e && e < 0
                                                                        ? Promise.reject({
                                                                              code: to.c.STOP_RETRY_CLIENT,
                                                                              message: 'STR_PIN_GENERAL_ERROR',
                                                                          })
                                                                        : await t();
                                                                }
                                                                get DataRepository() {
                                                                    return this.dataRepository;
                                                                }
                                                                get FriendManager() {
                                                                    return rt.default;
                                                                }
                                                                get Logger() {
                                                                    return this.logger;
                                                                }
                                                                get MessageLoader() {
                                                                    return this.messageLoader;
                                                                }
                                                            })
                                                        ) || ko)
                                                ) || ko)
                                        ) || ko)
                                ) || ko)
                        ) || ko)
                );
                var xo,
                    zo = s('74m0');
                Object(d.injectable)()(
                    (xo =
                        Object(d.singleton)(zo.a)(
                            (xo =
                                (function (e, t) {
                                    return Object(d.inject)(Bo)(e, void 0, 0);
                                })(
                                    (xo =
                                        Reflect.metadata(
                                            'design:type',
                                            Function
                                        )(
                                            (xo =
                                                Reflect.metadata('design:paramtypes', [Object])(
                                                    (xo = class {
                                                        constructor(e) {
                                                            this.oneOnOneController = e;
                                                        }
                                                        addEventListener(e, t) {
                                                            this.OneOnOneController.addEventListener(e, t);
                                                        }
                                                        createPinTopic(e, t) {
                                                            return Object(Xa.d)(e)
                                                                ? Promise.resolve()
                                                                : this.OneOnOneController.createPinTopic(e, t);
                                                        }
                                                        displayOneOnOneEntryPointPromotionalTooltip() {
                                                            return this.OneOnOneController.displayEntryPointPromotionalTooltip();
                                                        }
                                                        getPinTopic(e, t, s) {
                                                            return Object(Xa.d)(e)
                                                                ? Promise.resolve()
                                                                : this.OneOnOneController.getPinTopic(e, t, s);
                                                        }
                                                        getMessageFromTopic(e, t) {
                                                            if (!Object(Xa.d)(e))
                                                                return this.OneOnOneController.getMessageFromTopic(t);
                                                        }
                                                        handleEventControl(e) {}
                                                        handleOneOnOneEventsControl(e) {
                                                            this.OneOnOneController.handleEventControl(e);
                                                        }
                                                        isDisplayedOneOnOneEntryPointPromotionalTooltip() {
                                                            return this.OneOnOneController.isDisplayedEntryPointPromotionalTooltip();
                                                        }
                                                        isEnablePinTopicOneOnOneFeature() {
                                                            return eo.k();
                                                        }
                                                        isEnablePinTopicOneOnOneEntryPoint() {
                                                            return eo.j();
                                                        }
                                                        isMessagePinnable(e, t) {
                                                            return (
                                                                !!this.isMessagePinnableForAllConversations(e) &&
                                                                (t !== v.CONVERSATION_TYPE.FRIEND ||
                                                                    this.OneOnOneController.isMessagePinnable(e))
                                                            );
                                                        }
                                                        loadPinTopics(e, t) {
                                                            return Object(Xa.d)(e)
                                                                ? Promise.resolve()
                                                                : this.OneOnOneController.loadPinTopics(e, t);
                                                        }
                                                        removeEventListener(e, t) {
                                                            this.OneOnOneController.removeEventListener(e, t);
                                                        }
                                                        removeEventListeners(e) {
                                                            this.OneOnOneController.removeEventListeners(e);
                                                        }
                                                        reorderPinTopics(e, t) {
                                                            return Object(Xa.d)(e)
                                                                ? Promise.resolve()
                                                                : this.OneOnOneController.reorderPinTopics(e, t);
                                                        }
                                                        unpinPinTopics(e, t) {
                                                            return Object(Xa.d)(e)
                                                                ? Promise.resolve()
                                                                : this.OneOnOneController.unpinPinTopics(e, t);
                                                        }
                                                        isMessagePinnableForAllConversations(e) {
                                                            return Ya(e);
                                                        }
                                                        get OneOnOneController() {
                                                            return this.oneOnOneController;
                                                        }
                                                    })
                                                ) || xo)
                                        ) || xo)
                                ) || xo)
                        ) || xo)
                );
                var Vo = s('t5n0'),
                    $o = s('aQZC');
                var Wo,
                    Ko = new (class {
                        constructor() {
                            (this.focusManager = void 0), (this.focusStatus = void 0), (this.focusService = void 0);
                        }
                        get FSV() {
                            return (
                                this.focusService ||
                                    (this.focusService = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger(
                                        kt.b.appStatus,
                                        [kt.b.focusDetectorManager]
                                    )),
                                this.focusService
                            );
                        }
                        get FM() {
                            return (
                                this.focusManager ||
                                    (this.focusManager = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger(
                                        kt.b.appStatus,
                                        [kt.b.focusDetectorManager]
                                    )),
                                this.focusManager
                            );
                        }
                        get FSTT() {
                            return (
                                this.focusStatus ||
                                    (this.focusStatus = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger(
                                        kt.b.appStatus,
                                        [kt.b.focusStatus]
                                    )),
                                this.focusStatus
                            );
                        }
                    })();
                let qo =
                    Object(d.injectable)()(
                        (Wo =
                            Object(L.e)()(
                                (Wo =
                                    (function (e, t) {
                                        return Object(d.inject)(l.a)(e, void 0, 0);
                                    })(
                                        (Wo =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (Wo =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === l.a ? Object : l.a,
                                                    ])(
                                                        (Wo = class extends G.b {
                                                            constructor(e) {
                                                                super(),
                                                                    (this.config = e),
                                                                    (this.detectors = void 0),
                                                                    (this.lostFocusHandler = void 0),
                                                                    (this.reFocusHandler = void 0),
                                                                    (this.lastFirer = void 0),
                                                                    (this.enableLog = void 0),
                                                                    (this.listenDetector = (e, t) => {
                                                                        t &&
                                                                            (this.detectors.set(e, t),
                                                                            this.lostFocusHandler.set(e, () => {
                                                                                this.onLostFocus(e);
                                                                            }),
                                                                            this.reFocusHandler.set(e, () => {
                                                                                this.onRefocus(e);
                                                                            }),
                                                                            t.idle(this.lostFocusHandler.get(e)),
                                                                            t.wakeup(this.reFocusHandler.get(e)));
                                                                    }),
                                                                    (this.disposeDetector = (e) => {
                                                                        const t = this.detectors.get(e);
                                                                        this.enableLog &&
                                                                            Ko.FM.zsymb(
                                                                                0,
                                                                                9657,
                                                                                30003,
                                                                                'disposeDetector',
                                                                                e,
                                                                                !!t
                                                                            ),
                                                                            t &&
                                                                                (t.removeIdle(
                                                                                    this.lostFocusHandler.get(e)
                                                                                ),
                                                                                t.removeWakeup(
                                                                                    this.reFocusHandler.get(e)
                                                                                ),
                                                                                (t.ifvisible = null),
                                                                                (t._window = null),
                                                                                t.removeAllIpc(),
                                                                                this.lostFocusHandler.delete(e),
                                                                                this.reFocusHandler.delete(e),
                                                                                this.detectors.delete(e));
                                                                    }),
                                                                    (this.onLostFocus = (e) => {
                                                                        this.lastFirer &&
                                                                            (clearTimeout(this.lastFirer),
                                                                            (this.lastFirer = null)),
                                                                            (this.lastFirer = setTimeout(() => {
                                                                                this.enableLog &&
                                                                                    Ko.FM.zsymb(
                                                                                        0,
                                                                                        9657,
                                                                                        30004,
                                                                                        'onlostFocus',
                                                                                        e
                                                                                    );
                                                                                let t = !0,
                                                                                    s = Number.MAX_SAFE_INTEGER,
                                                                                    i = 'unknown';
                                                                                this.detectors.forEach((e) => {
                                                                                    if (e.isActive()) t = !1;
                                                                                    else {
                                                                                        const t = e.getIdleInfo();
                                                                                        t.idleFor < s &&
                                                                                            ((s = t.idleFor),
                                                                                            (i = t.idleByTimeout
                                                                                                ? 'no-action-timeout'
                                                                                                : 'unknown'));
                                                                                    }
                                                                                }),
                                                                                    t &&
                                                                                        this.dispatchEvent(
                                                                                            new Vo.a(Vo.b.LostFocus, {
                                                                                                scope: 'app',
                                                                                                reason: i,
                                                                                            })
                                                                                        ),
                                                                                    (this.lastFirer = null);
                                                                            }, 200));
                                                                    }),
                                                                    (this.onRefocus = (e) => {
                                                                        this.lastFirer &&
                                                                            (clearTimeout(this.lastFirer),
                                                                            (this.lastFirer = null)),
                                                                            (this.lastFirer = setTimeout(() => {
                                                                                this.enableLog &&
                                                                                    Ko.FM.zsymb(
                                                                                        0,
                                                                                        9657,
                                                                                        30005,
                                                                                        'onRefocus',
                                                                                        e
                                                                                    ),
                                                                                    this.dispatchEvent(
                                                                                        new Vo.a(Vo.b.Focus, e)
                                                                                    ),
                                                                                    (this.lastFirer = null);
                                                                            }, 200));
                                                                    }),
                                                                    (this.detectors = new Map()),
                                                                    (this.lostFocusHandler = new Map()),
                                                                    (this.reFocusHandler = new Map()),
                                                                    (this.enableLog = !0);
                                                            }
                                                            onAuthenticated(e) {
                                                                const { userId: t } = e.getSession();
                                                                this.enableLog &&
                                                                    Ko.FM.zsymb(0, 9657, 3e4, 'onAuthenticated', t),
                                                                    this.init();
                                                            }
                                                            acquire(e, t, s, i) {
                                                                if (!e || e == Mt.c) return $o.b;
                                                                if (this.detectors.has(e))
                                                                    return (
                                                                        Ko.FM.zsymb(
                                                                            0,
                                                                            9657,
                                                                            30001,
                                                                            'acquire exists',
                                                                            e
                                                                        ),
                                                                        this.detectors.get(e)
                                                                    );
                                                                this.enableLog &&
                                                                    Ko.FM.zsymb(0, 9657, 30002, 'acquire new', e);
                                                                const n = new $o.a(t, e, s, i);
                                                                return this.listenDetector(e, n), n;
                                                            }
                                                            release(e) {
                                                                this.disposeDetector(e);
                                                            }
                                                            getAppIdleTime() {
                                                                let e = Number.MAX_SAFE_INTEGER;
                                                                return (
                                                                    this.detectors.forEach((t) => {
                                                                        const s = t.getIdleInfo();
                                                                        s.idleFor < e && (e = s.idleFor);
                                                                    }),
                                                                    e
                                                                );
                                                            }
                                                            updateIdleTimeout(e) {
                                                                this.detectors.forEach((t) => {
                                                                    t.setIdleTimeout(e);
                                                                });
                                                            }
                                                            isAppFocus() {
                                                                let e = !1;
                                                                return (
                                                                    this.detectors.forEach((t) => {
                                                                        t.isActive() && (e = !0);
                                                                    }),
                                                                    e
                                                                );
                                                            }
                                                            init() {
                                                                this.listenDetector(Mt.c, $o.b);
                                                            }
                                                        })
                                                    ) || Wo)
                                            ) || Wo)
                                    ) || Wo)
                            ) || Wo)
                    ) || Wo;
                const Ho = Object(d.define)('lost-focus-service'),
                    Qo = Object(d.define)('active-service');
                var Jo,
                    Zo,
                    Xo = s('cHDa');
                !(function (e) {
                    (e[(e.Focus = 0)] = 'Focus'), (e[(e.LostFocus = 1)] = 'LostFocus');
                })(Zo || (Zo = {}));
                let Yo =
                    Object(d.injectable)()(
                        (Jo =
                            Object(L.e)()(
                                (Jo =
                                    (function (e, t) {
                                        return Object(d.inject)(l.a)(e, void 0, 0);
                                    })(
                                        (Jo =
                                            (function (e, t) {
                                                return Object(d.inject)(Ho)(e, void 0, 1);
                                            })(
                                                (Jo =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (Jo =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === l.a ? Object : l.a,
                                                                void 0 === Ho ? Object : Ho,
                                                            ])(
                                                                (Jo = class {
                                                                    constructor(e, t) {
                                                                        (this.config = e),
                                                                            (this.service = t),
                                                                            (this.enableLog = void 0),
                                                                            (this.currentState = void 0),
                                                                            (this.enableLog = !0),
                                                                            (this.currentState = Zo.LostFocus);
                                                                    }
                                                                    onAuthenticated(e) {
                                                                        const { userId: t } = e.getSession();
                                                                        this.enableLog &&
                                                                            Ko.FSTT.zsymb(
                                                                                0,
                                                                                9656,
                                                                                3e4,
                                                                                'onAuthenticated',
                                                                                t
                                                                            ),
                                                                            this.init();
                                                                    }
                                                                    init() {
                                                                        const e = d.ModuleContainer.resolve(Vo.c);
                                                                        e.addEventListener(Vo.b.LostFocus, (e) => {
                                                                            const { scope: t, reason: s } = e.payload;
                                                                            this.currentState == Zo.Focus &&
                                                                                'app' === t &&
                                                                                (this.service.notiLostFocus(),
                                                                                this.config.get(
                                                                                    'online_configs.enable_focus_manager'
                                                                                ) && Xo.b.setAppStatus(Xo.a.BACKGROUND),
                                                                                (this.currentState = Zo.LostFocus));
                                                                        }),
                                                                            e.addEventListener(Vo.b.Focus, (e) => {
                                                                                this.currentState == Zo.LostFocus &&
                                                                                    this.config.get(
                                                                                        'online_configs.enable_focus_manager'
                                                                                    ) &&
                                                                                    Xo.b.setAppStatus(Xo.a.FOREGROUND),
                                                                                    (this.currentState = Zo.Focus);
                                                                            });
                                                                    }
                                                                })
                                                            ) || Jo)
                                                    ) || Jo)
                                            ) || Jo)
                                    ) || Jo)
                            ) || Jo)
                    ) || Jo;
                var ed;
                let td =
                    Object(d.injectable)()(
                        (ed =
                            (function (e, t) {
                                return Object(d.inject)(l.a)(e, void 0, 0);
                            })(
                                (ed =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (ed =
                                            Reflect.metadata('design:paramtypes', [void 0 === l.a ? Object : l.a])(
                                                (ed = class {
                                                    constructor(e) {
                                                        this.config = e;
                                                    }
                                                    notiLostFocus() {
                                                        this.config.get('online_configs.enable_lost_focus')
                                                            ? Yi.default
                                                                  .lostFocus()
                                                                  .then(Zi.a)
                                                                  .then(() => {
                                                                      Ko.FSV.zsymb(
                                                                          0,
                                                                          8612,
                                                                          30001,
                                                                          'send noti lost success'
                                                                      );
                                                                  })
                                                                  .catch((e) => {
                                                                      Ko.FSV.zsymb(
                                                                          0,
                                                                          8612,
                                                                          30002,
                                                                          'send noti lost fail',
                                                                          JSON.stringify(e)
                                                                      );
                                                                  })
                                                            : Ko.FSV.zsymb(
                                                                  0,
                                                                  8612,
                                                                  3e4,
                                                                  'call send noti lost but feat disable'
                                                              );
                                                    }
                                                })
                                            ) || ed)
                                    ) || ed)
                            ) || ed)
                    ) || ed;
                var sd = s('a8HX'),
                    id = s('LLK0');
                var nd,
                    rd = s('G15u');
                let ad =
                    Object(d.injectable)()(
                        (nd =
                            (function (e, t) {
                                return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 0);
                            })(
                                (nd =
                                    (function (e, t) {
                                        return Object(d.inject)(Qo)(e, void 0, 1);
                                    })(
                                        (nd =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (nd =
                                                    Reflect.metadata('design:paramtypes', [
                                                        void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                        void 0 === Qo ? Object : Qo,
                                                    ])(
                                                        (nd = class extends (
                                                            class {
                                                                constructor() {
                                                                    this.interpreter = void 0;
                                                                }
                                                                create(e) {
                                                                    this.interpreter = new id.a(
                                                                        this.createMachine(e),
                                                                        e
                                                                    );
                                                                }
                                                                get status() {
                                                                    var e;
                                                                    return (
                                                                        (null === (e = this.interpreter) || void 0 === e
                                                                            ? void 0
                                                                            : e.status) || id.b.NotStarted
                                                                    );
                                                                }
                                                                start() {
                                                                    var e;
                                                                    null === (e = this.interpreter) ||
                                                                        void 0 === e ||
                                                                        e.start();
                                                                }
                                                                stop() {
                                                                    var e;
                                                                    null === (e = this.interpreter) ||
                                                                        void 0 === e ||
                                                                        e.stop();
                                                                }
                                                                send(e) {
                                                                    return this.interpreter.send(e);
                                                                }
                                                                onChange(e) {
                                                                    this.interpreter.onChange(e);
                                                                }
                                                                onTransition(e) {
                                                                    this.interpreter.onTransition(e);
                                                                }
                                                                onStop(e) {
                                                                    this.interpreter.onStop(e);
                                                                }
                                                                onDone(e) {
                                                                    this.interpreter.onDone(e);
                                                                }
                                                            }
                                                        ) {
                                                            constructor(e, t) {
                                                                super(), (this.loggerFactory = e), (this.service = t);
                                                            }
                                                            createMachine() {
                                                                return (
                                                                    (e = this.loggerFactory.createZLogger(
                                                                        kt.b.activeDeactive,
                                                                        [kt.b.stateMachine]
                                                                    )),
                                                                    (t = this.service),
                                                                    Object(rd.a)({
                                                                        strict: !0,
                                                                        id: 'active-deactive',
                                                                        context: {},
                                                                        initial: 'unset',
                                                                        states: {
                                                                            unset: {
                                                                                entry: () =>
                                                                                    e.zsymb(3, 9805, 3e4, 'unset'),
                                                                                on: {
                                                                                    FOCUS: {
                                                                                        actions: () => {
                                                                                            e.zsymb(
                                                                                                3,
                                                                                                9805,
                                                                                                30001,
                                                                                                'start life cycle normal case!'
                                                                                            );
                                                                                        },
                                                                                        target: 'foreground_active',
                                                                                    },
                                                                                    APP_UNLOCK: {
                                                                                        actions: () => {
                                                                                            e.zsymb(
                                                                                                3,
                                                                                                9805,
                                                                                                30002,
                                                                                                'start life cycle app auto lock case!'
                                                                                            );
                                                                                        },
                                                                                        target: 'foreground_active',
                                                                                    },
                                                                                    LOST_FOCUS: {
                                                                                        actions: () => {
                                                                                            e.zsymb(
                                                                                                3,
                                                                                                9805,
                                                                                                30003,
                                                                                                'start life cycle lost focus case!'
                                                                                            );
                                                                                        },
                                                                                        target: 'background_active',
                                                                                    },
                                                                                },
                                                                            },
                                                                            foreground_active: {
                                                                                entry: (s) => {
                                                                                    e.zsymb(
                                                                                        3,
                                                                                        9805,
                                                                                        30004,
                                                                                        'state: foreground_active'
                                                                                    ),
                                                                                        t.startForegroundMode();
                                                                                },
                                                                                on: {
                                                                                    IDLE: {
                                                                                        actions: () => {},
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                    LOST_FOCUS: {
                                                                                        actions: () => {},
                                                                                        target: 'background_active',
                                                                                    },
                                                                                    INAPP_INTERACT: {
                                                                                        actions: () => {
                                                                                            t.keepForegroundMode();
                                                                                        },
                                                                                    },
                                                                                    OUTAPP_INTERACT: {
                                                                                        actions: (e, s) => {
                                                                                            t.activeInBackground(
                                                                                                s.isOsEvt
                                                                                            );
                                                                                        },
                                                                                    },
                                                                                    APP_LOCK: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                    APP_UNLOCK: {
                                                                                        actions: () => {
                                                                                            t.startForegroundMode();
                                                                                        },
                                                                                    },
                                                                                    LOG_OFF: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                    OUTAPP_IDLE: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                },
                                                                            },
                                                                            background_active: {
                                                                                entry: (s) => {
                                                                                    e.zsymb(
                                                                                        3,
                                                                                        9805,
                                                                                        30005,
                                                                                        'state: background_active'
                                                                                    ),
                                                                                        t.startBackgroundMode();
                                                                                },
                                                                                on: {
                                                                                    FOCUS: {
                                                                                        target: 'foreground_active',
                                                                                    },
                                                                                    OUTAPP_INTERACT: {
                                                                                        actions: (e, s) => {
                                                                                            t.activeInBackground(
                                                                                                s.isOsEvt
                                                                                            );
                                                                                        },
                                                                                    },
                                                                                    OUTAPP_IDLE: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                    APP_LOCK: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                    LOG_OFF: {
                                                                                        target: 'background_deactive',
                                                                                    },
                                                                                },
                                                                            },
                                                                            background_deactive: {
                                                                                entry: (s, i) => {
                                                                                    e.zsymb(
                                                                                        3,
                                                                                        9805,
                                                                                        30006,
                                                                                        'state: background_deactive',
                                                                                        i.status
                                                                                    ),
                                                                                        t.startDeactive(i.status);
                                                                                },
                                                                                on: {
                                                                                    FOCUS: {
                                                                                        actions: () => {},
                                                                                        target: 'foreground_active',
                                                                                    },
                                                                                    OUTAPP_INTERACT: {
                                                                                        actions: (e, s) => {
                                                                                            t.activeInBackground(
                                                                                                s.isOsEvt
                                                                                            );
                                                                                        },
                                                                                        target: 'background_active',
                                                                                    },
                                                                                    APP_UNLOCK: {
                                                                                        target: 'foreground_active',
                                                                                    },
                                                                                },
                                                                            },
                                                                        },
                                                                        on: {
                                                                            RESET: {
                                                                                target: 'unset',
                                                                                actions: () => {},
                                                                            },
                                                                        },
                                                                    })
                                                                );
                                                                var e, t;
                                                            }
                                                            isUnset() {
                                                                var e;
                                                                return (
                                                                    'unset' ===
                                                                    (null === (e = this.interpreter) || void 0 === e
                                                                        ? void 0
                                                                        : e.state.value)
                                                                );
                                                            }
                                                            onceDeactive(e) {
                                                                var t;
                                                                if (
                                                                    'background_deactive' ===
                                                                    (null === (t = this.interpreter) || void 0 === t
                                                                        ? void 0
                                                                        : t.state.value)
                                                                )
                                                                    e();
                                                                else {
                                                                    let t = () => {
                                                                        var s, i;
                                                                        'background_deactive' ===
                                                                            (null === (s = this.interpreter) ||
                                                                            void 0 === s
                                                                                ? void 0
                                                                                : s.state.value) &&
                                                                            (null === (i = this.interpreter) ||
                                                                                void 0 === i ||
                                                                                i.off(t),
                                                                            e());
                                                                    };
                                                                    this.onChange(t);
                                                                }
                                                            }
                                                        })
                                                    ) || nd)
                                            ) || nd)
                                    ) || nd)
                            ) || nd)
                    ) || nd;
                var od,
                    dd = s('4zJP');
                const ld = new Map([
                    ['0', 'LOCK_SCREEN'],
                    ['1', 'UNLOCK_SCREEN'],
                    ['2', 'LOG_ON'],
                    ['3', 'LOG_OFF'],
                    ['4', 'SLEEP'],
                    ['5', 'RESUME'],
                ]);
                let cd =
                    Object(d.injectable)()(
                        (od =
                            Object(L.h)()(
                                (od =
                                    Object(L.g)()(
                                        (od =
                                            Object(d.singleton)(sd.a)(
                                                (od =
                                                    (function (e, t) {
                                                        return Object(d.inject)(l.a)(e, void 0, 0);
                                                    })(
                                                        (od =
                                                            (function (e, t) {
                                                                return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                                            })(
                                                                (od =
                                                                    (function (e, t) {
                                                                        return Object(d.inject)(Qo)(e, void 0, 2);
                                                                    })(
                                                                        (od =
                                                                            Reflect.metadata(
                                                                                'design:type',
                                                                                Function
                                                                            )(
                                                                                (od =
                                                                                    Reflect.metadata(
                                                                                        'design:paramtypes',
                                                                                        [
                                                                                            void 0 === l.a
                                                                                                ? Object
                                                                                                : l.a,
                                                                                            void 0 === N.ZLoggerFactory
                                                                                                ? Object
                                                                                                : N.ZLoggerFactory,
                                                                                            void 0 === Qo ? Object : Qo,
                                                                                        ]
                                                                                    )(
                                                                                        (od = class {
                                                                                            constructor(e, t, s) {
                                                                                                (this.config = e),
                                                                                                    (this.service = s),
                                                                                                    (this.logger =
                                                                                                        void 0),
                                                                                                    (this.machine =
                                                                                                        void 0),
                                                                                                    (this._ipc =
                                                                                                        void 0),
                                                                                                    (this.authenticated =
                                                                                                        void 0),
                                                                                                    (this.appLocked =
                                                                                                        void 0),
                                                                                                    (this.isRunning =
                                                                                                        void 0),
                                                                                                    (this.lastConfig =
                                                                                                        void 0),
                                                                                                    (this.onAppLock =
                                                                                                        () => {
                                                                                                            this.logger.zsymb(
                                                                                                                0,
                                                                                                                9679,
                                                                                                                30003,
                                                                                                                'app locked',
                                                                                                                this
                                                                                                                    .authenticated
                                                                                                            ),
                                                                                                                (this.appLocked =
                                                                                                                    !0),
                                                                                                                this
                                                                                                                    .authenticated &&
                                                                                                                    this.machine.send(
                                                                                                                        {
                                                                                                                            type: 'APP_LOCK',
                                                                                                                            status: 2,
                                                                                                                        }
                                                                                                                    );
                                                                                                        }),
                                                                                                    (this.onAppUnLock =
                                                                                                        () => {
                                                                                                            this.logger.zsymb(
                                                                                                                0,
                                                                                                                9679,
                                                                                                                30004,
                                                                                                                'app unlocked',
                                                                                                                this
                                                                                                                    .authenticated
                                                                                                            ),
                                                                                                                (this.appLocked =
                                                                                                                    !1),
                                                                                                                this
                                                                                                                    .authenticated &&
                                                                                                                    this.machine.send(
                                                                                                                        {
                                                                                                                            type: 'APP_UNLOCK',
                                                                                                                            status: 0,
                                                                                                                        }
                                                                                                                    );
                                                                                                        }),
                                                                                                    (this.onConfigChanged =
                                                                                                        (e) => {
                                                                                                            We.default
                                                                                                                .stagingAccount &&
                                                                                                                (window._activeController =
                                                                                                                    this),
                                                                                                                e &&
                                                                                                                    this.config.set(
                                                                                                                        'online_configs',
                                                                                                                        e
                                                                                                                    );
                                                                                                            const t =
                                                                                                                this.isConfigsReallyChanged();
                                                                                                            if (
                                                                                                                (this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    9679,
                                                                                                                    30005,
                                                                                                                    'onConfigChanged',
                                                                                                                    t
                                                                                                                ),
                                                                                                                !t)
                                                                                                            )
                                                                                                                return;
                                                                                                            this.lastConfig =
                                                                                                                this.config.get(
                                                                                                                    'online_configs'
                                                                                                                );
                                                                                                            const s =
                                                                                                                this.config.get(
                                                                                                                    'online_configs.idle_time'
                                                                                                                );
                                                                                                            d.ModuleContainer.resolve(
                                                                                                                Vo.c
                                                                                                            ).updateIdleTimeout(
                                                                                                                s / 1e3
                                                                                                            ),
                                                                                                                this.service.onConfigUpdated(),
                                                                                                                this.isEnable()
                                                                                                                    ? this.setup()
                                                                                                                    : this.onDispose();
                                                                                                        }),
                                                                                                    (this.onLostFocus =
                                                                                                        async (e) => {
                                                                                                            const {
                                                                                                                scope: t,
                                                                                                                reason: s,
                                                                                                            } =
                                                                                                                e.payload;
                                                                                                            'app' ===
                                                                                                                t &&
                                                                                                                (this.logger.zsymb(
                                                                                                                    0,
                                                                                                                    9679,
                                                                                                                    30006,
                                                                                                                    'lost focus',
                                                                                                                    s
                                                                                                                ),
                                                                                                                'no-action-timeout' !=
                                                                                                                    s ||
                                                                                                                (await this.service.isUserHasAction(
                                                                                                                    this
                                                                                                                        .idleTime
                                                                                                                ))
                                                                                                                    ? this.machine.send(
                                                                                                                          {
                                                                                                                              type: 'LOST_FOCUS',
                                                                                                                          }
                                                                                                                      )
                                                                                                                    : this.machine.send(
                                                                                                                          {
                                                                                                                              type: 'IDLE',
                                                                                                                              status: 0,
                                                                                                                          }
                                                                                                                      ));
                                                                                                        }),
                                                                                                    (this.onFocus = (
                                                                                                        e
                                                                                                    ) => {
                                                                                                        this.isUsingApp() &&
                                                                                                            (this.logger.zsymb(
                                                                                                                0,
                                                                                                                9679,
                                                                                                                30007,
                                                                                                                'active-deactive focus'
                                                                                                            ),
                                                                                                            this.machine.send(
                                                                                                                {
                                                                                                                    type: 'FOCUS',
                                                                                                                }
                                                                                                            ));
                                                                                                    }),
                                                                                                    (this.onActiveFromBackground =
                                                                                                        (e, t) => {
                                                                                                            this.isUsingApp() &&
                                                                                                                this.machine.send(
                                                                                                                    {
                                                                                                                        type: 'OUTAPP_INTERACT',
                                                                                                                        isOsEvt:
                                                                                                                            t,
                                                                                                                    }
                                                                                                                );
                                                                                                        }),
                                                                                                    (this.onDeactiveFromBackground =
                                                                                                        (e, t) => {
                                                                                                            this.logger.zsymb(
                                                                                                                0,
                                                                                                                9679,
                                                                                                                30008,
                                                                                                                'onDeactiveFromBackground',
                                                                                                                t
                                                                                                            ),
                                                                                                                this.isUsingApp() &&
                                                                                                                    this.machine.send(
                                                                                                                        {
                                                                                                                            type: 'OUTAPP_IDLE',
                                                                                                                            status: t,
                                                                                                                        }
                                                                                                                    );
                                                                                                        }),
                                                                                                    (this.machine =
                                                                                                        d.ModuleContainer.resolveToken(
                                                                                                            ad
                                                                                                        )),
                                                                                                    (this.logger =
                                                                                                        t.createZLogger(
                                                                                                            kt.b
                                                                                                                .activeDeactive,
                                                                                                            [
                                                                                                                kt.b
                                                                                                                    .controller,
                                                                                                            ]
                                                                                                        )),
                                                                                                    (this.config = e),
                                                                                                    (this.service = s),
                                                                                                    (this.authenticated =
                                                                                                        !1),
                                                                                                    (this.appLocked =
                                                                                                        !1),
                                                                                                    (this.isRunning =
                                                                                                        !1),
                                                                                                    (this.lastConfig =
                                                                                                        {}),
                                                                                                    wt.p.listenEvent(
                                                                                                        wt.m,
                                                                                                        this
                                                                                                            .onConfigChanged
                                                                                                    );
                                                                                                try {
                                                                                                    this.machine.create();
                                                                                                } catch (i) {
                                                                                                    return void this.logger.zsymb(
                                                                                                        18,
                                                                                                        9679,
                                                                                                        3e4,
                                                                                                        () => [
                                                                                                            'create error',
                                                                                                            {
                                                                                                                error: i,
                                                                                                            },
                                                                                                        ]
                                                                                                    );
                                                                                                }
                                                                                            }
                                                                                            get ipc() {
                                                                                                if (!this._ipc) {
                                                                                                    const {
                                                                                                        ipcRenderer: e,
                                                                                                    } = s('vbkW');
                                                                                                    this._ipc = e;
                                                                                                }
                                                                                                return this._ipc;
                                                                                            }
                                                                                            createMachine() {}
                                                                                            onStart() {
                                                                                                this.isEnable() ||
                                                                                                    this.logger.zsymb(
                                                                                                        0,
                                                                                                        9679,
                                                                                                        30001,
                                                                                                        'feature is not enable'
                                                                                                    );
                                                                                            }
                                                                                            setup() {
                                                                                                if (
                                                                                                    (this.logger.zsymb(
                                                                                                        0,
                                                                                                        9679,
                                                                                                        30002,
                                                                                                        'setup',
                                                                                                        this.isRunning
                                                                                                    ),
                                                                                                    this.clearBackgroundTracking(),
                                                                                                    this.isEnableBackgroundTrack() &&
                                                                                                        this.setupBackgroundTracking(),
                                                                                                    this.isRunning)
                                                                                                )
                                                                                                    return;
                                                                                                (this.isRunning = !0),
                                                                                                    this.machine.start();
                                                                                                const e =
                                                                                                    d.ModuleContainer.resolve(
                                                                                                        Vo.c
                                                                                                    );
                                                                                                this.machine.isUnset() &&
                                                                                                    (e.isAppFocus()
                                                                                                        ? this.machine.send(
                                                                                                              {
                                                                                                                  type: 'FOCUS',
                                                                                                              }
                                                                                                          )
                                                                                                        : this.machine.send(
                                                                                                              {
                                                                                                                  type: 'LOST_FOCUS',
                                                                                                              }
                                                                                                          )),
                                                                                                    e.addEventListener(
                                                                                                        Vo.b.LostFocus,
                                                                                                        this.onLostFocus
                                                                                                    ),
                                                                                                    e.addEventListener(
                                                                                                        Vo.b.Focus,
                                                                                                        this.onFocus
                                                                                                    ),
                                                                                                    (this.appLocked =
                                                                                                        wt.p.getAppLock()),
                                                                                                    dd.b.on(
                                                                                                        dd.a.APP_LOCKED,
                                                                                                        this.onAppLock
                                                                                                    ),
                                                                                                    dd.b.on(
                                                                                                        dd.a
                                                                                                            .APP_UNLOCKED,
                                                                                                        this.onAppUnLock
                                                                                                    );
                                                                                            }
                                                                                            onAuthenticated() {
                                                                                                (this.authenticated =
                                                                                                    !0),
                                                                                                    this.isEnable() &&
                                                                                                        this.service.onLogin();
                                                                                            }
                                                                                            onDispose() {
                                                                                                if (!this.isRunning)
                                                                                                    return;
                                                                                                (this.isRunning = !1),
                                                                                                    this.machine.stop();
                                                                                                const e =
                                                                                                    d.ModuleContainer.resolve(
                                                                                                        Vo.c
                                                                                                    );
                                                                                                e.removeEventListener(
                                                                                                    Vo.b.LostFocus,
                                                                                                    this.onLostFocus
                                                                                                ),
                                                                                                    e.removeEventListener(
                                                                                                        Vo.b.Focus,
                                                                                                        this.onFocus
                                                                                                    ),
                                                                                                    dd.b.off(
                                                                                                        dd.a.APP_LOCKED,
                                                                                                        this.onAppLock
                                                                                                    ),
                                                                                                    dd.b.off(
                                                                                                        dd.a
                                                                                                            .APP_UNLOCKED,
                                                                                                        this.onAppUnLock
                                                                                                    ),
                                                                                                    this.clearBackgroundTracking();
                                                                                            }
                                                                                            isConfigsReallyChanged() {
                                                                                                for (const e in this.config.get(
                                                                                                    'online_configs'
                                                                                                ))
                                                                                                    if (
                                                                                                        e &&
                                                                                                        this.lastConfig[
                                                                                                            e
                                                                                                        ] !==
                                                                                                            this.config.get(
                                                                                                                `online_configs.${e}`
                                                                                                            )
                                                                                                    )
                                                                                                        return !0;
                                                                                                return !1;
                                                                                            }
                                                                                            setupBackgroundTracking() {}
                                                                                            clearBackgroundTracking() {}
                                                                                            onUserSendMessage() {
                                                                                                this.isEnable() &&
                                                                                                    this.machine.send(
                                                                                                        'INAPP_INTERACT'
                                                                                                    );
                                                                                            }
                                                                                            onUserLogOff() {
                                                                                                return new Promise(
                                                                                                    (e) => {
                                                                                                        if (
                                                                                                            !this.isEnable() ||
                                                                                                            !this.isUsingApp()
                                                                                                        )
                                                                                                            return e(
                                                                                                                !1
                                                                                                            );
                                                                                                        this.machine.onceDeactive(
                                                                                                            () => {
                                                                                                                e(!0);
                                                                                                            }
                                                                                                        ),
                                                                                                            this.machine.send(
                                                                                                                {
                                                                                                                    type: 'LOG_OFF',
                                                                                                                    status: 3,
                                                                                                                }
                                                                                                            ),
                                                                                                            this.onDispose(),
                                                                                                            setTimeout(
                                                                                                                () => {
                                                                                                                    e(
                                                                                                                        !0
                                                                                                                    );
                                                                                                                },
                                                                                                                1e3
                                                                                                            );
                                                                                                    }
                                                                                                );
                                                                                            }
                                                                                            onOSEvent(e) {
                                                                                                if (!this.isEnable())
                                                                                                    return;
                                                                                                const t = ld.get(e);
                                                                                                Je.default.send(
                                                                                                    Ze.GeneralActions
                                                                                                        .USER_ACTIVE_CHANGED,
                                                                                                    t
                                                                                                ),
                                                                                                    this.logger.zsymb(
                                                                                                        3,
                                                                                                        9679,
                                                                                                        30009,
                                                                                                        'handle event os ',
                                                                                                        t
                                                                                                    );
                                                                                            }
                                                                                            isUsingApp() {
                                                                                                const e =
                                                                                                    this.appLocked ||
                                                                                                    wt.p.getWaitRestart();
                                                                                                return (
                                                                                                    this
                                                                                                        .authenticated &&
                                                                                                    !e
                                                                                                );
                                                                                            }
                                                                                            isEnable() {
                                                                                                return this.config.get(
                                                                                                    'online_configs.enable_active_deactive_v2'
                                                                                                );
                                                                                            }
                                                                                            isEnableBackgroundTrack() {
                                                                                                return !1;
                                                                                            }
                                                                                            isEnableFullBackgroundTrack() {
                                                                                                return !1;
                                                                                            }
                                                                                            get pingInterval() {
                                                                                                return this.config.get(
                                                                                                    'online_configs.update_action_interval'
                                                                                                );
                                                                                            }
                                                                                            get idleTime() {
                                                                                                return this.config.get(
                                                                                                    'online_configs.idle_time'
                                                                                                );
                                                                                            }
                                                                                        })
                                                                                    ) || od)
                                                                            ) || od)
                                                                    ) || od)
                                                            ) || od)
                                                    ) || od)
                                            ) || od)
                                    ) || od)
                            ) || od)
                    ) || od;
                var hd,
                    ud,
                    gd,
                    md,
                    pd = s('yK2b');
                !(function (e) {
                    (e[(e.ActiveBackground = 0)] = 'ActiveBackground'),
                        (e[(e.KeepActiveForeground = 1)] = 'KeepActiveForeground'),
                        (e[(e.FirstActiveForeground = 2)] = 'FirstActiveForeground'),
                        (e[(e.ToBackground = 3)] = 'ToBackground'),
                        (e[(e.KeepActiveBackground = 4)] = 'KeepActiveBackground');
                })(ud || (ud = {})),
                    (function (e) {
                        (e[(e.Idle = 0)] = 'Idle'),
                            (e[(e.ComputerLock = 1)] = 'ComputerLock'),
                            (e[(e.AppLock = 2)] = 'AppLock'),
                            (e[(e.LogOff = 3)] = 'LogOff');
                    })(gd || (gd = {})),
                    (function (e) {
                        (e[(e.Foreground = 0)] = 'Foreground'),
                            (e[(e.BackgroundActive = 1)] = 'BackgroundActive'),
                            (e[(e.BackgroundDeactive = 2)] = 'BackgroundDeactive');
                    })(md || (md = {}));
                const fd = { [md.Foreground]: ud.KeepActiveForeground, [md.BackgroundActive]: ud.KeepActiveBackground };
                let vd =
                    Object(d.injectable)()(
                        (hd =
                            (function (e, t) {
                                return Object(d.inject)(l.a)(e, void 0, 0);
                            })(
                                (hd =
                                    (function (e, t) {
                                        return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (hd =
                                            (function (e, t) {
                                                return Object(d.inject)(Vo.c)(e, void 0, 2);
                                            })(
                                                (hd =
                                                    Reflect.metadata(
                                                        'design:type',
                                                        Function
                                                    )(
                                                        (hd =
                                                            Reflect.metadata('design:paramtypes', [
                                                                void 0 === l.a ? Object : l.a,
                                                                void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                                void 0 === Vo.c ? Object : Vo.c,
                                                            ])(
                                                                (hd = class {
                                                                    constructor(e, t, s) {
                                                                        (this.config = e),
                                                                            (this.focusManager = s),
                                                                            (this.logger = void 0),
                                                                            (this._ipc = void 0),
                                                                            (this.pingTimer = void 0),
                                                                            (this.deactiveTimer = void 0),
                                                                            (this.status = void 0),
                                                                            (this.configChanged = void 0),
                                                                            (this.logger = t.createZLogger(
                                                                                kt.b.activeDeactive,
                                                                                [kt.b.service]
                                                                            )),
                                                                            (this.status = md.Foreground),
                                                                            (this.configChanged = !1);
                                                                    }
                                                                    get ipc() {
                                                                        if (!this._ipc) {
                                                                            const { ipcRenderer: e } = s('vbkW');
                                                                            this._ipc = e;
                                                                        }
                                                                        return this._ipc;
                                                                    }
                                                                    get pingInterval() {
                                                                        return this.config.get(
                                                                            'online_configs.update_action_interval'
                                                                        );
                                                                    }
                                                                    get deactiveTimeout() {
                                                                        return this.config.get(
                                                                            'online_configs.idleTime'
                                                                        );
                                                                    }
                                                                    get enableSendDeactiveOnBgIdle() {
                                                                        return this.config.get(
                                                                            'online_configs.enable_deact_on_bg_idle'
                                                                        );
                                                                    }
                                                                    get enableSendDeactiveOnFgIdle() {
                                                                        return this.config.get(
                                                                            'online_configs.enable_deact_on_fg_idle'
                                                                        );
                                                                    }
                                                                    get enSendActiveToKeepAlive() {
                                                                        return this.config.get(
                                                                            'online_configs.send_active_to_keep_live'
                                                                        );
                                                                    }
                                                                    get enActiveUsingSocket() {
                                                                        return this.config.get(
                                                                            'online_configs.send_active_using_socket'
                                                                        );
                                                                    }
                                                                    get enableBackgroundTracking() {
                                                                        return this.config.get(
                                                                            'online_configs.enable_background_tracking'
                                                                        );
                                                                    }
                                                                    get enableFeature() {
                                                                        return this.config.get(
                                                                            'online_configs.enable_active_deactive_v2'
                                                                        );
                                                                    }
                                                                    get enableFullBackgroundTrack() {
                                                                        return !1;
                                                                    }
                                                                    onLogin() {
                                                                        this.sendActiveToServer(ud.ActiveBackground);
                                                                    }
                                                                    startTrackIdle(e) {
                                                                        void 0 === e && (e = !0),
                                                                            this.enableBackgroundTracking
                                                                                ? this.logger.zsymb(
                                                                                      0,
                                                                                      9648,
                                                                                      30001,
                                                                                      'startTrackIdle'
                                                                                  )
                                                                                : this.logger.zsymb(
                                                                                      0,
                                                                                      9648,
                                                                                      3e4,
                                                                                      'in startTrackIdle but flag off'
                                                                                  );
                                                                    }
                                                                    stopTrackIdle() {
                                                                        this.logger.zsymb(
                                                                            0,
                                                                            9648,
                                                                            30002,
                                                                            'stopTrackIdle'
                                                                        );
                                                                    }
                                                                    startForegroundMode() {
                                                                        (this.status = md.Foreground),
                                                                            this.sendActiveToServer(
                                                                                ud.FirstActiveForeground
                                                                            ),
                                                                            this.clearPingTimer(),
                                                                            this.createPingTimer(),
                                                                            this.enableFullBackgroundTrack ||
                                                                                this.stopTrackIdle();
                                                                    }
                                                                    keepForegroundMode() {
                                                                        this.sendActiveToServer(
                                                                            ud.KeepActiveForeground,
                                                                            { additionText: '[Send Msg] ' }
                                                                        );
                                                                    }
                                                                    startBackgroundMode() {
                                                                        (this.status = md.BackgroundActive),
                                                                            this.clearPingTimer(),
                                                                            this.startTrackIdle();
                                                                    }
                                                                    activeInBackground(e) {
                                                                        const t = e
                                                                            ? ud.ActiveBackground
                                                                            : ud.KeepActiveBackground;
                                                                        this.pingTimer
                                                                            ? this.logger.zsymb(
                                                                                  0,
                                                                                  9648,
                                                                                  30003,
                                                                                  'user action bg but dont need ping because in ping interval'
                                                                              )
                                                                            : this.sendActiveToServer(t);
                                                                    }
                                                                    startDeactive(e) {
                                                                        let t = -1;
                                                                        switch (e) {
                                                                            case 0:
                                                                                t = gd.Idle;
                                                                                break;
                                                                            case 1:
                                                                                t = gd.ComputerLock;
                                                                                break;
                                                                            case 2:
                                                                                t = gd.AppLock;
                                                                                break;
                                                                            case 3:
                                                                                t = gd.LogOff;
                                                                        }
                                                                        this.clearPingTimer(),
                                                                            -1 !== t &&
                                                                                this.canSendDeactive(t) &&
                                                                                this.sendDeactiveToServer(t),
                                                                            this.status === md.Foreground &&
                                                                                t == gd.Idle &&
                                                                                this.startTrackIdle(!1),
                                                                            (t != gd.ComputerLock && t != gd.AppLock) ||
                                                                                this.stopTrackIdle(),
                                                                            (this.status = md.BackgroundDeactive);
                                                                    }
                                                                    onConfigUpdated() {
                                                                        (this.configChanged = !0),
                                                                            this.enableFeature || this.clearPingTimer();
                                                                    }
                                                                    getStatus() {
                                                                        return this.status;
                                                                    }
                                                                    createPingTimer() {
                                                                        !this.pingTimer &&
                                                                            this.enableFeature &&
                                                                            (this.logger.zsymb(
                                                                                0,
                                                                                9648,
                                                                                30004,
                                                                                'createPingTimer'
                                                                            ),
                                                                            (this.configChanged = !1),
                                                                            (this.pingTimer = setInterval(() => {
                                                                                const e = fd[this.status];
                                                                                e
                                                                                    ? this.sendPingActive(e)
                                                                                    : this.logger.zsymb(
                                                                                          0,
                                                                                          9648,
                                                                                          30005,
                                                                                          'call ping invalid state!'
                                                                                      ),
                                                                                    this.configChanged &&
                                                                                        (this.clearPingTimer(),
                                                                                        this.createPingTimer());
                                                                            }, this.pingInterval)));
                                                                    }
                                                                    clearPingTimer() {
                                                                        this.logger.zsymb(
                                                                            0,
                                                                            9648,
                                                                            30006,
                                                                            'clearPingTimer'
                                                                        ),
                                                                            clearInterval(this.pingTimer),
                                                                            (this.pingTimer = null);
                                                                    }
                                                                    async isUserHasAction(e) {
                                                                        return this.focusManager.getAppIdleTime() < e;
                                                                    }
                                                                    canSendDeactive(e) {
                                                                        return (
                                                                            e !== gd.Idle ||
                                                                            (this.status === md.Foreground &&
                                                                                this.enableSendDeactiveOnFgIdle) ||
                                                                            (this.status === md.BackgroundActive &&
                                                                                this.enableSendDeactiveOnBgIdle)
                                                                        );
                                                                    }
                                                                    async sendPingActive(e) {
                                                                        (await this.isUserHasAction(this.pingInterval))
                                                                            ? this.sendActiveToServer(e)
                                                                            : this.logger.zsymb(
                                                                                  3,
                                                                                  9648,
                                                                                  30007,
                                                                                  "call ping but discard, because the user don't have action!"
                                                                              );
                                                                    }
                                                                    sendActiveToServer(e, t) {
                                                                        void 0 === t && (t = { additionText: '' });
                                                                        const { additionText: s } = t;
                                                                        if (
                                                                            !this.enActiveUsingSocket ||
                                                                            pd.default.getMsgSrcType() !==
                                                                                v.MsgSources.SOCKET
                                                                        )
                                                                            return this.sendActiveViaHttp(e, s);
                                                                        let i = null;
                                                                        return (
                                                                            (i = this.enSendActiveToKeepAlive
                                                                                ? Es.default.pingActiveViaKeepAlive(e)
                                                                                : Es.default.pingActive(e)),
                                                                            i
                                                                                .then(
                                                                                    () => (
                                                                                        this.logger.zsymb(
                                                                                            3,
                                                                                            9648,
                                                                                            30008,
                                                                                            '{}Call active app SUCCESS: socket - {}',
                                                                                            s,
                                                                                            e
                                                                                        ),
                                                                                        !0
                                                                                    )
                                                                                )
                                                                                .catch(
                                                                                    (t) => (
                                                                                        this.logger.zsymb(
                                                                                            21,
                                                                                            9648,
                                                                                            30009,
                                                                                            '{}Call active fail: socket - {} - {}',
                                                                                            s,
                                                                                            e,
                                                                                            JSON.stringify(t)
                                                                                        ),
                                                                                        this.sendActiveViaHttp(e)
                                                                                    )
                                                                                )
                                                                        );
                                                                    }
                                                                    sendActiveViaHttp(e, t) {
                                                                        return (
                                                                            void 0 === t && (t = ''),
                                                                            new Promise((s) => {
                                                                                Yi.default
                                                                                    .active(e)
                                                                                    .then(Zi.a)
                                                                                    .then(() => {
                                                                                        this.logger.zsymb(
                                                                                            3,
                                                                                            9648,
                                                                                            30010,
                                                                                            '{}Call active app SUCCESS: http - {}',
                                                                                            t,
                                                                                            e
                                                                                        ),
                                                                                            s(!0);
                                                                                    })
                                                                                    .catch((i) => {
                                                                                        this.logger.zsymb(
                                                                                            21,
                                                                                            9648,
                                                                                            30011,
                                                                                            '{}Call active fail: http - {} - {}',
                                                                                            t,
                                                                                            e,
                                                                                            JSON.stringify(i)
                                                                                        ),
                                                                                            s(!1);
                                                                                    });
                                                                            })
                                                                        );
                                                                    }
                                                                    sendDeactiveToServer(e) {
                                                                        return Yi.default
                                                                            .deactiveV2()
                                                                            .then(Zi.a)
                                                                            .then(
                                                                                () => (
                                                                                    this.logger.zsymb(
                                                                                        3,
                                                                                        9648,
                                                                                        30012,
                                                                                        'Call deactive app SUCCESS {}',
                                                                                        e
                                                                                    ),
                                                                                    !0
                                                                                )
                                                                            )
                                                                            .catch(
                                                                                (e) => (
                                                                                    this.logger.zsymb(
                                                                                        21,
                                                                                        9648,
                                                                                        30013,
                                                                                        'Call deactive fail: ',
                                                                                        JSON.stringify(e)
                                                                                    ),
                                                                                    !1
                                                                                )
                                                                            );
                                                                    }
                                                                })
                                                            ) || hd)
                                                    ) || hd)
                                            ) || hd)
                                    ) || hd)
                            ) || hd)
                    ) || hd;
                d.ModuleContainer.registerSingleton(Ho, td),
                    d.ModuleContainer.registerSingleton(Vo.c, qo),
                    d.ModuleContainer.registerSingleton(Qo, vd),
                    d.ModuleContainer.resolve(Vo.c),
                    d.ModuleContainer.resolveToken(Yo),
                    d.ModuleContainer.resolveToken(cd);
                var bd = s('Vp9m');
                let yd;
                !(function (e) {
                    e.lockSendMsg = 'lockSendMsg';
                })(yd || (yd = {}));
                var Id,
                    _d = s('MnxE'),
                    Md = s('NDwn');
                Object(pt.b)(Js.b)(
                    (Id =
                        Reflect.metadata(
                            'design:type',
                            Function
                        )(
                            (Id =
                                Reflect.metadata(
                                    'design:paramtypes',
                                    []
                                )(
                                    (Id = class {
                                        get Logger() {
                                            return (
                                                this._Logger ||
                                                    (this._Logger = d.ModuleContainer.resolve(
                                                        N.ZLoggerFactory
                                                    ).createZLogger(kt.b.onlyAdminChatSettings, [this.name])),
                                                this._Logger
                                            );
                                        }
                                        constructor() {
                                            (this.type = void 0),
                                                (this.name = void 0),
                                                (this.key = void 0),
                                                (this.settings = new Map()),
                                                (this.me = ''),
                                                (this._Logger = void 0),
                                                (this.name = Js.a),
                                                (this.key = Js.a),
                                                1 ===
                                                    We.default.only_admin_chat_setting.enable_only_admin_chat_setting &&
                                                    this._addPublicGroupSettingEventListener(),
                                                this._addPublicFriendEventListener(),
                                                Md.a || _d.a.signalCallback(this.onSettingsUpdate.bind(this));
                                        }
                                        _filterSettingKeys(e, t, s) {
                                            let i = { lockSendMsg: !1 };
                                            for (let n in e)
                                                Object.keys(yd).includes(n) &&
                                                    n === yd.lockSendMsg &&
                                                    (i[yd.lockSendMsg] = !t && !s && Boolean(e[yd.lockSendMsg]));
                                            return i;
                                        }
                                        _onUpdateSettings(e, t, s, i) {
                                            this.me || (this.me = rt.default.getUidMe());
                                            const n = this.me === t,
                                                r = this._filterSettingKeys(i, n, s);
                                            return this.settings.set(e, r), Object(Pe.g)(this.name, e), r;
                                        }
                                        showNoti(e) {
                                            if ('TOAST' === e.type)
                                                bd.ZToastManagerHolder.getZToastManagerByWindowId(
                                                    e.windowId || Mt.c
                                                ).show(Object(i.a)({}, e.config));
                                        }
                                        verifySetting(e) {
                                            const { convId: t, field: s, showNoti: i } = e,
                                                n = this.settings.get(t);
                                            return n
                                                ? (i && i.triggerValue === n[s] && this.showNoti(i), n && n[s])
                                                : null;
                                        }
                                        onSettingsUpdate(e, t) {
                                            let s = this.settings.get(e) || { lockSendMsg: !1 };
                                            for (let i in t) Object.keys(yd).includes(i) && (s[i] = t[i]);
                                            this.settings.set(e, s), Object(Pe.g)(this.name, e);
                                        }
                                        _addPublicGroupSettingEventListener() {
                                            jt.default.subscribeEventGroup(v.EventGroup.CHANGE_OWNER, (e) => {
                                                const { groupId: t } = e;
                                                t && this.onLoadGroupSetting(t);
                                            }),
                                                jt.default.subscribeEventGroup(v.EventGroup.ADD_ADMIN, (e) => {
                                                    const { groupId: t } = e;
                                                    t && this.onLoadGroupSetting(t);
                                                }),
                                                jt.default.subscribeEventGroup(v.EventGroup.REMOVE_ADMIN, (e) => {
                                                    const { groupId: t } = e;
                                                    t && this.onLoadGroupSetting(t);
                                                }),
                                                jt.default.subscribeEventGroup(v.EventGroup.GROUP_INFO_CHANGED, (e) => {
                                                    if (null != e && e.length)
                                                        for (let t = 0; t < e.length; t++)
                                                            this.onLoadGroupSetting(e[t]);
                                                }),
                                                bs.default.subscribe(Mt.a.CHILD_WINDOW_ALIVE, (e) => {
                                                    null != e && e.windowId && this.onLoadSetting(e.windowId);
                                                }),
                                                Je.default.subscribe((e, t) => {
                                                    switch (e) {
                                                        case Ze.FetchActions.UPDATE_GROUP_SETTING: {
                                                            var s, i;
                                                            const e =
                                                                null != t &&
                                                                null !== (s = t.data) &&
                                                                void 0 !== s &&
                                                                null !== (i = s.groupId) &&
                                                                void 0 !== i &&
                                                                i.startsWith('g')
                                                                    ? t.data.groupId
                                                                    : 'g' + t.data.groupId;
                                                            e && this.onLoadGroupSetting(e);
                                                            break;
                                                        }
                                                    }
                                                });
                                        }
                                        updateFriendBLockSetting(e, t) {
                                            const s = t || rt.default.isBlocked(e),
                                                i =
                                                    1 ===
                                                    We.default.block_msg_call_setting.enable_block_msg_call_setting;
                                            this.onSettingsUpdate(e, { [yd.lockSendMsg]: Boolean(s) && i });
                                        }
                                        _addPublicFriendEventListener() {
                                            rt.default.subscribeEventFriend(v.EventFriend.BLOCK_FRIEND, (e) => {
                                                this.updateFriendBLockSetting(e.userId, !0);
                                            }),
                                                rt.default.subscribeEventFriend(v.EventFriend.UNBLOCK_FRIEND, (e) => {
                                                    this.updateFriendBLockSetting(e.userId, !1);
                                                }),
                                                Je.default.subscribe((e, t) => {
                                                    if (e === Ze.FriendsAction.FRIENDS_CHANGE_INFO)
                                                        t &&
                                                            Array.isArray(t) &&
                                                            t.forEach((e) => {
                                                                let { userId: t } = e;
                                                                this.updateFriendBLockSetting(t);
                                                            });
                                                });
                                        }
                                        _checkGroupAdmin(e) {
                                            var t;
                                            return (
                                                this.me || (this.me = rt.default.getUidMe()),
                                                (null == e || null === (t = e.topMember) || void 0 === t
                                                    ? void 0
                                                    : t.filter((e) => e.id === this.me && e.isAdmin).length) > 0
                                            );
                                        }
                                        onLoadGroupSetting(e) {
                                            return new Promise((t, s) => {
                                                jt.default
                                                    .getFullInfoGroupById(e)
                                                    .then((s) => {
                                                        if (!s)
                                                            return (
                                                                this.Logger.zsymb(
                                                                    18,
                                                                    11223,
                                                                    3e4,
                                                                    '[GroupSetting]: Load GroupInfo from manager faily ' +
                                                                        s +
                                                                        ', GroupId: ' +
                                                                        e
                                                                ),
                                                                t(null)
                                                            );
                                                        const i = s.setting,
                                                            n = s.creatorId,
                                                            r = this._checkGroupAdmin(s),
                                                            a = this._onUpdateSettings(e, n, r, i);
                                                        i &&
                                                            !i.hasOwnProperty('lockSendMsg') &&
                                                            this.Logger.zsymb(
                                                                18,
                                                                11223,
                                                                30001,
                                                                '[GroupSetting]: Dont have field lockSendMsg in setting data'
                                                            ),
                                                            t(a);
                                                    })
                                                    .catch((s) => {
                                                        this.Logger.zsymb(
                                                            18,
                                                            11223,
                                                            30002,
                                                            '[GroupSetting]: Have error in loadiing GroupInfo from manager: ' +
                                                                JSON.stringify(s) +
                                                                ', GroupId: ' +
                                                                e
                                                        ),
                                                            t(null);
                                                    });
                                            });
                                        }
                                        async onLoadSetting(e) {
                                            return e.startsWith('g')
                                                ? 1 !==
                                                  We.default.only_admin_chat_setting.enable_only_admin_chat_setting
                                                    ? null
                                                    : await this.onLoadGroupSetting(e)
                                                : (this.updateFriendBLockSetting(e),
                                                  Md.a ? null : void _d.a.signalIfUnlock(e));
                                        }
                                        init(e) {
                                            throw new Error('Method not  .');
                                        }
                                        getCurrentItem(e) {
                                            return this.settings.get(e);
                                        }
                                        getItem(e, t) {
                                            return this.settings.get(e.key);
                                        }
                                        getList(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetItemFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        onGetListFailure(e, t) {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultItem() {
                                            throw new Error('Method not implemented.');
                                        }
                                        getDefaultList() {
                                            throw new Error('Method not implemented.');
                                        }
                                    })
                                ) || Id)
                        ) || Id)
                );
                const Cd = Object(d.define)('media-primary-key-convertor');
                var Td;
                let Od =
                    Object(d.injectable)()(
                        (Td = class {
                            async toMediaPKFromMessagePK(e) {
                                if (!e) return '';
                                const t = await P.a.getInstance().Core.Message.get(e);
                                return t && (t.cliMsgId || t.fromUid || t.toUid)
                                    ? `${t.cliMsgId}_${t.fromUid}_${t.toUid}`
                                    : '';
                            }
                            async toMessagePKFromMediaPK(e) {
                                const [t, s, i] = this._getThreePartsFromMediaPK(e);
                                if (!t || !s || !i) return '';
                                const n = await this._getMessagesByCliMsgIdRange(t, i);
                                let r = '';
                                return (
                                    n.forEach((e) => {
                                        e.fromUid === s && e.toUid === i && (r = e.msgId);
                                    }),
                                    r
                                );
                            }
                            _getMessagesByCliMsgIdRange(e, t) {
                                const s = { from: e, to: e, excludeFrom: !1, excludeTo: !1 },
                                    i = { index: 'cliMsgIdIndex', partition: t };
                                return P.a.getInstance().Core.Message.getAll(s, i);
                            }
                            _getThreePartsFromMediaPK(e) {
                                if ('string' != typeof e || !e) return [];
                                const [t, s, i] = e.split('_');
                                return [t, s, i];
                            }
                        })
                    ) || Td;
                d.ModuleContainer.register(Cd, Od);
                const Ed = Object(d.define)('utils-media-mapper'),
                    Sd = Object(d.define)('file-media-mapper'),
                    wd = Object(d.define)('image-media-mapper'),
                    Dd = Object(d.define)('link-media-mapper');
                var Ld;
                let Fd =
                    Object(d.injectable)()(
                        (Ld = class {
                            toUtilsMediaDTOFromDomain(e) {
                                return {
                                    id: e.id,
                                    convId: e.convId,
                                    mediaType: e.mediaType,
                                    senderIds: e.senderIds,
                                    fileTypes: e.fileTypes,
                                };
                            }
                        })
                    ) || Ld;
                d.ModuleContainer.register(Ed, Fd);
                var Rd,
                    Ad = s('v6qY'),
                    Pd = s('IZCB');
                function Nd(e) {
                    try {
                        const t = JSON.parse(e),
                            { fileExt: s, fType: i } = t;
                        return 'zip' === s && 2 === i;
                    } catch (t) {
                        return !1;
                    }
                }
                function jd(e) {
                    try {
                        if (Nd(e)) return 'folder';
                        const t = JSON.parse(e);
                        if (!t) return '';
                        const { fileExt: s } = t;
                        return s.toLowerCase();
                    } catch (t) {
                        return '';
                    }
                }
                function Ud(e) {
                    try {
                        const t = JSON.parse(e);
                        if (!t) return { width: null, height: null };
                        const { width: s, height: i } = t;
                        return { width: s, height: i };
                    } catch (t) {
                        return { width: null, height: null };
                    }
                }
                let Bd =
                    Object(d.injectable)()(
                        (Rd = class {
                            toDomainFromOldDomain(e, t) {
                                if ((void 0 === t && (t = `${Ad.c.UNKNOWN}${Ad.d.FROM_OLD_DB}`), !e || !e.message))
                                    throw Error("This oldImageEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This oldImageEntity doesn't have key_from_to valid!");
                                const s = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.userId}`,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title: e.message.title || null,
                                        thumbUrl: e.message.thumbUrl || '',
                                        hdUrl: e.message.hdUrl || '',
                                        normalUrl: e.message.normalUrl || '',
                                        oriUrl: e.message.oriUrl,
                                        params: e.message.params,
                                        duration: e.message.duration || null,
                                    },
                                    type: 'number' == typeof e.subType ? e.subType : -1,
                                    src: t,
                                    sendDttm: s,
                                    ttl: e.ttl,
                                    localPath: e.localPath || '',
                                    previewThumb: e.previewThumb || '',
                                    modifiedTime: e.updateTime || s,
                                    metadata: Object(i.a)(
                                        Object(i.a)({}, Ud(e.message.params)),
                                        {},
                                        { vOrient: Pd.a.None }
                                    ),
                                };
                            }
                            toDomainFromDTO(e) {
                                if (!e || !e.message) throw Error("This imageDTO isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This imageDTO doesn't have key_from_to valid!");
                                const t = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: e.mediaId,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title: e.message.title || null,
                                        thumbUrl: e.message.thumbUrl || '',
                                        hdUrl: e.message.hdUrl || '',
                                        normalUrl: e.message.normalUrl || '',
                                        oriUrl: e.message.oriUrl,
                                        params: e.message.params,
                                        duration: e.message.duration || null,
                                    },
                                    type: 'number' == typeof e.subType ? e.subType : -1,
                                    sendDttm: t,
                                    src: e.src,
                                    ttl: 'number' == typeof e.ttl ? e.ttl : 0,
                                    localPath: e.localPath || '',
                                    previewThumb: e.previewThumb || '',
                                    modifiedTime: 'number' == typeof e.updateTime ? e.updateTime : t,
                                    metadata: Object(i.a)(
                                        Object(i.a)({}, Ud(e.message.params)),
                                        {},
                                        { vOrient: e.vOrient || Pd.a.None }
                                    ),
                                };
                            }
                            toDomainFromTMessage(e, t, s) {
                                if ((void 0 === s && (s = `${Ad.c.UNKNOWN}${Ad.d.FROM_MSG}`), !e || !e.message))
                                    throw Error("This messageEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.toUid))
                                    throw Error("This messageEntity doesn't have key_from_to valid!");
                                const n = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.toUid}`,
                                    convId: e.toUid,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title: e.message.title || null,
                                        thumbUrl: e.message.thumbUrl || '',
                                        hdUrl: e.message.hdUrl || '',
                                        normalUrl: e.message.normalUrl || '',
                                        oriUrl: e.message.oriUrl,
                                        params: e.message.params,
                                        duration: e.message.duration || null,
                                    },
                                    src: s,
                                    type: t,
                                    sendDttm: n,
                                    ttl: e.ttl || 0,
                                    localPath: e.localPath || '',
                                    previewThumb: e.previewThumb || '',
                                    modifiedTime: n,
                                    metadata: Object(i.a)(
                                        Object(i.a)({}, Ud(e.message.params)),
                                        {},
                                        { vOrient: Pd.a.None }
                                    ),
                                };
                            }
                            async toDTO(e) {
                                if (!e || !e.mediaId) throw Error("This imageEntity isn't valid!");
                                const t = e.msgId
                                    ? e.msgId
                                    : await d.ModuleContainer.resolve(Cd).toMessagePKFromMediaPK(e.mediaId);
                                return {
                                    mediaId: e.mediaId,
                                    msgId: t,
                                    cliMsgId: e.cliMsgId,
                                    fromUid: e.fromUid,
                                    userId: e.convId,
                                    message: {
                                        title: e.content.title,
                                        description: '',
                                        childnumber: 0,
                                        action: '',
                                        params: e.content.params,
                                        type: '',
                                        thumbUrl: e.content.thumbUrl,
                                        oriUrl: e.content.oriUrl,
                                        hdUrl: e.content.hdUrl,
                                        normalUrl: e.content.normalUrl,
                                        duration: e.content.duration || null,
                                        thumb: '',
                                        href: '',
                                    },
                                    sendDttm: e.sendDttm,
                                    src: e.src,
                                    ttl: e.ttl,
                                    type: 'image',
                                    subType: e.type,
                                    id: 0,
                                    localPath: e.localPath,
                                    previewThumb: e.previewThumb,
                                    updateTime: e.modifiedTime,
                                    width: e.metadata.width,
                                    height: e.metadata.height,
                                    vOrient: e.metadata.vOrient,
                                };
                            }
                            toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(e) {
                                return {
                                    convId: e.convId,
                                    fromUid: e.fromUid,
                                    mediaType: 'image',
                                    content: { params: e.content.params },
                                };
                            }
                            toOldEAttsFromNewEAtts(e) {
                                if (!e || 'object' != typeof e) throw Error('newEAtts is undefined or not valid!');
                                const t = {};
                                var s, i;
                                (e.hasOwnProperty('message') &&
                                    'object' == typeof e.content &&
                                    (t.message = {
                                        title: e.content.title,
                                        description: '',
                                        childnumber: 0,
                                        action: '',
                                        params: e.content.params,
                                        type: '',
                                        thumbUrl: e.content.thumbUrl,
                                        oriUrl: e.content.oriUrl,
                                        hdUrl: e.content.hdUrl,
                                        normalUrl: e.content.normalUrl,
                                        duration: e.content.duration || null,
                                        thumb: '',
                                        href: '',
                                    }),
                                e.hasOwnProperty('subType') && (t.subType = e.type),
                                e.hasOwnProperty('sendDttm') &&
                                    (t.sendDttm = 'string' == typeof e.sendDttm ? +e.sendDttm : e.sendDttm),
                                e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                e.hasOwnProperty('localPath') && (t.localPath = e.localPath || ''),
                                e.hasOwnProperty('previewThumb') && (t.previewThumb = e.previewThumb || ''),
                                e.hasOwnProperty('updateTime') && (t.updateTime = e.modifiedTime || Date.now()),
                                e.hasOwnProperty('metadata')) &&
                                    ((t.width = null === (s = e.metadata) || void 0 === s ? void 0 : s.width),
                                    (t.height = null === (i = e.metadata) || void 0 === i ? void 0 : i.height));
                                return t;
                            }
                            toNewEAttsFromDTOAtts(e) {
                                if (!e || 'object' != typeof e) throw Error('dtoAtts is undefined or not valid!');
                                const t = {};
                                return (
                                    e.hasOwnProperty('message') &&
                                        'object' == typeof e.message &&
                                        (t.content = {
                                            title: e.message.title || null,
                                            thumbUrl: e.message.thumbUrl || '',
                                            hdUrl: e.message.hdUrl || '',
                                            normalUrl: e.message.normalUrl || '',
                                            oriUrl: e.message.oriUrl,
                                            params: e.message.params,
                                            duration: e.message.duration || null,
                                        }),
                                    e.hasOwnProperty('subType') && (t.type = e.subType),
                                    e.hasOwnProperty('sendDttm') &&
                                        (t.sendDttm = 'string' == typeof e.sendDttm ? +e.sendDttm : e.sendDttm),
                                    e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                    e.hasOwnProperty('localPath') && (t.localPath = e.localPath || ''),
                                    e.hasOwnProperty('previewThumb') && (t.previewThumb = e.previewThumb || ''),
                                    e.hasOwnProperty('updateTime') && (t.modifiedTime = e.updateTime || Date.now()),
                                    e.hasOwnProperty('width') &&
                                        e.hasOwnProperty('height') &&
                                        e.hasOwnProperty('vOrient') &&
                                        (t.metadata = { width: e.width, height: e.height, vOrient: e.vOrient || 0 }),
                                    t
                                );
                            }
                        })
                    ) || Rd;
                var kd;
                d.ModuleContainer.register(wd, Bd);
                let Gd =
                    Object(d.injectable)()(
                        (kd = class {
                            toDomainFromOldDomain(e, t) {
                                if ((void 0 === t && (t = `${Ad.c.UNKNOWN}${Ad.d.FROM_OLD_DB}`), !e || !e.message))
                                    throw Error("This oldFileEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This oldFileEntity doesn't have key_from_to valid!");
                                const s = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.userId}`,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title: e.message.title,
                                        href: e.message.href,
                                        params: e.message.params,
                                        thumb: e.message.thumb || '',
                                    },
                                    type: Nd(e.message.params) ? Ad.a.FOLDER : Ad.a.FILE,
                                    src: t,
                                    extType: jd(e.message.params),
                                    sendDttm: s,
                                    ttl: 'number' == typeof e.ttl ? e.ttl : 0,
                                    modifiedTime: e.updateTime || s,
                                    localPath: e.localPath || '',
                                    folderPath: e.folderPath || '',
                                    thumbMetadata: e.dimension
                                        ? {
                                              width: e.dimension.width,
                                              height: e.dimension.height,
                                              type: e.dimension.type,
                                              orientation: Object(i.a)({}, e.dimension.orientation),
                                              bigRes: e.dimension.bigRes,
                                          }
                                        : null,
                                };
                            }
                            toDomainFromDTO(e) {
                                if (!e || !e.message) throw Error("This fileDTO isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This fileDTO doesn't have key_from_to valid!");
                                const t = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: e.mediaId,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    msgId: e.msgId,
                                    content: {
                                        title: e.message.title,
                                        href: e.message.href,
                                        params: e.message.params,
                                        thumb: e.message.thumb || '',
                                    },
                                    type: e.fileType || Nd(e.message.params) ? Ad.a.FOLDER : Ad.a.FILE,
                                    src: e.src,
                                    extType: e.extType || jd(e.message.params),
                                    sendDttm: t,
                                    ttl: 'number' == typeof e.ttl ? e.ttl : 0,
                                    modifiedTime: e.updateTime || t,
                                    localPath: e.localPath || '',
                                    folderPath: e.folderPath || '',
                                    thumbMetadata: e.dimension
                                        ? {
                                              width: e.dimension.width,
                                              height: e.dimension.height,
                                              type: e.dimension.type,
                                              orientation: Object(i.a)({}, e.dimension.orientation),
                                              bigRes: e.dimension.bigRes,
                                          }
                                        : null,
                                };
                            }
                            async toDTO(e) {
                                if (!e || !e.mediaId || !e.content) throw Error("This fileEntity isn't valid!");
                                const t = e.msgId
                                    ? e.msgId
                                    : await d.ModuleContainer.resolve(Cd).toMessagePKFromMediaPK(e.mediaId);
                                return {
                                    mediaId: e.mediaId,
                                    msgId: t,
                                    cliMsgId: e.cliMsgId,
                                    fromUid: e.fromUid,
                                    userId: e.convId,
                                    message: {
                                        title: e.content.title,
                                        href: e.content.href,
                                        params: e.content.params,
                                        thumb: e.content.thumb,
                                        childnumber: 0,
                                        action: '',
                                        description: '',
                                        type: '',
                                        thumbUrl: '',
                                        oriUrl: '',
                                    },
                                    sendDttm: e.sendDttm,
                                    ttl: e.ttl,
                                    src: e.src,
                                    type: 'file',
                                    fileType: e.type,
                                    extType: e.extType,
                                    id: 0,
                                    updateTime: e.modifiedTime,
                                    localPath: e.localPath || '',
                                    folderPath: e.folderPath || '',
                                    downloadError: !1,
                                    dimension: 'object' == typeof e.thumbMetadata ? e.thumbMetadata : null,
                                    previewThumb: '',
                                };
                            }
                            toDomainFromMessage(e, t) {
                                if (
                                    (void 0 === t && (t = `${Ad.c.UNKNOWN}${Ad.d.FROM_MSG}`),
                                    !e || !e.msgId || !e.message)
                                )
                                    throw Error("This messageEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.toUid))
                                    throw Error("This messageEntity doesn't have key_from_to valid!");
                                const s = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.toUid}`,
                                    convId: e.toUid,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title: e.message.title,
                                        href: e.message.href,
                                        params: e.message.params,
                                        thumb: e.message.thumb || '',
                                    },
                                    type: Nd(e.message.params) ? Ad.a.FOLDER : Ad.a.FILE,
                                    src: t,
                                    extType: jd(e.message.params),
                                    sendDttm: s,
                                    ttl: e.ttl || 0,
                                    modifiedTime: s,
                                    localPath: e.localPath || '',
                                    folderPath: e.folderPath || '',
                                    thumbMetadata: null,
                                };
                            }
                            toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(e) {
                                return {
                                    convId: e.convId,
                                    fromUid: e.fromUid,
                                    mediaType: 'file',
                                    content: { params: e.content.params },
                                };
                            }
                            toOldEAttsFromNewEAtts(e) {
                                if (!e || 'object' != typeof e) throw Error("newEAtts isn't valid!");
                                const t = {};
                                return (
                                    e.hasOwnProperty('message') &&
                                        'object' == typeof e.content &&
                                        (t.message = {
                                            title: e.content.title,
                                            href: e.content.href,
                                            params: e.content.params,
                                            thumb: e.content.thumb,
                                            childnumber: 0,
                                            action: '',
                                            description: '',
                                            type: '',
                                            thumbUrl: '',
                                            oriUrl: '',
                                        }),
                                    e.hasOwnProperty('sendDttm') && (t.sendDttm = e.sendDttm),
                                    e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                    e.hasOwnProperty('localPath') && (t.localPath = e.localPath || ''),
                                    e.hasOwnProperty('folderPath') && (t.folderPath = e.folderPath || ''),
                                    e.hasOwnProperty('updateTime') && (t.updateTime = e.modifiedTime || Date.now()),
                                    e.hasOwnProperty('dimension') &&
                                        (t.dimension = e.thumbMetadata
                                            ? {
                                                  width: e.thumbMetadata.width,
                                                  height: e.thumbMetadata.height,
                                                  type: e.thumbMetadata.type,
                                                  orientation: e.thumbMetadata.orientation,
                                                  bigRes: e.thumbMetadata.bigRes,
                                              }
                                            : null),
                                    t
                                );
                            }
                            toNewEAttsFromDTOAtts(e) {
                                if (!e || 'object' != typeof e) throw Error("dtoAtts isn't valid!");
                                const t = {};
                                return (
                                    e.hasOwnProperty('message') &&
                                        'object' == typeof e.message &&
                                        (t.content = {
                                            title: e.message.title,
                                            href: e.message.href,
                                            params: e.message.params,
                                            thumb: e.message.thumb || '',
                                        }),
                                    e.hasOwnProperty('fileType') && (t.type = e.fileType),
                                    e.hasOwnProperty('extType') && (t.extType = e.extType || ''),
                                    e.hasOwnProperty('sendDttm') &&
                                        (t.sendDttm = 'string' == typeof e.sendDttm ? +e.sendDttm : e.sendDttm),
                                    e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                    e.hasOwnProperty('localPath') && (t.localPath = e.localPath || ''),
                                    e.hasOwnProperty('folderPath') && (t.folderPath = e.folderPath || ''),
                                    e.hasOwnProperty('updateTime') && (t.modifiedTime = e.updateTime || Date.now()),
                                    e.hasOwnProperty('dimension') &&
                                        (t.thumbMetadata = e.dimension
                                            ? {
                                                  width: e.dimension.width,
                                                  height: e.dimension.height,
                                                  type: e.dimension.type,
                                                  orientation: e.dimension.orientation,
                                                  bigRes: e.dimension.bigRes,
                                              }
                                            : null),
                                    t
                                );
                            }
                        })
                    ) || kd;
                var xd;
                d.ModuleContainer.register(Sd, Gd);
                let zd =
                    Object(d.injectable)()(
                        (xd = class {
                            toDomainFromOldDomain(e, t) {
                                if ((void 0 === t && (t = `${Ad.c.UNKNOWN}${Ad.d.FROM_OLD_DB}`), !e || !e.message))
                                    throw Error("This oldLinkEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This oldLinkEntity doesn't have key_from_to valid!");
                                const s = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.userId}`,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title:
                                            'object' == typeof e.message.title
                                                ? e.message.title.title || ''
                                                : e.message.title,
                                        params: e.message.params || '',
                                        href: e.message.href || '',
                                        thumb: e.message.thumb || '',
                                        description: e.message.description || '',
                                        type: e.message.type || '',
                                    },
                                    type: -1,
                                    src: t,
                                    sendDttm: s,
                                    ttl: e.ttl,
                                    modifiedTime: e.updateTime || s,
                                    parsedInfo: null,
                                };
                            }
                            toDomainFromDTO(e) {
                                if (!e || !e.message) throw Error("This linkDTO isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.userId))
                                    throw Error("This linkDTO doesn't have key_from_to valid!");
                                const t = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: e.mediaId,
                                    convId: e.userId,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title:
                                            'object' == typeof e.message.title
                                                ? e.message.title.title
                                                : e.message.title || '',
                                        params: e.message.params || '',
                                        href: e.message.href || '',
                                        thumb: e.message.thumb || '',
                                        description: e.message.description || '',
                                        type: e.message.type,
                                    },
                                    src: e.src,
                                    type: 'number' == typeof e.linkType ? e.linkType : -1,
                                    sendDttm: t,
                                    ttl: 'number' == typeof e.ttl ? e.ttl : 0,
                                    modifiedTime: e.updateTime || t,
                                    parsedInfo: null,
                                };
                            }
                            async toDTO(e) {
                                if (!e || !e.mediaId) throw Error("This linkEntity isn't valid!");
                                const t = e.msgId
                                    ? e.msgId
                                    : await d.ModuleContainer.resolve(Cd).toMessagePKFromMediaPK(e.mediaId);
                                return {
                                    mediaId: e.mediaId,
                                    msgId: t,
                                    cliMsgId: parseInt(e.cliMsgId),
                                    fromUid: e.fromUid,
                                    userId: e.convId,
                                    message: {
                                        title: e.content.title,
                                        params: e.content.params,
                                        href: e.content.href,
                                        thumb: e.content.thumb,
                                        description: e.content.description,
                                        type: e.content.type,
                                        action: '',
                                        childnumber: 0,
                                        oriUrl: '',
                                        thumbUrl: '',
                                    },
                                    sendDttm: e.sendDttm,
                                    type: 'link',
                                    ttl: e.ttl,
                                    src: e.src,
                                    linkType: e.type,
                                    id: 0,
                                    updateTime: e.modifiedTime,
                                    previewThumb: '',
                                    parsedInfo: 'object' == typeof e.parsedInfo ? Object(i.a)({}, e.parsedInfo) : null,
                                };
                            }
                            toDomainFromMessage(e, t) {
                                if ((void 0 === t && (t = `${Ad.c.UNKNOWN}${Ad.d.FROM_MSG}`), !e))
                                    throw Error("This messageEntity isn't valid!");
                                if (!(e.cliMsgId && e.fromUid && e.toUid))
                                    throw Error("This messageEntity doesn't have key_from_to valid!");
                                const s = 'string' == typeof e.sendDttm ? parseInt(e.sendDttm) : e.sendDttm;
                                return {
                                    mediaId: `${e.cliMsgId}_${e.fromUid}_${e.toUid}`,
                                    convId: e.toUid,
                                    cliMsgId: 'number' == typeof e.cliMsgId ? e.cliMsgId.toString() : e.cliMsgId,
                                    fromUid: e.fromUid,
                                    content: {
                                        title:
                                            'object' === e.message.title
                                                ? e.message.title.title
                                                : e.message.title || '',
                                        params: e.message.params || '',
                                        href: e.message.href || '',
                                        thumb: e.message.thumb || '',
                                        description: e.message.description || '',
                                        type: e.message.type,
                                    },
                                    type: -1,
                                    src: t,
                                    sendDttm: s,
                                    ttl: e.ttl || 0,
                                    modifiedTime: s,
                                    parsedInfo: null,
                                };
                            }
                            toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(e) {
                                return {
                                    convId: e.convId,
                                    fromUid: e.fromUid,
                                    mediaType: 'link',
                                    content: { params: e.content.params },
                                };
                            }
                            toOldEAttsFromNewEAtts(e) {
                                if (!e || 'object' != typeof e) throw Error("newEAtts isn't valid!");
                                const t = {};
                                return (
                                    e.hasOwnProperty('content') &&
                                        'object' == typeof e.content &&
                                        (t.message = {
                                            title: e.content.title,
                                            params: e.content.params,
                                            href: e.content.href,
                                            thumb: e.content.thumb,
                                            description: e.content.description,
                                            type: e.content.type,
                                            action: '',
                                            childnumber: 0,
                                            oriUrl: '',
                                            thumbUrl: '',
                                        }),
                                    e.hasOwnProperty('sendDttm') && (t.sendDttm = e.sendDttm),
                                    e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                    e.hasOwnProperty('updateTime') && (t.updateTime = e.modifiedTime || Date.now()),
                                    t
                                );
                            }
                            toNewEAttsFromDTOAtts(e) {
                                if (!e || 'object' != typeof e) throw Error("dtoAtts isn't valid!");
                                const t = {};
                                var s;
                                e.hasOwnProperty('message') &&
                                    'object' == typeof e.message &&
                                    (t.content = {
                                        title:
                                            'object' == typeof e.message.title
                                                ? (null === (s = e.message.title) || void 0 === s ? void 0 : s.title) ||
                                                  ''
                                                : e.message.title || '',
                                        params: e.message.params || '',
                                        href: e.message.href || '',
                                        thumb: e.message.thumb || '',
                                        description: e.message.description || '',
                                        type: e.message.type || '',
                                    });
                                return (
                                    e.hasOwnProperty('sendDttm') &&
                                        (t.sendDttm = 'string' == typeof e.sendDttm ? +e.sendDttm : e.sendDttm),
                                    e.hasOwnProperty('ttl') && (t.ttl = e.ttl || 0),
                                    e.hasOwnProperty('linkType') && (t.type = e.linkType),
                                    e.hasOwnProperty('updateTime') && (t.modifiedTime = e.updateTime || Date.now()),
                                    e.hasOwnProperty('parsedInfo') &&
                                        (t.parsedInfo = e.parsedInfo
                                            ? { protocol: e.parsedInfo.protocol || '', host: e.parsedInfo.domain || '' }
                                            : null),
                                    t
                                );
                            }
                        })
                    ) || xd;
                d.ModuleContainer.register(Dd, zd);
                var Vd = s('GbHB');
                let $d, Wd, Kd;
                !(function (e) {
                    (e[(e.OLD = 0)] = 'OLD'), (e[(e.NEW = 1)] = 'NEW'), (e[(e.UNKNOWN = 2)] = 'UNKNOWN');
                })($d || ($d = {})),
                    (function (e) {
                        (e[(e.OLD = 0)] = 'OLD'), (e[(e.NEW = 1)] = 'NEW'), (e[(e.UNKNOWN = 2)] = 'UNKNOWN');
                    })(Wd || (Wd = {})),
                    (function (e) {
                        (e[(e.OLD = 0)] = 'OLD'), (e[(e.NEW = 1)] = 'NEW'), (e[(e.UNKNOWN = 2)] = 'UNKNOWN');
                    })(Kd || (Kd = {}));
                var qd = s('wH4e');
                const Hd = 'DONE',
                    Qd = 'NOT_DONE',
                    Jd = 'UNKNOWN',
                    Zd = 'GET_FROM_OLD_DB',
                    Xd = 'ADD_TO_NEW_DB',
                    Yd = 'DELETE_FROM_OLD_DB',
                    el = 'DONE',
                    tl = 'FAILED',
                    sl = 'NEW',
                    il = 'RUNNING',
                    nl = 'FAILED',
                    rl = 'persisted_job_desc_summaries',
                    al = 'migration_state';
                class ol {
                    constructor(e, t, s, i, n, r) {
                        (this._dbInstance = void 0),
                            (this._mediaMigrationManager = void 0),
                            (this._dalInstance = P.a.getInstance()),
                            (this.dbTable = void 0),
                            (this.logger = void 0),
                            (this.mediaType = void 0),
                            (this.dbTable = this._dalInstance[e][t]),
                            (this._dbInstance = this._dalInstance[e]),
                            (this.mediaType = s),
                            (this._mediaMigrationManager = n),
                            (this.logger = r.createZLogger(`${e}-${t}-repository`, [i]));
                    }
                    async insert(e, t) {
                        if (!e) throw Error('[insert]: item is undefined!');
                        if (!e.cliMsgId || !e.fromUid || !e.convId)
                            throw Error(
                                `[insert]: item doesn't have valid key_from_to: ${e.cliMsgId}_${e.fromUid}_${e.convId}`
                            );
                        return (
                            (e.mediaId = `${e.cliMsgId}_${e.fromUid}_${e.convId}`), !!(await this.dbTable.insert(e, t))
                        );
                    }
                    insertMulti(e, t) {
                        if (!e || !e.length) throw Error('[insertMulti]: items is undefined or empty!');
                        const s = [];
                        return (
                            e.forEach((e) => {
                                e.cliMsgId && e.fromUid && e.convId
                                    ? ((e.mediaId = `${e.cliMsgId}_${e.fromUid}_${e.convId}`), s.push(e))
                                    : this.logger.zsymb(
                                          21,
                                          11049,
                                          3e4,
                                          "[insertMulti]: media doesn't have valid key_from_to: {}_{}_{}",
                                          e.cliMsgId,
                                          e.fromUid,
                                          e.convId
                                      );
                            }),
                            this.dbTable.insertMulti(s, t)
                        );
                    }
                    async update(e, t) {
                        if (!ol.isNewMediaIdFormat(e))
                            throw Error("[update]: mediaId doesn't have new media id format!");
                        return !!(await this.dbTable.update(e, t));
                    }
                    async updateMedia(e, t, s) {
                        if ((void 0 === s && (s = $d.UNKNOWN), !e))
                            throw Error('[updateMedia]: mediaIdObj is undefined!');
                        const { newId: n, oldId: r } = e;
                        if ((s === $d.NEW || (await this._isMigrationDone())) && n)
                            return !!(await this.dbTable.update(n, t));
                        if (s === $d.OLD && r) {
                            let e;
                            if (t) {
                                const s = this.getMediaMapper().toOldEAttsFromNewEAtts(t.value || {});
                                return (
                                    (e = Object(i.a)(Object(i.a)({}, t), {}, { attributes: Object.keys(s), value: s })),
                                    !!(await this.getOldDBTable().update(r, e))
                                );
                            }
                            throw Error('options is undefined!');
                        }
                        try {
                            if (n) {
                                if (await this.dbTable.get(n)) return !!(await this.dbTable.update(n, t));
                            }
                            if (r) {
                                let e;
                                if (t) {
                                    const s = this.getMediaMapper().toOldEAttsFromNewEAtts(t.value || {});
                                    return (
                                        (e = Object(i.a)(
                                            Object(i.a)({}, t),
                                            {},
                                            { attributes: Object.keys(s), value: s }
                                        )),
                                        !!(await this.getOldDBTable().update(r, e))
                                    );
                                }
                                throw Error('options is undefined!');
                            }
                            throw Error(`${n} or ${r} isn't valid!`);
                        } catch (a) {
                            throw Error(`[updateMedia] - err: ${a.message}`);
                        }
                    }
                    async updateMulti(e) {
                        const t = await this.dbTable.updateMulti(e);
                        return { success: t.success.map((e) => e.mediaId), fail: t.fail.map((e) => e.mediaId) };
                    }
                    async updateMultiMedias(e) {
                        throw Error("This updateMultiMedias isn't implemented!");
                    }
                    delete(e, t) {
                        if (!ol.isNewMediaIdFormat(e))
                            throw Error("[delete]: mediaId doesn't have new media id format!");
                        return this.dbTable.delete(e, t);
                    }
                    deleteMulti(e, t) {
                        if (!e || !e.length) throw Error('[deleteMulti]: mediaIds is undefined or empty!');
                        if (e.some((e) => !ol.isNewMediaIdFormat(e)))
                            throw Error(
                                "[deleteMulti]: mediaIds contains an id which doesn't have new media id format!"
                            );
                        return this.dbTable.deleteMulti(e, t);
                    }
                    async deleteMedia(e, t, s) {
                        if ((void 0 === s && (s = Kd.UNKNOWN), !e))
                            throw Error('[deleteMedia]: mediaObj is undefined!');
                        const { newId: i, oldId: n } = e;
                        if ((s === Kd.NEW || (await this._isMigrationDone())) && i) return this.dbTable.delete(i);
                        if (s === Kd.OLD && n) return this.getOldDBTable().delete(n, t);
                        {
                            const e = [];
                            i && e.push(this.dbTable.delete(i, t)), n && e.push(this.getOldDBTable().delete(n, t));
                            return (await Promise.allSettled(e)).every((e) => 'fulfilled' === e.status && e.value);
                        }
                    }
                    async deleteMultiMedias(e, t) {
                        if (!e || !e.length) throw Error('[deleteMultiMedias]: mediaIdObjs is undefined or empty!');
                        const s = { success: [], fail: [] },
                            i = [];
                        for (const { newId: n, oldId: r, deleteTo: a } of e) {
                            const e = (a === Kd.NEW ? n : a === Kd.OLD ? r : n || r || '') || '',
                                o = async () => {
                                    try {
                                        (await this.deleteMedia({ newId: n, oldId: r }, t, a)) && s.success.push(e);
                                    } catch (i) {
                                        this.logger.zsymb(18, 11049, 30001, i), s.fail.push(e);
                                    }
                                };
                            i.push(o);
                        }
                        return await Promise.allSettled(i.map((e) => e())), s;
                    }
                    async get(e, t) {
                        if (!ol.isNewMediaIdFormat(e)) throw Error("[get]: mediaId doesn't have new media id format!");
                        return this.dbTable.get(e, t);
                    }
                    async getMulti(e, t) {
                        const { newIdFormats: s, oldIdFormats: i } = e.reduce(
                            (e, t) => (ol.isNewMediaIdFormat(t) && e.newIdFormats.push(t), e),
                            { newIdFormats: [], oldIdFormats: [] }
                        );
                        let n = [];
                        if (s.length) {
                            const e = await this.dbTable.getMulti(s, t);
                            e.length && n.push(...e);
                        }
                        return n;
                    }
                    async getMedia(e, t, s) {
                        if ((void 0 === s && (s = Wd.UNKNOWN), !e))
                            throw Error('[getMedia]: mediaIdObj params is undefined!');
                        const { newId: i, oldId: n } = e;
                        if ((s === Wd.NEW || (await this._isMigrationDone())) && i) return this.dbTable.get(i, t);
                        if (s === Wd.NEW && n) {
                            const e = await this.getOldDBTable().get(n, t);
                            if (e) return this.getMediaMapper().toDomainFromOldDomain(e);
                        } else {
                            if (i) {
                                const e = await this.dbTable.get(i, t);
                                if (e) return e;
                            }
                            if (n) {
                                const e = await this.getOldDBTable().get(n, t);
                                if (e) return this.getMediaMapper().toDomainFromOldDomain(e);
                            }
                        }
                    }
                    async getMultiMedias(e, t) {
                        if (!e || !e.length) throw Error('[getMultiMedias]: mediaIdObjs is undefined or empty!');
                        let s = [];
                        const i = [];
                        for (const { newId: n, oldId: r, getFrom: a } of e)
                            i.push(this.getMedia({ newId: n, oldId: r }, t, 'number' == typeof a ? a : Wd.UNKNOWN));
                        return (
                            (s = (await Promise.allSettled(i)).map((e) =>
                                'fulfilled' === e.status ? e.value : void 0
                            )),
                            s
                        );
                    }
                    getAll(e, t) {
                        if (!e) throw Error('[getAll]: keyRange is undefined!');
                        return this.dbTable.getAll(e, t);
                    }
                    async getAllInOldDB(e, t) {
                        if (await this._isMigrationDone()) return [];
                        if (!e) throw Error('[getAllInOldDB]: keyRange is undefined!');
                        const s = await this.getOldDBTable().getAll(e, t);
                        return null != s && s.length
                            ? s.map((e) => this.getMediaMapper().toDomainFromOldDomain(e))
                            : [];
                    }
                    static isNewMediaIdFormat(e) {
                        if (!e) return !1;
                        return 3 === e.split('_').length;
                    }
                    static filterMedia(e, t) {
                        if (!(t && (t.member || (t.date && (t.date.start || t.date.end)) || t.name || t.ext)))
                            return !0;
                        if (!t.member || (e.fromUid && e.fromUid === t.member)) {
                            let i, n, r;
                            if (t.name) {
                                if (e.message.params && e.message.href)
                                    try {
                                        let t = JSON.parse(e.message.params);
                                        (i = t.mediaTitle
                                            ? He.default.simpleStripVietnamese(t.mediaTitle)
                                            : He.default.simpleStripVietnamese(e.message.title)),
                                            (n = t.src);
                                    } catch (s) {
                                        return He.default.logCoreError(s), !1;
                                    }
                                r = He.default.simpleStripVietnamese(t.name);
                            }
                            if (!t.name || (r.length <= i.length && He.default.searchContent(i, r))) {
                                let i = !1;
                                if (
                                    (t.ext &&
                                        (i = v.fileExt[t.ext].some((t) => {
                                            if (!e.message.title) {
                                                const t = Vd.a.decrypt(e.message, le.default.UIN, !1);
                                                try {
                                                    e.message = JSON.parse(t);
                                                } catch (s) {
                                                    e.message = { title: '' };
                                                }
                                            }
                                            return e.message.title.endsWith(t);
                                        })),
                                    !t.ext || i)
                                )
                                    return (
                                        (null == t.date.start && null == t.date.end) ||
                                        (e.sendDttm >= t.date.start ? e.sendDttm <= t.date.end : 0)
                                    );
                            }
                        }
                        return !1;
                    }
                    async isExistedMedia(e) {
                        let t = !1;
                        if (e) {
                            const { newId: s, oldId: i } = e;
                            s && (t = !!(await this.dbTable.get(s))),
                                i && !t && (t = !!(await this.getOldDBTable().get(i)));
                        }
                        return t;
                    }
                    async getLastMediasOfConv(e, t, s) {
                        if ((void 0 === s && (s = 100), !e || !t))
                            throw Error(
                                `[getLastMediasOfConv]: convId: ${e}, lastItemOptions:${JSON.stringify(t)} isn't valid!`
                            );
                        const { sendDttm: i, cliMsgId: n, msgId: r } = t,
                            a = await this.getLastMediasOfConvInNewDB(e, { sendDttm: i, cliMsgId: n }, s);
                        return (
                            a.length < s &&
                                !(await this._isMigrationDone()) &&
                                a.push(...(await this.getLastMediasOfConvInOldDB(e, { msgId: r }, s - a.length))),
                            a
                        );
                    }
                    async countMediaOfConv(e, t) {
                        let s = 0;
                        if (!(e && t && t.from && t.to))
                            throw Error(`[countMediaOfConv]: convId: ${e}, options: ${JSON.stringify(t)} isn't valid!`);
                        const { from: i, to: n } = t;
                        return (
                            (s = await this.countMediaOfConvInNewDB(e, {
                                from: { sendDttm: i.sendDttm, cliMsgId: i.cliMsgId },
                                to: { sendDttm: n.sendDttm, cliMsgId: n.cliMsgId },
                            })),
                            (await this._isMigrationDone()) ||
                                (s += await this.countMediaOfConvInOldDB(e, {
                                    from: { msgId: i.msgId },
                                    to: { msgId: n.msgId },
                                })),
                            s
                        );
                    }
                    countMediaOfConvInNewDB(e, t) {
                        const { from: s, to: i } = t,
                            n = {
                                from: [e, s.sendDttm, s.cliMsgId],
                                to: [e, i.sendDttm, i.cliMsgId],
                                excludeFrom: !1,
                                excludeTo: !1,
                            };
                        return this.dbTable.count(n, { index: 'convId_sendDttm_cliMsgId' });
                    }
                    async countMediaOfConvInOldDB(e, t) {
                        if (await this._isMigrationDone()) return 0;
                        const { from: s, to: i } = t,
                            n = {
                                from: [e, s.msgId.length, s.msgId],
                                to: [e, i.msgId.length, i.msgId],
                                excludeFrom: !1,
                                excludeTo: !1,
                            };
                        return this.getOldDBTable().count(n, { index: 'userId_sendDttm_msgId' });
                    }
                    async getMediasOfConv(e, t, s, i) {
                        if (!e || !t || !s) return Promise.resolve([]);
                        let n = [];
                        if (
                            (We.default.load_media.optimize_mode &&
                                (n = (await this._isMigrationDone())
                                    ? await this.getMediasOfConvOptimizeMode(e, t, s, i)
                                    : await this.getMediasOfConvOptimizeModeInMixedDB(e, t, s, i)),
                            null != i && i.deletePointOfConv)
                        ) {
                            const { lastId: e, lastSendDttm: t, lastCliMsgId: s } = i.deletePointOfConv;
                            return n.filter(
                                (i) =>
                                    !(e && i.msgId && i.msgId <= e) &&
                                    !(t && i.sendDttm <= t) &&
                                    !(s && i.cliMsgId <= s)
                            );
                        }
                        return n;
                    }
                    async getMediasOfConvOptimizeModeInMixedDB(e, t, s, i) {
                        let n = !1,
                            r = !1;
                        i && i.date && (null !== i.date.start || null !== i.date.end) && (n = !0);
                        const a = [],
                            { sendDttm: o, cliMsgId: d } = await this.getSendDttmOfLatestMediaInOldDB(e),
                            { sendDttm: l, cliMsgId: c, msgId: h } = t,
                            u = { from: [e, 0, ''], to: [e, l, c], excludeFrom: !0, excludeTo: !0 },
                            g = {
                                index: 'convId_sendDttm_cliMsgId',
                                limit: s,
                                direction: qd.CursorDirection.PREV,
                                predicate: (e) => {
                                    if (!e) return !1;
                                    if (!He.default.mapHasItem(e.content)) return !1;
                                    if (!Bi.a.instance.filterDBMessage(e)) return !1;
                                    let t = ol.filterMedia(
                                        { message: e.content, fromUid: e.fromUid, sendDttm: e.sendDttm },
                                        i
                                    );
                                    return (
                                        0 === t && (r = !0),
                                        !!t && ((e.sendDttm > o && e.cliMsgId > d) || (a.push(e), !1))
                                    );
                                },
                                aborted: n ? () => r : void 0,
                            };
                        try {
                            let t = await this.dbTable.getAll(u, g);
                            if (t.length < s) {
                                const n = await this.getMediasOfConvOptimizeModeInOldDB(
                                        e,
                                        { msgId: h },
                                        s - t.length,
                                        i
                                    ),
                                    r = [];
                                n.length > 0
                                    ? a.length > 0
                                        ? (n.forEach((e) => {
                                              const t = a[0];
                                              t && e.sendDttm <= t.sendDttm && e.cliMsgId <= t.cliMsgId
                                                  ? (r.push(t), a.shift())
                                                  : r.push(e);
                                          }),
                                          a.length > 0 && r.push(...a),
                                          t.push(...r.slice(0, s - t.length)))
                                        : t.push(...n)
                                    : a.length > 0 && t.push(...a);
                            }
                            return t;
                        } catch (m) {
                            const t = [e, this.mediaType, s, l, c, !!i].join('_');
                            throw (this.logger.zsymb(18, 11049, 30002, t, m), m);
                        }
                    }
                    async getSendDttmOfLatestMediaInOldDB(e) {
                        const t = {
                                from: [e, 0, ''],
                                to: [e, v.MessageConstants.MAX_SENDDTTM, v.MessageConstants.MAX_MSG_ID],
                                excludeFrom: !1,
                                excludeTo: !1,
                            },
                            s = { index: 'userId_sendDttm_msgId', limit: 1, direction: qd.CursorDirection.PREV },
                            i = await this.getOldDBTable().getAll(t, s);
                        if (!i || !i[0]) return { sendDttm: 0, cliMsgId: '0' };
                        return {
                            sendDttm: 'string' == typeof i[0].sendDttm ? parseInt(i[0].sendDttm) : i[0].sendDttm,
                            cliMsgId: '' + (i[0].cliMsgId || 0),
                        };
                    }
                    async getMediasOfConvOptimizeMode(e, t, s, i) {
                        if (!e || !t || !s)
                            throw Error(
                                `[getMediasOfConvOptimizeMode]: convId: ${e}, lastItemOptions: ${JSON.stringify(
                                    t
                                )}, limit: ${s} isn't valid!`
                            );
                        const { sendDttm: n, cliMsgId: r, msgId: a } = t,
                            o = await this.getMediasOfConvOptimizeModeInNewDB(e, { sendDttm: n, cliMsgId: r }, s, i);
                        return (
                            o.length < s &&
                                !(await this._isMigrationDone()) &&
                                o.push(
                                    ...(await this.getMediasOfConvOptimizeModeInOldDB(e, { msgId: a }, s - o.length, i))
                                ),
                            o
                        );
                    }
                    getMediasOfConvOptimizeModeInNewDB(e, t, s, i) {
                        let n = !1,
                            r = !1;
                        i && i.date && (null !== i.date.start || null !== i.date.end) && (n = !0);
                        const { sendDttm: a, cliMsgId: o } = t,
                            d = { from: [e, 0, ''], to: [e, a, o], excludeFrom: !0, excludeTo: !0 },
                            l = {
                                index: 'convId_sendDttm_cliMsgId',
                                limit: s,
                                direction: qd.CursorDirection.PREV,
                                predicate: (e) => {
                                    if (!e) return !1;
                                    if (!He.default.mapHasItem(e.content)) return !1;
                                    if (!Bi.a.instance.filterDBMessage(e)) return !1;
                                    let t = ol.filterMedia(
                                        { message: e.content, fromUid: e.fromUid, sendDttm: e.sendDttm },
                                        i
                                    );
                                    return 0 === t && (r = !0), !!t;
                                },
                                aborted: n ? () => r : void 0,
                            };
                        try {
                            return this.dbTable.getAll(d, l);
                        } catch (c) {
                            const t = [e, this.mediaType, s, a, o, !!i].join('_');
                            throw (this.logger.zsymb(18, 11049, 30003, t, c), c);
                        }
                    }
                    async getMediasOfConvOptimizeModeInOldDB(e, t, s, i) {
                        if (await this._isMigrationDone()) return [];
                        let n = !1,
                            r = !1;
                        i && i.date && (null != i.date.start || null != i.date.end) && (n = !0);
                        const { msgId: a } = t,
                            o = { from: [e, 0, ''], to: [e, a.length, a], excludeFrom: !0, excludeTo: !0 },
                            d = {
                                index: 'userId_sendDttm_msgId',
                                limit: s,
                                direction: qd.CursorDirection.PREV,
                                predicate: (e) => {
                                    if (e) {
                                        if (e.msgId && e.msgId.includes('_')) return !1;
                                        if (!He.default.mapHasItem(e.message)) return !1;
                                    }
                                    if (!Bi.a.instance.filterDBMessage(e)) return !1;
                                    let t = ol.filterMedia(e, i);
                                    return 0 === t && (r = !0), !!t;
                                },
                                aborted: n ? () => r : void 0,
                            };
                        try {
                            const e = await this.getOldDBTable().getAll(o, d);
                            return (await this.correctMediasInOldDB(e)).map((e) =>
                                this.getMediaMapper().toDomainFromOldDomain(e)
                            );
                        } catch (l) {
                            const t = [e, this.mediaType, s, a, !!i].join('_');
                            throw (this.logger.zsymb(18, 11049, 30004, t, l), l);
                        }
                    }
                    getLastMediasOfConvInNewDB(e, t, s) {
                        const { sendDttm: i, cliMsgId: n } = t,
                            r = { from: [e, 0, ''], to: [e, i, n], excludeFrom: !1, excludeTo: !1 },
                            a = { index: 'convId_sendDttm_cliMsgId', limit: s, direction: qd.CursorDirection.PREV };
                        return this.dbTable.getAll(r, a);
                    }
                    async getLastMediasOfConvInOldDB(e, t, s) {
                        if (await this._isMigrationDone()) return [];
                        const { msgId: n } = t,
                            r = { from: [e, 0, ''], to: [e, n.length, n], excludeFrom: !1, excludeTo: !1 },
                            a = { index: 'userId_sendDttm_msgId', limit: s, direction: qd.CursorDirection.PREV },
                            o = await this.getOldDBTable().getAll(r, a);
                        return o.length > 0
                            ? o.map((e) =>
                                  Object(i.a)(
                                      Object(i.a)({}, this.getMediaMapper().toDomainFromOldDomain(e)),
                                      {},
                                      { msgId: e.msgId }
                                  )
                              )
                            : [];
                    }
                    correctMediasInOldDB(e, t) {
                        return (
                            void 0 === t && (t = { saveBack: !0 }),
                            e && e.length
                                ? new Promise((s) => {
                                      let i = [],
                                          n = {},
                                          r = [];
                                      if (
                                          (e.forEach((e) => {
                                              e &&
                                                  e.msgId &&
                                                  e.sendDttm &&
                                                  (e.type && e.cliMsgId
                                                      ? r.push(e)
                                                      : (i.push(e.msgId), (n[e.msgId] = e)));
                                          }),
                                          !i.length)
                                      )
                                          return s(r);
                                      {
                                          let e = '';
                                          const a = (t, s) => {
                                              switch (s.msgType) {
                                                  case v.MSG_PHOTO:
                                                  case v.MSG_PHOTO_2:
                                                      (e = 'image'), (t.subType = v.MSG_SUBTYPE_PHOTO);
                                                      break;
                                                  case v.MSG_VIDEO:
                                                      (e = 'image'), (t.subType = v.MSG_SUBTYPE_MEDIA_VIDEO);
                                                      break;
                                                  case v.MSG_FILE:
                                                      e = 'file';
                                                      break;
                                                  case v.MSG_CONTACT:
                                                      'object' == typeof s.message &&
                                                          'recommened.link' === s.message.action &&
                                                          (e = 'link');
                                              }
                                              return (t.cliMsgId = s.cliMsgId), (t.type = e), t;
                                          };
                                          le.default
                                              .getMessagesByIdsInQueue(i)
                                              .then((e) => {
                                                  const i = [];
                                                  if (e) for (let t in e) e[t] && i.push(a(n[t], e[t]));
                                                  let o = r.concat(i);
                                                  return (
                                                      o.sort((e, t) => parseInt(t.sendDttm) - parseInt(e.sendDttm)),
                                                      i.length && t.saveBack && this.deleteAndInsertInOldDB(i),
                                                      s(o)
                                                  );
                                              })
                                              .catch((e) => s(r));
                                      }
                                  })
                                : Promise.resolve([])
                        );
                    }
                    async deleteAndInsertInOldDB(e) {
                        if (!e || !e.length)
                            throw Error(`[deleteAndInsertInOldDB]: oldItems: ${JSON.stringify(e)} isn't valid!`);
                        return this.getOldDBTable().insertMulti(e, { replace: !0 });
                    }
                    async _isMigrationDone() {
                        return (await this._mediaMigrationManager.getMediaMigrationState()).stateName === Hd;
                    }
                }
                class dl extends ol {
                    constructor(e, t, s, i, n, r) {
                        super(e, t, s, i, n, r);
                    }
                    async getImageMessagesForPhotoViewer(e, t, s, n, r, a) {
                        const o = await this.getMsgIdsOfImageMediaForPhotoViewer(e, s, t, n, r, a);
                        if (null == o || !o.length) return [];
                        const d = await Promise.all(o.map((e) => this.getMediaMapper().toDTO(e))),
                            l = [];
                        let c = [];
                        for (const h of d)
                            l.push(
                                P.a
                                    .getInstance()
                                    .Core.Message.get(h.msgId, { partition: e })
                                    .then((e) => {
                                        e ? c.push(Object(i.a)(Object(i.a)({}, h), e)) : h.message && c.push(h);
                                    })
                            );
                        return await Promise.all(l), c.reverse(), le.default._fillExifBeforeShow(c), c;
                    }
                    async getMsgIdsOfImageMediaForPhotoViewer(e, t, s, i, n, r) {
                        const { cliMsgId: a, sendDttm: o, msgId: d } = t,
                            l = !i && !n;
                        let c = !1;
                        const h = () => c,
                            u = (e) => {
                                if (!(r && (r.member || (r.date && (r.date.start || r.date.end)) || r.name || r.ext)))
                                    return !0;
                                if (!r.member || (e.fromUid && e.fromUid === r.member)) {
                                    let s, i, n;
                                    if (r.name) {
                                        if (e.message.params && e.message.href)
                                            try {
                                                let t = JSON.parse(e.message.params);
                                                (s = t.mediaTitle
                                                    ? He.default.simpleStripVietnamese(t.mediaTitle)
                                                    : He.default.simpleStripVietnamese(e.message.title)),
                                                    (i = t.src);
                                            } catch (t) {
                                                return this.logger.zsymb(18, 11029, 3e4, t), !1;
                                            }
                                        n = He.default.simpleStripVietnamese(r.name);
                                    }
                                    if (!r.name || He.default.searchContent(s, n) || He.default.searchContent(i, n)) {
                                        let t = !1;
                                        if (
                                            (r.ext && (t = v.fileExt[r.ext].some((t) => e.message.title.endsWith(t))),
                                            !r.ext || t)
                                        )
                                            return (
                                                !r.date.start ||
                                                !r.date.end ||
                                                (r.date.end < e.sendDttm
                                                    ? e.sendDttm < r.date.start + 864e5
                                                    : ((c = !0), !1))
                                            );
                                    }
                                }
                                return !1;
                            };
                        let g = [];
                        if (i) {
                            const t = async () => {
                                let t = [];
                                if (!(await this._isMigrationDone())) {
                                    const i = {
                                            from: [e, d.length, d],
                                            to: [
                                                e,
                                                v.MessageConstants.MAX_MSG_ID.length,
                                                v.MessageConstants.MAX_MSG_ID,
                                            ],
                                            excludeFrom: !l,
                                            excludeTo: !l,
                                        },
                                        n = {
                                            limit: s,
                                            index: 'userId_sendDttm_msgId',
                                            direction: qd.CursorDirection.NEXT,
                                            predicate: (e) =>
                                                u({
                                                    fromUid: e.fromUid,
                                                    message: e.message,
                                                    sendDttm:
                                                        'string' == typeof e.sendDttm
                                                            ? parseInt(e.sendDttm)
                                                            : e.sendDttm,
                                                }),
                                            aborted: h,
                                        };
                                    t = await this.getAllInOldDB(i, n);
                                }
                                if (t.length < s) {
                                    const i = {
                                            from: [e, o, a],
                                            to: [
                                                e,
                                                parseInt(v.MessageConstants.MAX_SENDDTTM),
                                                v.MessageConstants.MAX_MSG_ID,
                                            ],
                                            excludeFrom: !l,
                                            excludeTo: !l,
                                        },
                                        n = {
                                            limit: s - t.length,
                                            index: 'convId_sendDttm_cliMsgId',
                                            direction: qd.CursorDirection.NEXT,
                                            predicate: (e) =>
                                                u({ fromUid: e.fromUid, message: e.content, sendDttm: e.sendDttm }),
                                            aborted: h,
                                        };
                                    t.push(...(await this.getAll(i, n)));
                                }
                                return t;
                            };
                            g.push(t());
                        }
                        if (n) {
                            const t = async () => {
                                let t = [];
                                const i = { from: [e, 0, ''], to: [e, o, a], excludeFrom: !l, excludeTo: !l },
                                    n = {
                                        limit: s,
                                        index: 'convId_sendDttm_cliMsgId',
                                        direction: qd.CursorDirection.PREV,
                                        predicate: (e) =>
                                            u({ fromUid: e.fromUid, message: e.content, sendDttm: e.sendDttm }),
                                        aborted: h,
                                    };
                                if (((t = await this.getAll(i, n)), t.length < s && !(await this._isMigrationDone()))) {
                                    const i = {
                                            from: [e, 0, ''],
                                            to: [e, d.length, d],
                                            excludeFrom: !l,
                                            excludeTo: !l,
                                        },
                                        n = {
                                            limit: t ? s - t.length : s,
                                            index: 'userId_sendDttm_msgId',
                                            direction: qd.CursorDirection.PREV,
                                            predicate: (e) =>
                                                u({
                                                    fromUid: e.fromUid,
                                                    message: e.message,
                                                    sendDttm:
                                                        'string' == typeof e.sendDttm
                                                            ? parseInt(e.sendDttm)
                                                            : e.sendDttm,
                                                }),
                                            aborted: h,
                                        };
                                    t.push(...(await this.getAllInOldDB(i, n)));
                                }
                                return t;
                            };
                            g.push(t());
                        }
                        try {
                            const e = await Promise.all(g);
                            if (2 === e.length) {
                                let t = e[0].reverse();
                                return t.pop(), (t = t.concat(e[1])), t;
                            }
                            return n ? e[0] : e[0].reverse();
                        } catch (m) {
                            return this.logger.zsymb(18, 11029, 30001, m), [];
                        }
                    }
                }
                const ll = Object(d.define)('image-media-repository');
                var cl,
                    hl = s('H8Z7');
                Object(d.injectable)()(
                    (cl =
                        Object(d.singleton)(ll)(
                            (cl =
                                (function (e, t) {
                                    return Object(d.inject)(wd)(e, void 0, 0);
                                })(
                                    (cl =
                                        (function (e, t) {
                                            return Object(d.inject)(hl.c)(e, void 0, 1);
                                        })(
                                            (cl =
                                                (function (e, t) {
                                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 2);
                                                })(
                                                    (cl =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (cl =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    Object,
                                                                    void 0 === hl.IMediaMigrationManager
                                                                        ? Object
                                                                        : hl.IMediaMigrationManager,
                                                                    void 0 === N.ZLoggerFactory
                                                                        ? Object
                                                                        : N.ZLoggerFactory,
                                                                ])(
                                                                    (cl = class extends dl {
                                                                        constructor(e, t, s) {
                                                                            super(
                                                                                'Media',
                                                                                'Image',
                                                                                'image',
                                                                                'crud-image-media',
                                                                                t,
                                                                                s
                                                                            ),
                                                                                (this.imageMediaMapper = void 0),
                                                                                (this.oldDBTable = void 0),
                                                                                (this.imageMediaMapper = e),
                                                                                (this.oldDBTable =
                                                                                    this._dalInstance.Core.Image);
                                                                        }
                                                                        getOldDBTable() {
                                                                            return (
                                                                                this.oldDBTable ||
                                                                                    (this.oldDBTable =
                                                                                        P.a.getInstance().Core.Image),
                                                                                this.oldDBTable
                                                                            );
                                                                        }
                                                                        getMediaMapper() {
                                                                            return this.imageMediaMapper;
                                                                        }
                                                                        deleteMatch(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        getAllKey(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        put(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        runTransaction(e, t, s) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                    })
                                                                ) || cl)
                                                        ) || cl)
                                                ) || cl)
                                        ) || cl)
                                ) || cl)
                        ) || cl)
                );
                class ul extends ol {
                    constructor(e, t, s, i, n, r) {
                        super(e, t, s, i, n, r);
                    }
                    async getLastestAddedFiles(e, t) {
                        if (!e || 'number' != typeof t)
                            throw Error(`[getLastestAddedFiles]: ${JSON.stringify(e)} or ${t} isn't valid!`);
                        const s = await this.getLastestAddedFilesInNewDB(e, t);
                        return (
                            s.length < t &&
                                !(await this._isMigrationDone()) &&
                                s.push(
                                    ...(await this.getLastestAddedFilesInOldDB({ sendDttm: e.sendDttm }, t - s.length))
                                ),
                            s
                        );
                    }
                    async getLastestAddedFilesInNewDB(e, t) {
                        const { convId: s, sendDttm: i, cliMsgId: n } = e;
                        return this.dbTable.getAll(
                            { from: ['', 0, 0], to: [s, i, n], excludeFrom: !0, excludeTo: !0 },
                            { index: 'convId_sendDttm_cliMsgId', limit: t, direction: qd.CursorDirection.PREV }
                        );
                    }
                    async getLastestAddedFilesInOldDB(e, t) {
                        if (await this._isMigrationDone()) return [];
                        const s = await this.getOldDBTable().getAll(
                            { from: 0, to: e.sendDttm, excludeFrom: !0, excludeTo: !0 },
                            { index: 'sendDttm', limit: t, direction: qd.CursorDirection.PREV }
                        );
                        return s.length > 0 ? s.map((e) => this.getMediaMapper().toDomainFromOldDomain(e)) : [];
                    }
                }
                const gl = Object(d.define)('file-media-repository');
                var ml;
                Object(d.injectable)()(
                    (ml =
                        Object(d.singleton)(gl)(
                            (ml =
                                (function (e, t) {
                                    return Object(d.inject)(Sd)(e, void 0, 0);
                                })(
                                    (ml =
                                        (function (e, t) {
                                            return Object(d.inject)(hl.c)(e, void 0, 1);
                                        })(
                                            (ml =
                                                (function (e, t) {
                                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 2);
                                                })(
                                                    (ml =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (ml =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    Object,
                                                                    void 0 === hl.IMediaMigrationManager
                                                                        ? Object
                                                                        : hl.IMediaMigrationManager,
                                                                    void 0 === N.ZLoggerFactory
                                                                        ? Object
                                                                        : N.ZLoggerFactory,
                                                                ])(
                                                                    (ml = class extends ul {
                                                                        constructor(e, t, s) {
                                                                            super(
                                                                                'Media',
                                                                                'File',
                                                                                'file',
                                                                                'crud-file-media',
                                                                                t,
                                                                                s
                                                                            ),
                                                                                (this.fileMediaMapper = void 0),
                                                                                (this.oldDBTable = void 0),
                                                                                (this.fileMediaMapper = e),
                                                                                (this.oldDBTable =
                                                                                    this._dalInstance.Core.File);
                                                                        }
                                                                        getOldDBTable() {
                                                                            return (
                                                                                this.oldDBTable ||
                                                                                    (this.oldDBTable =
                                                                                        P.a.getInstance().Core.File),
                                                                                this.oldDBTable
                                                                            );
                                                                        }
                                                                        getMediaMapper() {
                                                                            return this.fileMediaMapper;
                                                                        }
                                                                        deleteMatch(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        getAllKey(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        put(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        runTransaction(e, t, s) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                    })
                                                                ) || ml)
                                                        ) || ml)
                                                ) || ml)
                                        ) || ml)
                                ) || ml)
                        ) || ml)
                );
                class pl extends ol {
                    constructor(e, t, s, i, n, r) {
                        super(e, t, s, i, n, r);
                    }
                }
                const fl = Object(d.define)('link-media-repository');
                var vl;
                Object(d.injectable)()(
                    (vl =
                        Object(d.singleton)(fl)(
                            (vl =
                                (function (e, t) {
                                    return Object(d.inject)(Dd)(e, void 0, 0);
                                })(
                                    (vl =
                                        (function (e, t) {
                                            return Object(d.inject)(hl.c)(e, void 0, 1);
                                        })(
                                            (vl =
                                                (function (e, t) {
                                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 2);
                                                })(
                                                    (vl =
                                                        Reflect.metadata(
                                                            'design:type',
                                                            Function
                                                        )(
                                                            (vl =
                                                                Reflect.metadata('design:paramtypes', [
                                                                    Object,
                                                                    void 0 === hl.IMediaMigrationManager
                                                                        ? Object
                                                                        : hl.IMediaMigrationManager,
                                                                    void 0 === N.ZLoggerFactory
                                                                        ? Object
                                                                        : N.ZLoggerFactory,
                                                                ])(
                                                                    (vl = class extends pl {
                                                                        constructor(e, t, s) {
                                                                            super(
                                                                                'Media',
                                                                                'Link',
                                                                                'link',
                                                                                'crud-link-media',
                                                                                t,
                                                                                s
                                                                            ),
                                                                                (this.linkMediaMapper = void 0),
                                                                                (this.oldDBTable = void 0),
                                                                                (this.linkMediaMapper = e),
                                                                                (this.oldDBTable =
                                                                                    this._dalInstance.Core.Link);
                                                                        }
                                                                        getOldDBTable() {
                                                                            return (
                                                                                this.oldDBTable ||
                                                                                    (this.oldDBTable =
                                                                                        P.a.getInstance().Core.Link),
                                                                                this.oldDBTable
                                                                            );
                                                                        }
                                                                        getMediaMapper() {
                                                                            return this.linkMediaMapper;
                                                                        }
                                                                        deleteMatch(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        getAllKey(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        put(e, t) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                        runTransaction(e, t, s) {
                                                                            throw Error(
                                                                                "Currently, this method isn't supported!"
                                                                            );
                                                                        }
                                                                    })
                                                                ) || vl)
                                                        ) || vl)
                                                ) || vl)
                                        ) || vl)
                                ) || vl)
                        ) || vl)
                );
                var bl = s('hWjG');
                const yl = Object(d.define)('utils-media-repository');
                class Il {
                    constructor(e) {
                        (this._lruCache = void 0), (this._lruCache = new O.default(e));
                    }
                    get(e) {
                        return this._lruCache.get(e);
                    }
                    getAll(e) {
                        void 0 === e && (e = 'ASC');
                        const t = 'ASC' === e ? this._lruCache.entriesAscending() : this._lruCache.entriesDescending();
                        return Object.values(t);
                    }
                    getAllKey(e) {
                        void 0 === e && (e = 'ASC');
                        const t = 'ASC' === e ? this._lruCache.entriesAscending() : this._lruCache.entriesDescending();
                        return Object.keys(t);
                    }
                    set(e, t) {
                        this._lruCache.set(e, t);
                    }
                    delete(e) {
                        return this._lruCache.delete(e);
                    }
                    clear() {
                        this._lruCache.clear();
                    }
                }
                var _l;
                Object(d.injectable)()(
                    (_l =
                        Object(d.singleton)(yl)(
                            (_l =
                                (function (e, t) {
                                    return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 0);
                                })(
                                    (_l =
                                        Reflect.metadata(
                                            'design:type',
                                            Function
                                        )(
                                            (_l =
                                                Reflect.metadata('design:paramtypes', [
                                                    void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                ])(
                                                    (_l = class extends bl.a {
                                                        constructor(e) {
                                                            super(
                                                                'Media',
                                                                'UtilsMedia',
                                                                'utils-media-repo',
                                                                e,
                                                                'id',
                                                                Ad.b
                                                            ),
                                                                (this._cache = new Il({ maxSize: Ad.b }));
                                                        }
                                                        async isExisted(e) {
                                                            if (!e) return !1;
                                                            const t = this._cache.get(e);
                                                            if (!t) {
                                                                const t = await this._dbCollection.get(e);
                                                                return t && this._cache.set(e, t), !!t;
                                                            }
                                                            return !!t;
                                                        }
                                                        async update(e, t) {
                                                            const s = await this._dbCollection.update(e, t);
                                                            return s && this._cache.set(e, s), s;
                                                        }
                                                        async updateMulti(e) {
                                                            const t = await this._dbCollection.updateMulti(e);
                                                            return (
                                                                t.success.forEach((e) => this._cache.set(e.id, e)), t
                                                            );
                                                        }
                                                        getAllSenderIds(e, t) {
                                                            if ((void 0 === t && (t = !0), !e))
                                                                throw Error(`[getAllSenderIds]: id: ${e} isn't valid!`);
                                                            return this._getItemListByField(e, 'senderIds', t);
                                                        }
                                                        getAllFileTypes(e, t) {
                                                            if (!e)
                                                                throw Error(`[getAllFileTypes]: id: ${e} isn't valid!`);
                                                            return this._getItemListByField(e, 'fileTypes', t);
                                                        }
                                                        saveSender(e, t) {
                                                            if (!e) throw Error(`[saveSender]: id: ${e} isn't valid!`);
                                                            return this._saveValueOnField(e, 'senderIds', t);
                                                        }
                                                        saveFileType(e, t) {
                                                            if (!e)
                                                                throw Error(`[saveFileType]: id: ${e} isn't valid!`);
                                                            return this._saveValueOnField(e, 'fileTypes', t);
                                                        }
                                                        saveSenders(e, t) {
                                                            if (!e) throw Error(`[saveSenders]: id: ${e} isn't valid!`);
                                                            return this._saveValuesOnField(e, 'senderIds', t);
                                                        }
                                                        saveFileTypes(e, t) {
                                                            if (!e) throw Error(`[saveSenders]: id: ${e} isn't valid!`);
                                                            return this._saveValuesOnField(e, 'fileTypes', t);
                                                        }
                                                        deleteSender(e, t) {
                                                            if (!e)
                                                                throw Error(`[deleteSender]: id: ${e} isn't valid!`);
                                                            return this._deleteValueOnField(e, 'senderIds', t);
                                                        }
                                                        deleteFileType(e, t) {
                                                            if (!e)
                                                                throw Error(`[deleteFileType]: id: ${e} isn't valid!`);
                                                            return this._deleteValueOnField(e, 'fileTypes', t);
                                                        }
                                                        deleteSenders(e, t) {
                                                            if (!e)
                                                                throw Error(`[deleteSenders]: id: ${e} isn't valid!`);
                                                            return this._deleteValuesByField(e, 'senderIds', t);
                                                        }
                                                        deleteFileTypes(e, t) {
                                                            if (!e)
                                                                throw Error(`[deleteFileTypes]: id: ${e} isn't valid!`);
                                                            return this._deleteValuesByField(e, 'fileTypes', t);
                                                        }
                                                        async _saveValueOnField(e, t, s) {
                                                            const i =
                                                                this._cache.get(e) || (await this._dbCollection.get(e));
                                                            if (i) {
                                                                i[t].some((e) => e === s) ||
                                                                    (i[t].push(s),
                                                                    await this.update(e, {
                                                                        value: { [t]: i[t] },
                                                                        attributes: [t],
                                                                    }));
                                                            }
                                                            return !0;
                                                        }
                                                        async _saveValuesOnField(e, t, s) {
                                                            const i =
                                                                this._cache.get(e) || (await this._dbCollection.get(e));
                                                            if (i) {
                                                                const n = s.filter((e) => !i[t].includes(e));
                                                                n.length &&
                                                                    (i[t].push(...n),
                                                                    await this.update(e, {
                                                                        value: { [t]: i[t] },
                                                                        attributes: [t],
                                                                    }));
                                                            }
                                                            return !0;
                                                        }
                                                        async _deleteValueOnField(e, t, s) {
                                                            const i =
                                                                this._cache.get(e) || (await this._dbCollection.get(e));
                                                            if (i) {
                                                                const n = i[t].indexOf(s);
                                                                -1 !== n &&
                                                                    (i[t].splice(n, 1),
                                                                    await this.update(e, {
                                                                        value: { [t]: i[t] },
                                                                        attributes: [t],
                                                                    }));
                                                            }
                                                            return !0;
                                                        }
                                                        async _deleteValuesByField(e, t, s) {
                                                            const i =
                                                                this._cache.get(e) || (await this._dbCollection.get(e));
                                                            if (i) {
                                                                const n = i[t].filter((e) => !s.includes(e));
                                                                n.length < i[t].length &&
                                                                    ((i[t] = n),
                                                                    await this.update(e, {
                                                                        value: { [t]: n },
                                                                        attributes: [t],
                                                                    }));
                                                            }
                                                            return !0;
                                                        }
                                                        async _getItemListByField(e, t, s) {
                                                            var n;
                                                            void 0 === s && (s = !0);
                                                            const r = this._cache.get(e);
                                                            var a;
                                                            if (s)
                                                                return r &&
                                                                    null !== (a = r[t]) &&
                                                                    void 0 !== a &&
                                                                    a.length
                                                                    ? r[t].slice()
                                                                    : [];
                                                            const o = await this._dbCollection.get(e);
                                                            return (
                                                                o && !r && this._cache.set(e, Object(i.a)({}, o)),
                                                                o && null !== (n = o[t]) && void 0 !== n && n.length
                                                                    ? o[t].slice()
                                                                    : []
                                                            );
                                                        }
                                                    })
                                                ) || _l)
                                        ) || _l)
                                ) || _l)
                        ) || _l)
                );
                const Ml = Object(d.define)('media-mapper-factory');
                var Cl;
                Object(d.injectable)()(
                    (Cl =
                        Object(d.singleton)(Ml)(
                            (Cl = class {
                                getMediaMapper(e) {
                                    switch (e) {
                                        case 'image':
                                            return d.ModuleContainer.resolve(wd);
                                        case 'file':
                                            return d.ModuleContainer.resolve(Sd);
                                        case 'link':
                                            return d.ModuleContainer.resolve(Dd);
                                        default:
                                            return;
                                    }
                                }
                            })
                        ) || Cl)
                );
                const Tl = Object(d.define)('media-repository-factory');
                var Ol;
                Object(d.injectable)()(
                    (Ol =
                        Object(d.singleton)(Tl)(
                            (Ol = class {
                                getMediaRepository(e) {
                                    switch (e) {
                                        case 'image':
                                            return d.ModuleContainer.resolve(ll);
                                        case 'link':
                                            return d.ModuleContainer.resolve(fl);
                                        case 'file':
                                            return d.ModuleContainer.resolve(gl);
                                        default:
                                            return;
                                    }
                                }
                            })
                        ) || Ol)
                );
                const El = 'utils-media-domain-service',
                    Sl = Object(d.define)(El);
                function wl(e) {
                    const t = e;
                    return function (e, s, i) {
                        void 0 === i && (i = 'error');
                        const n = `${e} ${i}: ${s}`;
                        switch (i) {
                            case 'error':
                                t.zsymb(18, 11026, 3e4, n);
                                break;
                            case 'debug':
                                t.zsymb(12, 11026, 30001, n);
                                break;
                            case 'info':
                                t.zsymb(0, 11026, 30002, n);
                        }
                    };
                }
                var Dl;
                Object(d.injectable)()(
                    (Dl =
                        Object(d.singleton)(Sl)(
                            (Dl =
                                (function (e, t) {
                                    return Object(d.inject)(yl)(e, void 0, 0);
                                })(
                                    (Dl =
                                        (function (e, t) {
                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                        })(
                                            (Dl =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (Dl =
                                                        Reflect.metadata('design:paramtypes', [
                                                            Object,
                                                            void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                        ])(
                                                            (Dl = class {
                                                                constructor(e, t) {
                                                                    (this._log = void 0),
                                                                        (this._logger = void 0),
                                                                        (this._utilsMediaRepository = void 0),
                                                                        (this._utilsMediaRepository = e),
                                                                        (this._logger = t.createZLogger(
                                                                            'utils-media-domain-service',
                                                                            ['mn-utils-media-de']
                                                                        )),
                                                                        (this._log = wl(this._logger));
                                                                }
                                                                async create(e) {
                                                                    if (!e)
                                                                        throw Error(`utilsMedia(${e}) isn't existed!`);
                                                                    if (!e.convId || !e.mediaType)
                                                                        throw Error(
                                                                            `cannot create utilsMedia with convId(${e.convId}) and mediaType(${e.mediaType})`
                                                                        );
                                                                    if (
                                                                        await this._utilsMediaRepository.isExisted(
                                                                            `${e.convId}_${e.mediaType}`
                                                                        )
                                                                    )
                                                                        throw (
                                                                            (this._log(
                                                                                '[create]',
                                                                                `existed utilsMedia have convId(${e.convId}) and mediaType(${e.mediaType})`,
                                                                                'info'
                                                                            ),
                                                                            Error(
                                                                                `existed utilsMedia have convId(${e.convId}) and mediaType(${e.mediaType})`
                                                                            ))
                                                                        );
                                                                    return {
                                                                        id: `${e.convId}_${e.mediaType}`,
                                                                        convId: e.convId,
                                                                        mediaType: e.mediaType,
                                                                        senderIds: e.senderIds || [],
                                                                        fileTypes: e.fileTypes || [],
                                                                    };
                                                                }
                                                                addSenders(e, t) {
                                                                    if (!e)
                                                                        throw Error(
                                                                            "[addFileTypes] utilsMediaEntity isn't existed!"
                                                                        );
                                                                    if (!t || !t.length) return Object(i.a)({}, e);
                                                                    return Object(i.a)(
                                                                        Object(i.a)({}, e),
                                                                        {},
                                                                        {
                                                                            senderIds: t.reduce(
                                                                                (e, t) => (
                                                                                    e.includes(t) || e.push(t), e
                                                                                ),
                                                                                [...e.senderIds] || !1
                                                                            ),
                                                                        }
                                                                    );
                                                                }
                                                                addFileTypes(e, t) {
                                                                    if (!e)
                                                                        throw Error(
                                                                            "[addFileTypes] utilsMediaEntity isn't existed!"
                                                                        );
                                                                    if (!t || !t.length) return Object(i.a)({}, e);
                                                                    const s = Object(i.a)(
                                                                        Object(i.a)({}, e),
                                                                        {},
                                                                        {
                                                                            fileTypes: t.reduce(
                                                                                (e, t) => (
                                                                                    e.includes(t) || e.push(t), e
                                                                                ),
                                                                                [...e.fileTypes] || !1
                                                                            ),
                                                                        }
                                                                    );
                                                                    return s;
                                                                }
                                                            })
                                                        ) || Dl)
                                                ) || Dl)
                                        ) || Dl)
                                ) || Dl)
                        ) || Dl)
                );
                const Ll = 'utils-media-app-service',
                    Fl = Object(d.define)(Ll);
                var Rl;
                Object(d.injectable)()(
                    (Rl =
                        Object(d.singleton)(Fl)(
                            (Rl =
                                (function (e, t) {
                                    return Object(d.inject)(Sl)(e, void 0, 0);
                                })(
                                    (Rl =
                                        (function (e, t) {
                                            return Object(d.inject)(yl)(e, void 0, 1);
                                        })(
                                            (Rl =
                                                (function (e, t) {
                                                    return Object(d.inject)(Ed)(e, void 0, 2);
                                                })(
                                                    (Rl =
                                                        (function (e, t) {
                                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 3);
                                                        })(
                                                            (Rl =
                                                                Reflect.metadata(
                                                                    'design:type',
                                                                    Function
                                                                )(
                                                                    (Rl =
                                                                        Reflect.metadata('design:paramtypes', [
                                                                            Object,
                                                                            Object,
                                                                            Object,
                                                                            void 0 === N.ZLoggerFactory
                                                                                ? Object
                                                                                : N.ZLoggerFactory,
                                                                        ])(
                                                                            (Rl = class {
                                                                                constructor(e, t, s, i) {
                                                                                    (this._utilsMediaDomainService =
                                                                                        void 0),
                                                                                        (this._utilsMediaRepository =
                                                                                            void 0),
                                                                                        (this._mapper = void 0),
                                                                                        (this._logger = void 0),
                                                                                        (this._log = void 0),
                                                                                        (this._utilsMediaDomainService =
                                                                                            e),
                                                                                        (this._utilsMediaRepository =
                                                                                            t),
                                                                                        (this._mapper = s),
                                                                                        (this._logger = i.createZLogger(
                                                                                            Ll,
                                                                                            [
                                                                                                'manage-utils-media-in-app',
                                                                                            ]
                                                                                        )),
                                                                                        (this._log = wl(this._logger));
                                                                                }
                                                                                async create(e) {
                                                                                    try {
                                                                                        const t =
                                                                                            await this._utilsMediaDomainService.create(
                                                                                                e
                                                                                            );
                                                                                        return this._mapper.toUtilsMediaDTOFromDomain(
                                                                                            await this._utilsMediaRepository.insert(
                                                                                                t
                                                                                            )
                                                                                        );
                                                                                    } catch (t) {
                                                                                        return void this._log(
                                                                                            '[create]',
                                                                                            t.message
                                                                                        );
                                                                                    }
                                                                                }
                                                                                async createOrUpdate(e) {
                                                                                    try {
                                                                                        const t = `${e.convId}_${e.mediaType}`;
                                                                                        let s =
                                                                                            await this._utilsMediaRepository.get(
                                                                                                t
                                                                                            );
                                                                                        if (s) {
                                                                                            const {
                                                                                                senderIds: i,
                                                                                                fileTypes: n,
                                                                                            } = e;
                                                                                            let r = s.senderIds,
                                                                                                a = s.fileTypes;
                                                                                            if (
                                                                                                (i &&
                                                                                                    i.length &&
                                                                                                    (r =
                                                                                                        this._utilsMediaDomainService.addSenders(
                                                                                                            s,
                                                                                                            i
                                                                                                        ).senderIds),
                                                                                                n &&
                                                                                                    n.length &&
                                                                                                    (a =
                                                                                                        this._utilsMediaDomainService.addFileTypes(
                                                                                                            s,
                                                                                                            n
                                                                                                        ).fileTypes),
                                                                                                r.length !==
                                                                                                    s.senderIds
                                                                                                        .length ||
                                                                                                    a.length !==
                                                                                                        s.fileTypes
                                                                                                            .length)
                                                                                            ) {
                                                                                                const e =
                                                                                                    await this._utilsMediaRepository.update(
                                                                                                        t,
                                                                                                        {
                                                                                                            value: {
                                                                                                                senderIds:
                                                                                                                    r,
                                                                                                                fileTypes:
                                                                                                                    a,
                                                                                                            },
                                                                                                            attributes:
                                                                                                                [
                                                                                                                    'senderIds',
                                                                                                                    'fileTypes',
                                                                                                                ],
                                                                                                        }
                                                                                                    );
                                                                                                return this._mapper.toUtilsMediaDTOFromDomain(
                                                                                                    e
                                                                                                );
                                                                                            }
                                                                                            return this._mapper.toUtilsMediaDTOFromDomain(
                                                                                                s
                                                                                            );
                                                                                        }
                                                                                        return this.create(e);
                                                                                    } catch (t) {
                                                                                        return void this._log(
                                                                                            '[createOrUpdate]',
                                                                                            t.message
                                                                                        );
                                                                                    }
                                                                                }
                                                                                async deleteUtilsMediasByConvId(e) {
                                                                                    try {
                                                                                        if (!e) return [];
                                                                                        const t = Object.values(
                                                                                            Ad.e
                                                                                        ).map((t) => `${e}_${t}`);
                                                                                        return (
                                                                                            await this._utilsMediaRepository.deleteMulti(
                                                                                                t
                                                                                            )
                                                                                        ).success;
                                                                                    } catch (t) {
                                                                                        return (
                                                                                            this._log(
                                                                                                '[deleteUtilsMediasByConvId]',
                                                                                                t.message
                                                                                            ),
                                                                                            []
                                                                                        );
                                                                                    }
                                                                                }
                                                                                async createOrUpdateFromMedias(e) {
                                                                                    try {
                                                                                        if (!e || !e.length) return [];
                                                                                        const t = new Map();
                                                                                        e.forEach((e) => {
                                                                                            let s = t.get(e.convId);
                                                                                            if (
                                                                                                'image' ===
                                                                                                    e.mediaType ||
                                                                                                'link' === e.mediaType
                                                                                            )
                                                                                                if (s) {
                                                                                                    -1 ===
                                                                                                        s.senderIds.indexOf(
                                                                                                            e.fromUid
                                                                                                        ) &&
                                                                                                        (s.senderIds.push(
                                                                                                            e.fromUid
                                                                                                        ),
                                                                                                        t.set(
                                                                                                            e.convId,
                                                                                                            s
                                                                                                        ));
                                                                                                } else
                                                                                                    (s = {
                                                                                                        convId: e.convId,
                                                                                                        mediaType:
                                                                                                            e.mediaType,
                                                                                                        senderIds: [
                                                                                                            e.fromUid,
                                                                                                        ],
                                                                                                        fileTypes: [],
                                                                                                    }),
                                                                                                        t.set(
                                                                                                            e.convId,
                                                                                                            s
                                                                                                        );
                                                                                            else if (
                                                                                                'file' === e.mediaType
                                                                                            ) {
                                                                                                const i =
                                                                                                    this._getFileType(
                                                                                                        e.content.params
                                                                                                    );
                                                                                                if (s) {
                                                                                                    -1 ===
                                                                                                        s.fileTypes.indexOf(
                                                                                                            i
                                                                                                        ) &&
                                                                                                        (s.fileTypes.push(
                                                                                                            i
                                                                                                        ),
                                                                                                        t.set(
                                                                                                            e.convId,
                                                                                                            s
                                                                                                        ));
                                                                                                } else
                                                                                                    (s = {
                                                                                                        convId: e.convId,
                                                                                                        mediaType:
                                                                                                            e.mediaType,
                                                                                                        senderIds: [
                                                                                                            e.fromUid,
                                                                                                        ],
                                                                                                        fileTypes: [i],
                                                                                                    }),
                                                                                                        t.set(
                                                                                                            e.convId,
                                                                                                            s
                                                                                                        );
                                                                                            }
                                                                                        });
                                                                                        const s = Array.from(
                                                                                            t.values()
                                                                                        );
                                                                                        return (
                                                                                            await Promise.all(
                                                                                                s.map((e) =>
                                                                                                    this.createOrUpdate(
                                                                                                        e
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        ).filter(Boolean);
                                                                                    } catch (t) {
                                                                                        return (
                                                                                            this._log(
                                                                                                '[createOrUpdateFromMedias]',
                                                                                                t.message
                                                                                            ),
                                                                                            []
                                                                                        );
                                                                                    }
                                                                                }
                                                                                _getFileType(e) {
                                                                                    try {
                                                                                        const t = JSON.parse(e);
                                                                                        if (!t)
                                                                                            throw Error(
                                                                                                `paramsObj is ${t}!`
                                                                                            );
                                                                                        const { fileExt: s, fType: i } =
                                                                                            t;
                                                                                        return 'zip' === s && 2 === i
                                                                                            ? 'folder'
                                                                                            : s.toLowerCase();
                                                                                    } catch (t) {
                                                                                        return (
                                                                                            this._log(
                                                                                                '[_getFileType]',
                                                                                                t.message
                                                                                            ),
                                                                                            ''
                                                                                        );
                                                                                    }
                                                                                }
                                                                            })
                                                                        ) || Rl)
                                                                ) || Rl)
                                                        ) || Rl)
                                                ) || Rl)
                                        ) || Rl)
                                ) || Rl)
                        ) || Rl)
                );
                const Al = Object(d.define)('media-migration-state-persist');
                var Pl;
                Object(d.injectable)()(
                    (Pl =
                        Object(d.singleton)(Al)(
                            (Pl = class {
                                constructor() {
                                    this._localStorage = u.a.getInstance();
                                }
                                async saveMigrationState(e) {
                                    e && (await this._localStorage.setItemForCurrentUserAsync(al, JSON.stringify(e)));
                                }
                                async getMigrationState() {
                                    try {
                                        const e = await this._localStorage.getItemForCurrentUserAsync(al);
                                        return e ? JSON.parse(e) : { stateName: Jd, mediaTableNamesToMigrate: [] };
                                    } catch (e) {
                                        return { stateName: Jd, mediaTableNamesToMigrate: [] };
                                    }
                                }
                                async saveJobDescSummaries(e) {
                                    Array.isArray(e) &&
                                        (await this._localStorage.setItemForCurrentUserAsync(rl, JSON.stringify(e)));
                                }
                                async getSavedJobDescSummaries() {
                                    try {
                                        const e = await this._localStorage.getItemForCurrentUserAsync(rl);
                                        if (!e) return [];
                                        return JSON.parse(e);
                                    } catch (e) {
                                        return [];
                                    }
                                }
                                async clearPersistedJobDescSummaries() {
                                    await this._localStorage.removeItemForCurrentUserAsync(rl);
                                }
                            })
                        ) || Pl)
                );
                var Nl = s('mH7l'),
                    jl = s.n(Nl);
                const Ul = (e) => 'GET_FROM_OLD_DB' === e.name,
                    Bl = (e) => 'ADD_TO_NEW_DB' === e.name,
                    kl = (e) => 'DELETE_FROM_OLD_DB' === e.name;
                function Gl() {
                    return We.default.media_migration_db.should_stop_migration;
                }
                function xl() {
                    return We.default.media_migration_db.max_running_concurrency_job;
                }
                function zl() {
                    return We.default.media_migration_db.delay_time_per_job;
                }
                function Vl() {
                    return We.default.media_migration_db.delay_time_each_k_jobs;
                }
                function $l() {
                    return We.default.media_migration_db.media_limit_per_job;
                }
                function Wl() {
                    return We.default.media_migration_db.min_retry_after;
                }
                function Kl() {
                    return We.default.media_migration_db.max_retry_after;
                }
                var ql = s('1erv');
                const Hl = 0,
                    Ql = 1,
                    Jl = 2,
                    Zl = 4;
                class Xl extends Error {
                    constructor(e) {
                        super(`ExpBackoff error:${e}`), (this.code = e);
                    }
                }
                function* Yl(e) {
                    var t, s, i, n, r;
                    const a = null !== (t = null == e ? void 0 : e.retries) && void 0 !== t ? t : 3,
                        o = null !== (s = null == e ? void 0 : e.min) && void 0 !== s ? s : 100,
                        d = null !== (i = null == e ? void 0 : e.max) && void 0 !== i ? i : 1e4,
                        l = null !== (n = null == e ? void 0 : e.step) && void 0 !== n ? n : 2,
                        c = null !== (r = null == e ? void 0 : e.jitter) && void 0 !== r ? r : 0;
                    if (o <= 0) throw new Xl(Jl);
                    if (c < 0 || c > 1) throw new Xl(Ql);
                    let h = 0;
                    for (; h <= a; ) {
                        const e = ec({ nTry: h, step: l, jitter: c, min: o, max: d });
                        yield {
                            nTry: h,
                            duration: e,
                            sleep: () =>
                                new Promise((t) => {
                                    setTimeout(t, e);
                                }),
                        },
                            h++;
                    }
                }
                function ec(e) {
                    let { step: t, nTry: s, jitter: i, min: n, max: r } = e,
                        a = n * Math.pow(t, s);
                    if (i) {
                        const e = Math.random(),
                            t = Math.floor(e * i * a);
                        a = 0 == (1 & Math.floor(10 * e)) ? a - t : a + t;
                    }
                    return 0 | Math.min(a, r);
                }
                var tc;
                const sc = new po.a(),
                    ic = 999999;
                Object(L.d)()(
                    (tc =
                        Object(d.injectable)()(
                            (tc =
                                Object(d.singleton)(hl.c)(
                                    (tc =
                                        (function (e, t) {
                                            return Object(d.inject)(Al)(e, void 0, 0);
                                        })(
                                            (tc =
                                                (function (e, t) {
                                                    return Object(d.inject)(L.a)(e, void 0, 1);
                                                })(
                                                    (tc =
                                                        (function (e, t) {
                                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 2);
                                                        })(
                                                            (tc =
                                                                Reflect.metadata(
                                                                    'design:type',
                                                                    Function
                                                                )(
                                                                    (tc =
                                                                        Reflect.metadata('design:paramtypes', [
                                                                            Object,
                                                                            void 0 === L.a ? Object : L.a,
                                                                            void 0 === N.ZLoggerFactory
                                                                                ? Object
                                                                                : N.ZLoggerFactory,
                                                                        ])(
                                                                            (tc = class {
                                                                                constructor(e, t, s) {
                                                                                    (this._isLoadData = !1),
                                                                                        (this._forceStop = !1),
                                                                                        (this._mediaMigrationStatePersist =
                                                                                            void 0),
                                                                                        (this._maxWorkerPoolNum = xl()),
                                                                                        (this._worker = new jl.a({
                                                                                            concurrency:
                                                                                                this._maxWorkerPoolNum,
                                                                                            autoStart: !1,
                                                                                        })),
                                                                                        (this._delayTimePerJob = zl()),
                                                                                        (this._delayTimeEachKJobs =
                                                                                            Vl()),
                                                                                        (this._mediaNumLimitPerJob =
                                                                                            $l()),
                                                                                        (this._minRetryAfter = Wl()),
                                                                                        (this._maxRetryAfter = Kl()),
                                                                                        (this._currentJobDescs = []),
                                                                                        (this._currentJobHolders = []),
                                                                                        (this._currentMsgIdCursor =
                                                                                            v.MessageConstants.MAX_MSG_ID),
                                                                                        (this._mediaMigrationState =
                                                                                            void 0),
                                                                                        (this._failedGetJob = !1),
                                                                                        (this._failedAddJob = !1),
                                                                                        (this._failedDeleteJob = !1),
                                                                                        (this._hasDBError = !1),
                                                                                        (this._logger = void 0),
                                                                                        (this._application = void 0),
                                                                                        (this._mediaMigrationStatePersist =
                                                                                            e),
                                                                                        (this._onApplicationIdle =
                                                                                            this._onApplicationIdle.bind(
                                                                                                this
                                                                                            )),
                                                                                        (this._onApplicationActive =
                                                                                            this._onApplicationActive.bind(
                                                                                                this
                                                                                            )),
                                                                                        (this._onApplicationExit =
                                                                                            this._onApplicationExit.bind(
                                                                                                this
                                                                                            )),
                                                                                        (this._application = t),
                                                                                        (this._logger = s.createZLogger(
                                                                                            hl.b,
                                                                                            ['manage-media-migration']
                                                                                        ));
                                                                                }
                                                                                onApplicationReady(e) {
                                                                                    this._listenEvents(),
                                                                                        this._isLoadData ||
                                                                                            this._loadData().then(
                                                                                                () => {
                                                                                                    this._runMigration();
                                                                                                }
                                                                                            ),
                                                                                        this.toggleDBError(
                                                                                            this._getTestMediaMigrationFlag(
                                                                                                '[mm]:db_error'
                                                                                            )
                                                                                        ),
                                                                                        this.toggleGetJobFailed(
                                                                                            this._getTestMediaMigrationFlag(
                                                                                                '[mm]:get_failed'
                                                                                            )
                                                                                        ),
                                                                                        this.toggleAddJobFailed(
                                                                                            this._getTestMediaMigrationFlag(
                                                                                                '[mm]:add_failed'
                                                                                            )
                                                                                        ),
                                                                                        this.toggleDeleteJobFailed(
                                                                                            this._getTestMediaMigrationFlag(
                                                                                                '[mm]:delete_failed'
                                                                                            )
                                                                                        );
                                                                                }
                                                                                async getMediaMigrationState() {
                                                                                    if (!Object(ql.a)() || Gl())
                                                                                        return {
                                                                                            stateName: Jd,
                                                                                            mediaTableNamesToMigrate:
                                                                                                [],
                                                                                        };
                                                                                    if (!this._mediaMigrationState) {
                                                                                        const {
                                                                                            stateName: e,
                                                                                            remainingTableNames: t,
                                                                                        } =
                                                                                            await this._statsMediaMigration();
                                                                                        this._mediaMigrationState = {
                                                                                            stateName: e,
                                                                                            mediaTableNamesToMigrate: t,
                                                                                        };
                                                                                    }
                                                                                    return this._mediaMigrationState;
                                                                                }
                                                                                pauseMigration(e) {
                                                                                    this._logger.zsymb(
                                                                                        3,
                                                                                        10719,
                                                                                        3e4,
                                                                                        '[mm] pause migration - reason: {}',
                                                                                        e
                                                                                    ),
                                                                                        this.flushHoldingJobs(),
                                                                                        (this._forceStop = !0),
                                                                                        this._worker.pause();
                                                                                }
                                                                                async resumeMigration(e) {
                                                                                    this._logger.zsymb(
                                                                                        3,
                                                                                        10719,
                                                                                        30001,
                                                                                        '[mm] resume migration - reason: {}',
                                                                                        e
                                                                                    ),
                                                                                        (this._forceStop = !1),
                                                                                        Object(ql.a)() &&
                                                                                            !Gl() &&
                                                                                            (this._isLoadData ||
                                                                                                (await this._loadData()),
                                                                                            this._currentJobDescs.forEach(
                                                                                                (e) => {
                                                                                                    if (
                                                                                                        e.state === nl
                                                                                                    ) {
                                                                                                        e.state = sl;
                                                                                                        const t =
                                                                                                            this._createJob(
                                                                                                                e
                                                                                                            );
                                                                                                        if (t) {
                                                                                                            const s =
                                                                                                                this._scheduleJob(
                                                                                                                    e.id,
                                                                                                                    t
                                                                                                                );
                                                                                                            this._worker.add(
                                                                                                                s,
                                                                                                                {
                                                                                                                    priority:
                                                                                                                        ic,
                                                                                                                }
                                                                                                            );
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            ),
                                                                                            this._worker.size > 0
                                                                                                ? this._worker
                                                                                                      .isPaused &&
                                                                                                  this._worker.start()
                                                                                                : this._runMigration());
                                                                                }
                                                                                flushHoldingJobs() {
                                                                                    this._currentJobHolders.forEach(
                                                                                        (e) => {
                                                                                            clearTimeout(e.timeoutId),
                                                                                                e.resolver();
                                                                                        }
                                                                                    ),
                                                                                        (this._currentJobHolders = []);
                                                                                }
                                                                                toggleGetJobFailed(e) {
                                                                                    this._failedGetJob = e;
                                                                                }
                                                                                toggleAddJobFailed(e) {
                                                                                    this._failedAddJob = e;
                                                                                }
                                                                                toggleDeleteJobFailed(e) {
                                                                                    this._failedDeleteJob = e;
                                                                                }
                                                                                toggleDBError(e) {
                                                                                    this._hasDBError = e;
                                                                                }
                                                                                _createJob(e) {
                                                                                    const { id: t, currentStep: s } = e;
                                                                                    return (
                                                                                        this._updateStateOfCurrentJobByJobId(
                                                                                            t,
                                                                                            il
                                                                                        ),
                                                                                        Ul(s)
                                                                                            ? this._createJobFromGetFromOldDBCurrentStep(
                                                                                                  t,
                                                                                                  s
                                                                                              )
                                                                                            : Bl(s)
                                                                                            ? this._createJobFromAddToNewDBCurrentStep(
                                                                                                  t,
                                                                                                  s
                                                                                              )
                                                                                            : kl(s)
                                                                                            ? this._createJobFromDeleteFromOldDBCurrentStep(
                                                                                                  t,
                                                                                                  s
                                                                                              )
                                                                                            : void 0
                                                                                    );
                                                                                }
                                                                                _createJobFromGetFromOldDBCurrentStep(
                                                                                    e,
                                                                                    t
                                                                                ) {
                                                                                    const s = Object(i.a)({}, t),
                                                                                        {
                                                                                            mediaTableName: n,
                                                                                            amount: r,
                                                                                            lastMsgId: a,
                                                                                        } = s.dataToRun;
                                                                                    return async () => {
                                                                                        try {
                                                                                            await this._withRetry(
                                                                                                async () => {
                                                                                                    const t =
                                                                                                        this._createStep(
                                                                                                            s
                                                                                                        );
                                                                                                    if (!t)
                                                                                                        return void this._logger.zsymb(
                                                                                                            21,
                                                                                                            10719,
                                                                                                            30002,
                                                                                                            '[mm] getFromOldDBStep is undefined!'
                                                                                                        );
                                                                                                    let i = await t();
                                                                                                    if (i.state === tl)
                                                                                                        throw (
                                                                                                            ((i.data.jobId =
                                                                                                                e),
                                                                                                            (i.data.jobType =
                                                                                                                'GET_FROM_OLD_DB'),
                                                                                                            i.data)
                                                                                                        );
                                                                                                    const { data: o } =
                                                                                                        i;
                                                                                                    if (
                                                                                                        (this._logger.zsymb(
                                                                                                            3,
                                                                                                            10719,
                                                                                                            30003,
                                                                                                            '[mm] getFromOldDBStep - DONE - jobId: {}, {}',
                                                                                                            e,
                                                                                                            o.length
                                                                                                        ),
                                                                                                        o.length >= r
                                                                                                            ? (this._currentMsgIdCursor =
                                                                                                                  o[
                                                                                                                      o.length -
                                                                                                                          1
                                                                                                                  ].msgId)
                                                                                                            : this
                                                                                                                  ._mediaMigrationState &&
                                                                                                              this
                                                                                                                  ._mediaMigrationState
                                                                                                                  .mediaTableNamesToMigrate
                                                                                                                  .length &&
                                                                                                              (this._mediaMigrationState.mediaTableNamesToMigrate.shift(),
                                                                                                              (this._currentMsgIdCursor =
                                                                                                                  v.MessageConstants.MAX_MSG_ID)),
                                                                                                        this._runMigration(),
                                                                                                        o.length)
                                                                                                    ) {
                                                                                                        const t = {
                                                                                                            name: Xd,
                                                                                                            dataToRun: {
                                                                                                                mediaTableName:
                                                                                                                    n,
                                                                                                                amount: r,
                                                                                                                lastMsgId:
                                                                                                                    a,
                                                                                                                data: o,
                                                                                                            },
                                                                                                        };
                                                                                                        this._updateCurrentStepByJobId(
                                                                                                            e,
                                                                                                            t
                                                                                                        );
                                                                                                        const s =
                                                                                                            this._createJobFromAddToNewDBCurrentStep(
                                                                                                                e,
                                                                                                                t
                                                                                                            );
                                                                                                        await s();
                                                                                                    }
                                                                                                }
                                                                                            )();
                                                                                        } catch (t) {
                                                                                            this._logger.zsymb(
                                                                                                3,
                                                                                                10719,
                                                                                                30004,
                                                                                                '[mm] throw error from get from old DB step - jobId: {}, {}',
                                                                                                e,
                                                                                                null == t
                                                                                                    ? void 0
                                                                                                    : t.message
                                                                                            );
                                                                                        }
                                                                                    };
                                                                                }
                                                                                _createJobFromAddToNewDBCurrentStep(
                                                                                    e,
                                                                                    t
                                                                                ) {
                                                                                    const s = Object(i.a)({}, t),
                                                                                        {
                                                                                            mediaTableName: n,
                                                                                            amount: r,
                                                                                            lastMsgId: a,
                                                                                        } = s.dataToRun;
                                                                                    return async () => {
                                                                                        try {
                                                                                            await this._withRetry(
                                                                                                async () => {
                                                                                                    await this._persistCurrentJobDescs();
                                                                                                    const s =
                                                                                                        this._createStep(
                                                                                                            t
                                                                                                        );
                                                                                                    if (!s)
                                                                                                        return void this._logger.zsymb(
                                                                                                            18,
                                                                                                            10719,
                                                                                                            30005,
                                                                                                            '[mm] addToNewDBStep is undefined!'
                                                                                                        );
                                                                                                    const i = await s();
                                                                                                    if (i.state === tl)
                                                                                                        throw (
                                                                                                            ((i.data.jobId =
                                                                                                                e),
                                                                                                            (i.data.jobType =
                                                                                                                'ADD_TO_NEW_DB'),
                                                                                                            i.data)
                                                                                                        );
                                                                                                    const { data: o } =
                                                                                                        i;
                                                                                                    if (
                                                                                                        (this._logger.zsymb(
                                                                                                            3,
                                                                                                            10719,
                                                                                                            30006,
                                                                                                            '[mm] addToNewDBStep - jobId: {}, {}',
                                                                                                            e,
                                                                                                            o.length
                                                                                                        ),
                                                                                                        o.length)
                                                                                                    ) {
                                                                                                        const t = {
                                                                                                            name: Yd,
                                                                                                            dataToRun: {
                                                                                                                mediaTableName:
                                                                                                                    n,
                                                                                                                amount: r,
                                                                                                                lastMsgId:
                                                                                                                    a,
                                                                                                                data: o,
                                                                                                            },
                                                                                                        };
                                                                                                        this._updateCurrentStepByJobId(
                                                                                                            e,
                                                                                                            t
                                                                                                        );
                                                                                                        const s =
                                                                                                            this._createJobFromDeleteFromOldDBCurrentStep(
                                                                                                                e,
                                                                                                                t
                                                                                                            );
                                                                                                        await s();
                                                                                                    }
                                                                                                }
                                                                                            )();
                                                                                        } catch (s) {
                                                                                            this._logger.zsymb(
                                                                                                3,
                                                                                                10719,
                                                                                                30007,
                                                                                                '[mm] throw error from add to new DB step - jobId: {}, {}',
                                                                                                e,
                                                                                                null == s
                                                                                                    ? void 0
                                                                                                    : s.message
                                                                                            );
                                                                                        }
                                                                                    };
                                                                                }
                                                                                _createJobFromDeleteFromOldDBCurrentStep(
                                                                                    e,
                                                                                    t
                                                                                ) {
                                                                                    const s = Object(i.a)({}, t);
                                                                                    return async () => {
                                                                                        try {
                                                                                            await this._withRetry(
                                                                                                async () => {
                                                                                                    await this._persistCurrentJobDescs();
                                                                                                    const t =
                                                                                                        this._createStep(
                                                                                                            s
                                                                                                        );
                                                                                                    if (!t)
                                                                                                        return void this._logger.zsymb(
                                                                                                            21,
                                                                                                            10719,
                                                                                                            30008,
                                                                                                            '[mm] deleteFromOldDBStep is undefined!'
                                                                                                        );
                                                                                                    const i = await t();
                                                                                                    if (i.state === tl)
                                                                                                        throw (
                                                                                                            ((i.data.jobId =
                                                                                                                e),
                                                                                                            (i.data.jobType =
                                                                                                                'DELETE_FROM_OLD_DB'),
                                                                                                            i.data)
                                                                                                        );
                                                                                                    this._logger.zsymb(
                                                                                                        3,
                                                                                                        10719,
                                                                                                        30009,
                                                                                                        '[mm] deleteFromOldDBStep - DONE - jobId: {}',
                                                                                                        e
                                                                                                    ),
                                                                                                        (this._currentJobDescs =
                                                                                                            this._currentJobDescs.filter(
                                                                                                                (t) =>
                                                                                                                    t.id !==
                                                                                                                    e
                                                                                                            )),
                                                                                                        (this._currentJobHolders =
                                                                                                            this._currentJobHolders.filter(
                                                                                                                (t) =>
                                                                                                                    t.jobId !==
                                                                                                                    e
                                                                                                            )),
                                                                                                        this._persistCurrentJobDescs();
                                                                                                }
                                                                                            )();
                                                                                        } catch (t) {
                                                                                            this._logger.zsymb(
                                                                                                3,
                                                                                                10719,
                                                                                                30010,
                                                                                                '[mm] throw error from delete from old DB step - jobId: {} - err: {}',
                                                                                                e,
                                                                                                null == t
                                                                                                    ? void 0
                                                                                                    : t.message
                                                                                            );
                                                                                        }
                                                                                    };
                                                                                }
                                                                                _updateCurrentStepByJobId(e, t) {
                                                                                    const s =
                                                                                        this._currentJobDescs.find(
                                                                                            (t) => t.id === e
                                                                                        );
                                                                                    s && (s.currentStep = t);
                                                                                }
                                                                                _updateStateOfCurrentJobByJobId(e, t) {
                                                                                    const s =
                                                                                        this._currentJobDescs.find(
                                                                                            (t) => t.id === e
                                                                                        );
                                                                                    s && (s.state = t);
                                                                                }
                                                                                async _persistCurrentJobDescs() {
                                                                                    await this._mediaMigrationStatePersist.saveJobDescSummaries(
                                                                                        this._currentJobDescs.reduce(
                                                                                            (e, t) => (
                                                                                                t.currentStep.name !==
                                                                                                    Zd &&
                                                                                                    e.push(
                                                                                                        this._toJobDescSummary(
                                                                                                            t
                                                                                                        )
                                                                                                    ),
                                                                                                e
                                                                                            ),
                                                                                            []
                                                                                        )
                                                                                    );
                                                                                }
                                                                                _createStep(e) {
                                                                                    return Ul(e)
                                                                                        ? async () => {
                                                                                              try {
                                                                                                  if (this._hasDBError)
                                                                                                      this._throwDBError();
                                                                                                  else if (
                                                                                                      this._failedGetJob
                                                                                                  )
                                                                                                      throw Error(
                                                                                                          '[SIMULATE]: Failed to get job from old DB!'
                                                                                                      );
                                                                                                  const {
                                                                                                          mediaTableName:
                                                                                                              t,
                                                                                                          amount: s,
                                                                                                          lastMsgId: i,
                                                                                                      } = e.dataToRun,
                                                                                                      n = t,
                                                                                                      r =
                                                                                                          d.ModuleContainer.resolve(
                                                                                                              Vt.a
                                                                                                          ),
                                                                                                      a =
                                                                                                          await r.getMediasFromOldDB(
                                                                                                              n,
                                                                                                              s,
                                                                                                              i
                                                                                                          );
                                                                                                  return {
                                                                                                      state: el,
                                                                                                      data: a,
                                                                                                  };
                                                                                              } catch (t) {
                                                                                                  return (
                                                                                                      this._logger.zsymb(
                                                                                                          21,
                                                                                                          10719,
                                                                                                          30011,
                                                                                                          '[mm] get from old db step err: {}',
                                                                                                          null == t
                                                                                                              ? void 0
                                                                                                              : t.message
                                                                                                      ),
                                                                                                      {
                                                                                                          state: tl,
                                                                                                          data: t,
                                                                                                      }
                                                                                                  );
                                                                                              }
                                                                                          }
                                                                                        : Bl(e)
                                                                                        ? async () => {
                                                                                              try {
                                                                                                  if (this._hasDBError)
                                                                                                      this._throwDBError();
                                                                                                  else if (
                                                                                                      this._failedAddJob
                                                                                                  )
                                                                                                      throw Error(
                                                                                                          '[SIMULATE]: Failed to add job to new DB!'
                                                                                                      );
                                                                                                  let {
                                                                                                      mediaTableName: t,
                                                                                                      data: s,
                                                                                                      lastMsgId: i,
                                                                                                      amount: n,
                                                                                                  } = e.dataToRun;
                                                                                                  const r = t,
                                                                                                      a =
                                                                                                          d.ModuleContainer.resolve(
                                                                                                              Vt.a
                                                                                                          );
                                                                                                  let o = s;
                                                                                                  o ||
                                                                                                      (o =
                                                                                                          await a.getMediasFromOldDB(
                                                                                                              r,
                                                                                                              n,
                                                                                                              i
                                                                                                          ));
                                                                                                  const l =
                                                                                                      await a.addMediasFromOldDB(
                                                                                                          r,
                                                                                                          o
                                                                                                      );
                                                                                                  return {
                                                                                                      state: el,
                                                                                                      data: l,
                                                                                                  };
                                                                                              } catch (t) {
                                                                                                  return (
                                                                                                      this._logger.zsymb(
                                                                                                          21,
                                                                                                          10719,
                                                                                                          30012,
                                                                                                          '[mm] add to new db step err: {}',
                                                                                                          null == t
                                                                                                              ? void 0
                                                                                                              : t.message
                                                                                                      ),
                                                                                                      {
                                                                                                          state: tl,
                                                                                                          data: t,
                                                                                                      }
                                                                                                  );
                                                                                              }
                                                                                          }
                                                                                        : kl(e)
                                                                                        ? async () => {
                                                                                              try {
                                                                                                  if (this._hasDBError)
                                                                                                      this._throwDBError();
                                                                                                  else if (
                                                                                                      this
                                                                                                          ._failedDeleteJob
                                                                                                  )
                                                                                                      throw Error(
                                                                                                          '[SIMULATE]: Failed to delete job from old DB!'
                                                                                                      );
                                                                                                  const {
                                                                                                          mediaTableName:
                                                                                                              t,
                                                                                                          data: s,
                                                                                                          lastMsgId: i,
                                                                                                          amount: n,
                                                                                                      } = e.dataToRun,
                                                                                                      r = t,
                                                                                                      a =
                                                                                                          d.ModuleContainer.resolve(
                                                                                                              Vt.a
                                                                                                          );
                                                                                                  return s
                                                                                                      ? {
                                                                                                            state: el,
                                                                                                            data: await a.deleteMediasFromOldDB(
                                                                                                                r,
                                                                                                                s
                                                                                                            ),
                                                                                                        }
                                                                                                      : {
                                                                                                            state: el,
                                                                                                            data: await a.deleteMediasFromOldDBByRange(
                                                                                                                r,
                                                                                                                n,
                                                                                                                i
                                                                                                            ),
                                                                                                        };
                                                                                              } catch (t) {
                                                                                                  return (
                                                                                                      this._logger.zsymb(
                                                                                                          21,
                                                                                                          10719,
                                                                                                          30013,
                                                                                                          '[mm] delete from old db step err: {}',
                                                                                                          null == t
                                                                                                              ? void 0
                                                                                                              : t.message
                                                                                                      ),
                                                                                                      {
                                                                                                          state: tl,
                                                                                                          data: t,
                                                                                                      }
                                                                                                  );
                                                                                              }
                                                                                          }
                                                                                        : void 0;
                                                                                }
                                                                                async _loadData() {
                                                                                    if (Gl() || !Object(ql.a)()) return;
                                                                                    const e =
                                                                                        await this.getMediaMigrationState();
                                                                                    this._logger.zsymb(
                                                                                        3,
                                                                                        10719,
                                                                                        30014,
                                                                                        '[mm] MEDIA MIGRATION STATE after load data: {}',
                                                                                        e.stateName
                                                                                    ),
                                                                                        (this._mediaMigrationState = e);
                                                                                    const t =
                                                                                        await this._mediaMigrationStatePersist.getSavedJobDescSummaries();
                                                                                    t.length > 0 &&
                                                                                        t.forEach((e) => {
                                                                                            const t =
                                                                                                this._toJobDesc(e);
                                                                                            this._currentJobDescs.push(
                                                                                                t
                                                                                            );
                                                                                            const s =
                                                                                                this._createJob(t);
                                                                                            if (s) {
                                                                                                const e =
                                                                                                    this._scheduleJob(
                                                                                                        t.id,
                                                                                                        s
                                                                                                    );
                                                                                                this._worker.add(e, {
                                                                                                    priority: ic,
                                                                                                });
                                                                                            }
                                                                                        }),
                                                                                        (this._isLoadData = !0);
                                                                                }
                                                                                async _statsMediaMigration() {
                                                                                    const e = d.ModuleContainer.resolve(
                                                                                            Vt.a
                                                                                        ),
                                                                                        t = await Promise.all([
                                                                                            e.countTotalMediaInOldDB(
                                                                                                'image'
                                                                                            ),
                                                                                            e.countTotalMediaInOldDB(
                                                                                                'file'
                                                                                            ),
                                                                                            e.countTotalMediaInOldDB(
                                                                                                'link'
                                                                                            ),
                                                                                        ]);
                                                                                    let s = Qd,
                                                                                        i = [];
                                                                                    return (
                                                                                        (s =
                                                                                            t.reduce(
                                                                                                (e, t, s) => (
                                                                                                    0 === s && t > 0
                                                                                                        ? i.push(
                                                                                                              'image'
                                                                                                          )
                                                                                                        : 1 === s &&
                                                                                                          t > 0
                                                                                                        ? i.push('file')
                                                                                                        : 2 === s &&
                                                                                                          t > 0 &&
                                                                                                          i.push(
                                                                                                              'link'
                                                                                                          ),
                                                                                                    e + t
                                                                                                ),
                                                                                                0
                                                                                            ) > 0
                                                                                                ? Qd
                                                                                                : Hd),
                                                                                        {
                                                                                            stateName: s,
                                                                                            remainingTableNames: i,
                                                                                        }
                                                                                    );
                                                                                }
                                                                                async _runMigration() {
                                                                                    if (
                                                                                        (this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30015,
                                                                                            '[mm] ====================RUN MIGRATION===================='
                                                                                        ),
                                                                                        !Object(ql.a)())
                                                                                    )
                                                                                        return void this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30016,
                                                                                            '[mm] ==========STOP MIGRATION: not use new media DB flow (cfsv)=========='
                                                                                        );
                                                                                    if (Gl())
                                                                                        return void this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30017,
                                                                                            '[mm] ==========STOP MIGRATION: stop migration (cfsv)=========='
                                                                                        );
                                                                                    if (this._forceStop)
                                                                                        return void this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30018,
                                                                                            '[mm] ==========STOP MIGRATION: force stop (in app)=========='
                                                                                        );
                                                                                    if (
                                                                                        !this._isLoadData &&
                                                                                        (await this._loadData(),
                                                                                        !this._isLoadData)
                                                                                    )
                                                                                        return;
                                                                                    if (
                                                                                        this._mediaMigrationState
                                                                                            .stateName === Hd
                                                                                    )
                                                                                        return void this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30019,
                                                                                            '[mm] ==========STOP MIGRATION: migration done=========='
                                                                                        );
                                                                                    const e =
                                                                                        this._mediaMigrationState
                                                                                            .mediaTableNamesToMigrate
                                                                                            .length > 0
                                                                                            ? this._mediaMigrationState
                                                                                                  .mediaTableNamesToMigrate[0]
                                                                                            : '';
                                                                                    if (!e) {
                                                                                        if (
                                                                                            !this._currentJobDescs
                                                                                                .length
                                                                                        )
                                                                                            return (
                                                                                                this._logger.zsymb(
                                                                                                    0,
                                                                                                    10719,
                                                                                                    30020,
                                                                                                    '[mm] ==========STOP MIGRATION: no media table to migrate=========='
                                                                                                ),
                                                                                                this._stopListenEvents(),
                                                                                                void (await this._mediaMigrationStatePersist.clearPersistedJobDescSummaries())
                                                                                            );
                                                                                        this._logger.zsymb(
                                                                                            0,
                                                                                            10719,
                                                                                            30021,
                                                                                            '[mm] ==========STOP MIGRATION: no media table to migrate, but still have running jobs=========='
                                                                                        );
                                                                                    }
                                                                                    if (
                                                                                        (this._logger.zsymb(
                                                                                            3,
                                                                                            10719,
                                                                                            30022,
                                                                                            '[mm] worker pending: ',
                                                                                            this._worker.pending
                                                                                        ),
                                                                                        this._logger.zsymb(
                                                                                            3,
                                                                                            10719,
                                                                                            30023,
                                                                                            '[mm] worker size: ',
                                                                                            this._worker.size
                                                                                        ),
                                                                                        e)
                                                                                    ) {
                                                                                        if (
                                                                                            sc.value %
                                                                                                this
                                                                                                    ._maxWorkerPoolNum ==
                                                                                                0 &&
                                                                                            (await this._waitIn(
                                                                                                this._delayTimeEachKJobs
                                                                                            ),
                                                                                            this._forceStop ||
                                                                                                !Object(ql.a)() ||
                                                                                                Gl())
                                                                                        )
                                                                                            return;
                                                                                        const t = {
                                                                                                id: sc.next(),
                                                                                                state: sl,
                                                                                                currentStep: {
                                                                                                    name: Zd,
                                                                                                    dataToRun: {
                                                                                                        mediaTableName:
                                                                                                            e,
                                                                                                        amount: this
                                                                                                            ._mediaNumLimitPerJob,
                                                                                                        lastMsgId:
                                                                                                            this
                                                                                                                ._currentMsgIdCursor,
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            s = this._createJob(t);
                                                                                        if (s) {
                                                                                            this._currentJobDescs.push(
                                                                                                t
                                                                                            );
                                                                                            const e = this._scheduleJob(
                                                                                                t.id,
                                                                                                s
                                                                                            );
                                                                                            this._worker.add(e);
                                                                                        }
                                                                                    } else if (
                                                                                        !this._currentJobDescs.length
                                                                                    )
                                                                                        return;
                                                                                    this._worker.isPaused &&
                                                                                        this._worker.start();
                                                                                }
                                                                                _listenEvents() {
                                                                                    this._application.addEventListener(
                                                                                        L.b.Idle,
                                                                                        this._onApplicationIdle
                                                                                    ),
                                                                                        this._application.addEventListener(
                                                                                            L.b.Active,
                                                                                            this._onApplicationActive
                                                                                        ),
                                                                                        this._application.addEventListener(
                                                                                            L.b.Exit,
                                                                                            this._onApplicationExit
                                                                                        );
                                                                                }
                                                                                _stopListenEvents() {
                                                                                    this._application.removeEventListener(
                                                                                        L.b.Idle,
                                                                                        this._onApplicationIdle
                                                                                    ),
                                                                                        this._application.removeEventListener(
                                                                                            L.b.Active,
                                                                                            this._onApplicationActive
                                                                                        ),
                                                                                        this._application.removeEventListener(
                                                                                            L.b.Exit,
                                                                                            this._onApplicationExit
                                                                                        );
                                                                                }
                                                                                _onApplicationIdle() {
                                                                                    this._setupMigrationConfig({
                                                                                        maxWorkerPoolNum: xl(),
                                                                                        mediaNumLimitPerJob: $l(),
                                                                                        delayTimePerJob: zl(),
                                                                                        delayTimeEachKJobs: Vl(),
                                                                                        minRetryAfter: Wl(),
                                                                                        maxRetryAfter: Kl(),
                                                                                    });
                                                                                }
                                                                                _onApplicationActive() {
                                                                                    this._setupMigrationConfig({
                                                                                        maxWorkerPoolNum: xl(),
                                                                                        mediaNumLimitPerJob: $l(),
                                                                                        delayTimePerJob: zl(),
                                                                                        delayTimeEachKJobs: Vl(),
                                                                                        minRetryAfter: Wl(),
                                                                                        maxRetryAfter: Kl(),
                                                                                    });
                                                                                }
                                                                                _onApplicationExit() {
                                                                                    this.pauseMigration('EXIT_APP');
                                                                                }
                                                                                _toJobDescSummary(e) {
                                                                                    const { currentStep: t } = e;
                                                                                    return {
                                                                                        currentStep: {
                                                                                            name: t.name,
                                                                                            summaryData: {
                                                                                                mediaTableName:
                                                                                                    t.dataToRun
                                                                                                        .mediaTableName,
                                                                                                amount: t.dataToRun
                                                                                                    .amount,
                                                                                                lastMsgId:
                                                                                                    t.dataToRun
                                                                                                        .lastMsgId,
                                                                                            },
                                                                                        },
                                                                                    };
                                                                                }
                                                                                _toJobDesc(e) {
                                                                                    let { currentStep: t } = e;
                                                                                    return {
                                                                                        id: sc.next(),
                                                                                        state: sl,
                                                                                        currentStep: {
                                                                                            name: t.name,
                                                                                            dataToRun: Object(i.a)(
                                                                                                Object(i.a)(
                                                                                                    {},
                                                                                                    t.summaryData
                                                                                                ),
                                                                                                {},
                                                                                                { data: void 0 }
                                                                                            ),
                                                                                        },
                                                                                    };
                                                                                }
                                                                                _setupMigrationConfig(e) {
                                                                                    'number' ==
                                                                                        typeof e.maxWorkerPoolNum &&
                                                                                        (this._worker.concurrency =
                                                                                            e.maxWorkerPoolNum),
                                                                                        'number' ==
                                                                                            typeof e.mediaNumLimitPerJob &&
                                                                                            (this._mediaNumLimitPerJob =
                                                                                                e.mediaNumLimitPerJob),
                                                                                        'number' ==
                                                                                            typeof e.delayTimePerJob &&
                                                                                            (this._delayTimePerJob =
                                                                                                e.delayTimePerJob),
                                                                                        'number' ==
                                                                                            typeof e.delayTimeEachKJobs &&
                                                                                            (this._delayTimeEachKJobs =
                                                                                                e.delayTimeEachKJobs),
                                                                                        'number' ==
                                                                                            typeof e.minRetryAfter &&
                                                                                            (this._minRetryAfter =
                                                                                                e.minRetryAfter),
                                                                                        'number' ==
                                                                                            typeof e.maxRetryAfter &&
                                                                                            (this._maxRetryAfter =
                                                                                                e.maxRetryAfter);
                                                                                }
                                                                                _scheduleJob(e, t) {
                                                                                    return async () =>
                                                                                        new Promise((t) => {
                                                                                            const s = setTimeout(() => {
                                                                                                (this._currentJobHolders =
                                                                                                    this._currentJobHolders.filter(
                                                                                                        (t) =>
                                                                                                            t.jobId !==
                                                                                                            e
                                                                                                    )),
                                                                                                    t();
                                                                                            }, 1e3 * this._delayTimePerJob);
                                                                                            this._currentJobHolders.push(
                                                                                                {
                                                                                                    jobId: e,
                                                                                                    timeoutId: s,
                                                                                                    resolver: t,
                                                                                                }
                                                                                            );
                                                                                        }).then(() => t());
                                                                                }
                                                                                _withRetry(e) {
                                                                                    return (
                                                                                        (t = e),
                                                                                        (s = {
                                                                                            retries: 1 / 0,
                                                                                            min:
                                                                                                1e3 *
                                                                                                this._minRetryAfter,
                                                                                            max:
                                                                                                1e3 *
                                                                                                this._maxRetryAfter,
                                                                                            shouldRetryOnError: async (
                                                                                                e
                                                                                            ) => {
                                                                                                let {
                                                                                                    error: t,
                                                                                                    currentState: s,
                                                                                                } = e;
                                                                                                return this
                                                                                                    ._forceStop ||
                                                                                                    Gl() ||
                                                                                                    !Object(ql.a)()
                                                                                                    ? (this._updateStateOfCurrentJobByJobId(
                                                                                                          t.jobId,
                                                                                                          nl
                                                                                                      ),
                                                                                                      !1)
                                                                                                    : 'UnknownError' ===
                                                                                                          t.name ||
                                                                                                      'QuotaExceededError' ===
                                                                                                          t.name ||
                                                                                                      22 === t.code
                                                                                                    ? (this._updateStateOfCurrentJobByJobId(
                                                                                                          t.jobId,
                                                                                                          nl
                                                                                                      ),
                                                                                                      this.pauseMigration(
                                                                                                          'DB_ERROR'
                                                                                                      ),
                                                                                                      !1)
                                                                                                    : (this._logger.zsymb(
                                                                                                          21,
                                                                                                          10719,
                                                                                                          30024,
                                                                                                          '[mm]: Retry - jobId: {} - jobType: {} - error: {}',
                                                                                                          t.jobId,
                                                                                                          t.jobType,
                                                                                                          t.message
                                                                                                      ),
                                                                                                      !0);
                                                                                            },
                                                                                        }),
                                                                                        async function () {
                                                                                            for (
                                                                                                var e =
                                                                                                        arguments.length,
                                                                                                    i = new Array(e),
                                                                                                    n = 0;
                                                                                                n < e;
                                                                                                n++
                                                                                            )
                                                                                                i[n] = arguments[n];
                                                                                            for await (const {
                                                                                                sleep: a,
                                                                                                duration: o,
                                                                                                nTry: d,
                                                                                            } of Yl(s))
                                                                                                try {
                                                                                                    const e = await t(
                                                                                                        ...i
                                                                                                    );
                                                                                                    return (
                                                                                                        null != s &&
                                                                                                            s.afterRetry &&
                                                                                                            (null ==
                                                                                                                s ||
                                                                                                                s.afterRetry(
                                                                                                                    {
                                                                                                                        nTry: d,
                                                                                                                        duration:
                                                                                                                            o,
                                                                                                                        sleep: a,
                                                                                                                        success:
                                                                                                                            !0,
                                                                                                                        shouldRetry:
                                                                                                                            !1,
                                                                                                                    }
                                                                                                                )),
                                                                                                        e
                                                                                                    );
                                                                                                } catch (r) {
                                                                                                    const e =
                                                                                                            null != s &&
                                                                                                            s.shouldRetryOnError
                                                                                                                ? null ==
                                                                                                                  s
                                                                                                                    ? void 0
                                                                                                                    : s.shouldRetryOnError
                                                                                                                : () =>
                                                                                                                      Promise.resolve(
                                                                                                                          !0
                                                                                                                      ),
                                                                                                        t = await e({
                                                                                                            error: r,
                                                                                                            currentState:
                                                                                                                {
                                                                                                                    nTry: d,
                                                                                                                    duration:
                                                                                                                        o,
                                                                                                                    sleep: a,
                                                                                                                },
                                                                                                            input: i,
                                                                                                        });
                                                                                                    if (
                                                                                                        (null != s &&
                                                                                                            s.afterRetry &&
                                                                                                            (null ==
                                                                                                                s ||
                                                                                                                s.afterRetry(
                                                                                                                    {
                                                                                                                        nTry: d,
                                                                                                                        duration:
                                                                                                                            o,
                                                                                                                        sleep: a,
                                                                                                                        shouldRetry:
                                                                                                                            t,
                                                                                                                        success:
                                                                                                                            !1,
                                                                                                                    }
                                                                                                                )),
                                                                                                        !t)
                                                                                                    )
                                                                                                        throw new Xl(
                                                                                                            Zl
                                                                                                        );
                                                                                                    await a();
                                                                                                }
                                                                                            throw new Xl(Hl);
                                                                                        }
                                                                                    );
                                                                                    var t, s;
                                                                                }
                                                                                async _waitIn(e) {
                                                                                    return (
                                                                                        this._logger.zsymb(
                                                                                            3,
                                                                                            10719,
                                                                                            30025,
                                                                                            '[mm]: waiting in {} seconds',
                                                                                            e
                                                                                        ),
                                                                                        new Promise((t) => {
                                                                                            setTimeout(t, 1e3 * e);
                                                                                        })
                                                                                    );
                                                                                }
                                                                                _getTestMediaMigrationFlag(e) {
                                                                                    const t = u.a
                                                                                        .getInstance()
                                                                                        .getItemForCurrentUser(e);
                                                                                    try {
                                                                                        return !!t && JSON.parse(t);
                                                                                    } catch (s) {
                                                                                        return !1;
                                                                                    }
                                                                                }
                                                                                _throwDBError() {
                                                                                    const e = new Error(
                                                                                        '[SIMULATE]: DB is corrupted or quota is exceeded!'
                                                                                    );
                                                                                    throw (
                                                                                        ((e.name = 'UnknownError'),
                                                                                        (e.code = 22),
                                                                                        e)
                                                                                    );
                                                                                }
                                                                            })
                                                                        ) || tc)
                                                                ) || tc)
                                                        ) || tc)
                                                ) || tc)
                                        ) || tc)
                                ) || tc)
                        ) || tc)
                );
                var nc,
                    rc = s('zLd2');
                Object(d.injectable)()(
                    (nc =
                        Object(d.singleton)(rc.c)(
                            (nc =
                                (function (e, t) {
                                    return Object(d.inject)(Fl)(e, void 0, 0);
                                })(
                                    (nc =
                                        (function (e, t) {
                                            return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                        })(
                                            (nc =
                                                Reflect.metadata(
                                                    'design:type',
                                                    Function
                                                )(
                                                    (nc =
                                                        Reflect.metadata('design:paramtypes', [
                                                            Object,
                                                            void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                        ])(
                                                            (nc = class {
                                                                constructor(e, t) {
                                                                    (this._utilsMediaAppService = void 0),
                                                                        (this._logger = void 0),
                                                                        (this._log = void 0),
                                                                        (this._utilsMediaAppService = e),
                                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                                            It.b.DeleteConv,
                                                                            this._onDeleteConversation.bind(this)
                                                                        ),
                                                                        ot.a.ConvInfoDataManager.addEventListener(
                                                                            It.b.EmptyConv,
                                                                            this._onEmptyConversation.bind(this)
                                                                        ),
                                                                        (this._logger = t.createZLogger(rc.b, [
                                                                            'manage-utils-media-in-ui',
                                                                        ])),
                                                                        (this._log = wl(this._logger));
                                                                }
                                                                create(e) {
                                                                    return this._utilsMediaAppService.create(e);
                                                                }
                                                                createOrUpdate(e) {
                                                                    return this._utilsMediaAppService.createOrUpdate(e);
                                                                }
                                                                async createOrUpdateFromMedias(e) {
                                                                    return this._utilsMediaAppService.createOrUpdateFromMedias(
                                                                        e
                                                                    );
                                                                }
                                                                _onDeleteConversation(e) {
                                                                    const { convId: t } = e;
                                                                    this._utilsMediaAppService.deleteUtilsMediasByConvId(
                                                                        t
                                                                    );
                                                                }
                                                                _onEmptyConversation(e) {
                                                                    const { convId: t } = e;
                                                                    this._utilsMediaAppService.deleteUtilsMediasByConvId(
                                                                        t
                                                                    );
                                                                }
                                                            })
                                                        ) || nc)
                                                ) || nc)
                                        ) || nc)
                                ) || nc)
                        ) || nc)
                );
                var ac,
                    oc = s('Mlp7');
                Object(d.injectable)()(
                    (ac =
                        Object(d.singleton)(Vt.a)(
                            (ac =
                                (function (e, t) {
                                    return Object(d.inject)(rc.c)(e, void 0, 0);
                                })(
                                    (ac =
                                        (function (e, t) {
                                            return Object(d.inject)(Tl)(e, void 0, 1);
                                        })(
                                            (ac =
                                                (function (e, t) {
                                                    return Object(d.inject)(Ml)(e, void 0, 2);
                                                })(
                                                    (ac =
                                                        (function (e, t) {
                                                            return Object(d.inject)(Cd)(e, void 0, 3);
                                                        })(
                                                            (ac =
                                                                (function (e, t) {
                                                                    return Object(d.inject)(N.ZLoggerFactory)(
                                                                        e,
                                                                        void 0,
                                                                        4
                                                                    );
                                                                })(
                                                                    (ac =
                                                                        Reflect.metadata(
                                                                            'design:type',
                                                                            Function
                                                                        )(
                                                                            (ac =
                                                                                Reflect.metadata('design:paramtypes', [
                                                                                    void 0 === rc.IUtilsMediaManager
                                                                                        ? Object
                                                                                        : rc.IUtilsMediaManager,
                                                                                    Object,
                                                                                    Object,
                                                                                    Object,
                                                                                    void 0 === N.ZLoggerFactory
                                                                                        ? Object
                                                                                        : N.ZLoggerFactory,
                                                                                ])(
                                                                                    (ac = class {
                                                                                        constructor(e, t, s, i, n) {
                                                                                            (this._utilsMediaManager =
                                                                                                void 0),
                                                                                                (this._mediaMapperFactory =
                                                                                                    void 0),
                                                                                                (this._mediaRepositoryFactory =
                                                                                                    void 0),
                                                                                                (this._mediaPrimaryKeyConvertor =
                                                                                                    void 0),
                                                                                                (this._logger = void 0),
                                                                                                (this._utilsMediaManager =
                                                                                                    e),
                                                                                                (this._mediaRepositoryFactory =
                                                                                                    t),
                                                                                                (this._mediaMapperFactory =
                                                                                                    s),
                                                                                                (this._mediaPrimaryKeyConvertor =
                                                                                                    i),
                                                                                                (this._logger =
                                                                                                    n.createZLogger(
                                                                                                        'media-manager',
                                                                                                        ['']
                                                                                                    ));
                                                                                        }
                                                                                        filter(e, t) {
                                                                                            return Object(ql.a)()
                                                                                                ? ol.filterMedia(e, t)
                                                                                                : oc.a.filter(e, t);
                                                                                        }
                                                                                        getMediaRepository(e, t) {
                                                                                            void 0 === t && (t = !0);
                                                                                            const s =
                                                                                                this._mediaRepositoryFactory.getMediaRepository(
                                                                                                    e
                                                                                                );
                                                                                            if (!s && t)
                                                                                                throw Error(
                                                                                                    `[getMediaRepository]: can't get mediaRepository has mediaType: ${e}!`
                                                                                                );
                                                                                            return s;
                                                                                        }
                                                                                        getMediaMapper(e, t) {
                                                                                            void 0 === t && (t = !0);
                                                                                            const s =
                                                                                                this._mediaMapperFactory.getMediaMapper(
                                                                                                    e
                                                                                                );
                                                                                            if (!s && t)
                                                                                                throw Error(
                                                                                                    `[getMediaMapper]: can't get mediaMapper has mediaType: ${e}!`
                                                                                                );
                                                                                            return s;
                                                                                        }
                                                                                        async _isMigrationDone() {
                                                                                            return (
                                                                                                (
                                                                                                    await d.ModuleContainer.resolve(
                                                                                                        hl.c
                                                                                                    ).getMediaMigrationState()
                                                                                                ).stateName === Hd
                                                                                            );
                                                                                        }
                                                                                        async isExistedMedia(e, t) {
                                                                                            try {
                                                                                                if (!e)
                                                                                                    throw Error(
                                                                                                        'mediaType is invalid!'
                                                                                                    );
                                                                                                if (!t)
                                                                                                    throw Error(
                                                                                                        'mediaIdObj is invalid!'
                                                                                                    );
                                                                                                const s =
                                                                                                    this.getMediaRepository(
                                                                                                        e
                                                                                                    );
                                                                                                return await s.isExistedMedia(
                                                                                                    {
                                                                                                        newId:
                                                                                                            t.newId ||
                                                                                                            '',
                                                                                                        oldId:
                                                                                                            t.oldId ||
                                                                                                            '',
                                                                                                    }
                                                                                                );
                                                                                            } catch (s) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        3e4,
                                                                                                        `[isExistedMedia]: error: ${s.message}`
                                                                                                    ),
                                                                                                    !1
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async addMedias(e, t, s) {
                                                                                            void 0 === s &&
                                                                                                (s = `${Ad.c.UNKNOWN}${Ad.d.UNKNOWN}`);
                                                                                            try {
                                                                                                if (!e)
                                                                                                    throw Error(
                                                                                                        'mediaType is undefined!'
                                                                                                    );
                                                                                                if (!t || !t.length)
                                                                                                    return;
                                                                                                const i =
                                                                                                        this.getMediaRepository(
                                                                                                            e
                                                                                                        ),
                                                                                                    n =
                                                                                                        this.getMediaMapper(
                                                                                                            e
                                                                                                        ),
                                                                                                    r = t.map(
                                                                                                        (t) => (
                                                                                                            (t.src = s),
                                                                                                            'image' ===
                                                                                                                e &&
                                                                                                                (t.subType =
                                                                                                                    v.MSG_SUBTYPE_MEDIA_DOODLE),
                                                                                                            n.toDomainFromDTO(
                                                                                                                t
                                                                                                            )
                                                                                                        )
                                                                                                    ),
                                                                                                    a = (
                                                                                                        await i.insertMulti(
                                                                                                            r
                                                                                                        )
                                                                                                    ).success.map((t) =>
                                                                                                        this.getMediaMapper(
                                                                                                            e
                                                                                                        ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                            t
                                                                                                        )
                                                                                                    );
                                                                                                await this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                    a
                                                                                                );
                                                                                            } catch (i) {
                                                                                                this._logger.zsymb(
                                                                                                    21,
                                                                                                    11051,
                                                                                                    30001,
                                                                                                    '[addMedias] - err: {}',
                                                                                                    i.message
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        addMediaToConvOnly(e, t) {
                                                                                            var s, i, n;
                                                                                            if (
                                                                                                (void 0 === t &&
                                                                                                    (t = `${Ad.c.UNKNOWN}${Ad.d.UNKNOWN}`),
                                                                                                !Object(ql.a)())
                                                                                            )
                                                                                                return oc.a.addMediaToConversationOnly(
                                                                                                    e
                                                                                                );
                                                                                            let r = [];
                                                                                            if (
                                                                                                null != e &&
                                                                                                null !==
                                                                                                    (s = e.image) &&
                                                                                                void 0 !== s &&
                                                                                                s.length
                                                                                            ) {
                                                                                                const s =
                                                                                                        this.getMediaRepository(
                                                                                                            'image'
                                                                                                        ),
                                                                                                    i =
                                                                                                        this.getMediaMapper(
                                                                                                            'image'
                                                                                                        );
                                                                                                r.push(
                                                                                                    null == s
                                                                                                        ? void 0
                                                                                                        : s
                                                                                                              .insertMulti(
                                                                                                                  e.image.map(
                                                                                                                      (
                                                                                                                          e
                                                                                                                      ) => (
                                                                                                                          (e.src =
                                                                                                                              t),
                                                                                                                          i.toDomainFromDTO(
                                                                                                                              e
                                                                                                                          )
                                                                                                                      )
                                                                                                                  )
                                                                                                              )
                                                                                                              .then(
                                                                                                                  (
                                                                                                                      e
                                                                                                                  ) => {
                                                                                                                      if (
                                                                                                                          e
                                                                                                                              .success
                                                                                                                              .length
                                                                                                                      ) {
                                                                                                                          const t =
                                                                                                                              e.success.map(
                                                                                                                                  (
                                                                                                                                      e
                                                                                                                                  ) =>
                                                                                                                                      this.getMediaMapper(
                                                                                                                                          'image'
                                                                                                                                      ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                          e
                                                                                                                                      )
                                                                                                                              );
                                                                                                                          this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                              t
                                                                                                                          );
                                                                                                                      }
                                                                                                                  }
                                                                                                              )
                                                                                                );
                                                                                            }
                                                                                            if (
                                                                                                null != e &&
                                                                                                null !== (i = e.link) &&
                                                                                                void 0 !== i &&
                                                                                                i.length
                                                                                            ) {
                                                                                                const s =
                                                                                                        this.getMediaRepository(
                                                                                                            'link'
                                                                                                        ),
                                                                                                    i =
                                                                                                        this.getMediaMapper(
                                                                                                            'link'
                                                                                                        );
                                                                                                r.push(
                                                                                                    null == s
                                                                                                        ? void 0
                                                                                                        : s
                                                                                                              .insertMulti(
                                                                                                                  e.link.map(
                                                                                                                      (
                                                                                                                          e
                                                                                                                      ) => {
                                                                                                                          e.src =
                                                                                                                              t;
                                                                                                                          return i.toDomainFromDTO(
                                                                                                                              e
                                                                                                                          );
                                                                                                                      }
                                                                                                                  )
                                                                                                              )
                                                                                                              .then(
                                                                                                                  (
                                                                                                                      e
                                                                                                                  ) => {
                                                                                                                      if (
                                                                                                                          e
                                                                                                                              .success
                                                                                                                              .length
                                                                                                                      ) {
                                                                                                                          const t =
                                                                                                                              e.success.map(
                                                                                                                                  (
                                                                                                                                      e
                                                                                                                                  ) =>
                                                                                                                                      this.getMediaMapper(
                                                                                                                                          'link'
                                                                                                                                      ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                          e
                                                                                                                                      )
                                                                                                                              );
                                                                                                                          this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                              t
                                                                                                                          );
                                                                                                                      }
                                                                                                                  }
                                                                                                              )
                                                                                                );
                                                                                            }
                                                                                            if (
                                                                                                null != e &&
                                                                                                null !== (n = e.file) &&
                                                                                                void 0 !== n &&
                                                                                                n.length
                                                                                            ) {
                                                                                                const s =
                                                                                                        this.getMediaRepository(
                                                                                                            'file'
                                                                                                        ),
                                                                                                    i =
                                                                                                        this.getMediaMapper(
                                                                                                            'file'
                                                                                                        );
                                                                                                r.push(
                                                                                                    s
                                                                                                        .insertMulti(
                                                                                                            e.file.map(
                                                                                                                (e) => (
                                                                                                                    (e.src =
                                                                                                                        t),
                                                                                                                    i.toDomainFromDTO(
                                                                                                                        e
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                        .then((e) => {
                                                                                                            if (
                                                                                                                e
                                                                                                                    .success
                                                                                                                    .length
                                                                                                            ) {
                                                                                                                const t =
                                                                                                                    e.success.map(
                                                                                                                        (
                                                                                                                            e
                                                                                                                        ) =>
                                                                                                                            this.getMediaMapper(
                                                                                                                                'file'
                                                                                                                            ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                e
                                                                                                                            )
                                                                                                                    );
                                                                                                                this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                    t
                                                                                                                );
                                                                                                            }
                                                                                                        })
                                                                                                );
                                                                                            }
                                                                                            return Promise.all(r);
                                                                                        }
                                                                                        async deleteMediasById(e, t) {
                                                                                            try {
                                                                                                if (!t)
                                                                                                    throw Error(
                                                                                                        'mediaIdObjs is undefined!'
                                                                                                    );
                                                                                                const a = Array.isArray(
                                                                                                    t
                                                                                                )
                                                                                                    ? [...t]
                                                                                                    : [t];
                                                                                                for (const e of a) {
                                                                                                    const {
                                                                                                        newId: t,
                                                                                                        oldId: s,
                                                                                                    } = e;
                                                                                                    if (!t && s) {
                                                                                                        const t =
                                                                                                            await this.getMediaFieldsByMsgId(
                                                                                                                s
                                                                                                            );
                                                                                                        e.newId = t
                                                                                                            ? `${t.cliMsgId}_${t.fromUid}_${t.toUid}`
                                                                                                            : '';
                                                                                                    }
                                                                                                }
                                                                                                const o =
                                                                                                        this.getMediaRepository(
                                                                                                            e,
                                                                                                            !1
                                                                                                        ),
                                                                                                    l = [];
                                                                                                for (const e of a)
                                                                                                    l.push(
                                                                                                        Object(i.a)(
                                                                                                            Object(i.a)(
                                                                                                                {},
                                                                                                                e
                                                                                                            ),
                                                                                                            {},
                                                                                                            {
                                                                                                                deleteTo:
                                                                                                                    (await this._isMigrationDone())
                                                                                                                        ? Kd.NEW
                                                                                                                        : Kd.UNKNOWN,
                                                                                                            }
                                                                                                        )
                                                                                                    );
                                                                                                if (o)
                                                                                                    await o.deleteMultiMedias(
                                                                                                        l
                                                                                                    );
                                                                                                else {
                                                                                                    var s, n, r;
                                                                                                    const e = [];
                                                                                                    e.push(
                                                                                                        null ===
                                                                                                            (s =
                                                                                                                d.ModuleContainer.resolve(
                                                                                                                    ll
                                                                                                                )) ||
                                                                                                            void 0 === s
                                                                                                            ? void 0
                                                                                                            : s.deleteMultiMedias(
                                                                                                                  l
                                                                                                              ),
                                                                                                        null ===
                                                                                                            (n =
                                                                                                                d.ModuleContainer.resolve(
                                                                                                                    gl
                                                                                                                )) ||
                                                                                                            void 0 === n
                                                                                                            ? void 0
                                                                                                            : n.deleteMultiMedias(
                                                                                                                  l
                                                                                                              ),
                                                                                                        null ===
                                                                                                            (r =
                                                                                                                d.ModuleContainer.resolve(
                                                                                                                    fl
                                                                                                                )) ||
                                                                                                            void 0 === r
                                                                                                            ? void 0
                                                                                                            : r.deleteMultiMedias(
                                                                                                                  l
                                                                                                              )
                                                                                                    ),
                                                                                                        await Promise.all(
                                                                                                            e
                                                                                                        );
                                                                                                }
                                                                                            } catch (a) {
                                                                                                this._logger.zsymb(
                                                                                                    18,
                                                                                                    11051,
                                                                                                    30002,
                                                                                                    a
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getValidMediasOfConv(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            n,
                                                                                            r
                                                                                        ) {
                                                                                            try {
                                                                                                if (!t)
                                                                                                    return Promise.resolve(
                                                                                                        []
                                                                                                    );
                                                                                                const a = {
                                                                                                    cliMsgId:
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                    sendDttm: parseInt(
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_SENDDTTM
                                                                                                    ),
                                                                                                    msgId:
                                                                                                        n ||
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                };
                                                                                                if (n) {
                                                                                                    const e =
                                                                                                        await this.getMediaFieldsByMsgId(
                                                                                                            n
                                                                                                        );
                                                                                                    e &&
                                                                                                        ((a.cliMsgId =
                                                                                                            e.cliMsgId),
                                                                                                        (a.sendDttm =
                                                                                                            e.sendDttm));
                                                                                                }
                                                                                                const o =
                                                                                                        oc.a.getLastDeleteConv(
                                                                                                            t,
                                                                                                            e
                                                                                                        ),
                                                                                                    d =
                                                                                                        this.getMediaRepository(
                                                                                                            e
                                                                                                        ),
                                                                                                    l =
                                                                                                        await d.getMediasOfConv(
                                                                                                            t,
                                                                                                            a,
                                                                                                            s,
                                                                                                            Object(i.a)(
                                                                                                                Object(
                                                                                                                    i.a
                                                                                                                )(
                                                                                                                    {},
                                                                                                                    r
                                                                                                                ),
                                                                                                                {},
                                                                                                                {
                                                                                                                    deletePointOfConv:
                                                                                                                        o,
                                                                                                                }
                                                                                                            )
                                                                                                        );
                                                                                                if (!l.length)
                                                                                                    return [];
                                                                                                const c =
                                                                                                    this.getMediaMapper(
                                                                                                        e
                                                                                                    );
                                                                                                return await Promise.all(
                                                                                                    l.map((e) =>
                                                                                                        c.toDTO(e)
                                                                                                    )
                                                                                                );
                                                                                            } catch (a) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30003,
                                                                                                        a
                                                                                                    ),
                                                                                                    Promise.resolve([])
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getLastMediasOfConvWithoutCorrectData(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            i,
                                                                                            n
                                                                                        ) {
                                                                                            if (
                                                                                                (void 0 === i &&
                                                                                                    (i = 100),
                                                                                                !Object(ql.a)())
                                                                                            )
                                                                                                return oc.a.getLastMediaFromConversation(
                                                                                                    t,
                                                                                                    e,
                                                                                                    i,
                                                                                                    s
                                                                                                );
                                                                                            try {
                                                                                                if (!t)
                                                                                                    return Promise.resolve(
                                                                                                        [
                                                                                                            null,
                                                                                                            Error(
                                                                                                                'convId is undefined!'
                                                                                                            ),
                                                                                                        ]
                                                                                                    );
                                                                                                const r = {
                                                                                                    cliMsgId:
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                    sendDttm: parseInt(
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_SENDDTTM
                                                                                                    ),
                                                                                                    msgId:
                                                                                                        s ||
                                                                                                        We.default
                                                                                                            .load_media
                                                                                                            .use_max_id ||
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                };
                                                                                                if (
                                                                                                    null != n &&
                                                                                                    n.lastItemOpts
                                                                                                )
                                                                                                    (r.cliMsgId =
                                                                                                        n.lastItemOpts.cliMsgId),
                                                                                                        (r.sendDttm =
                                                                                                            n.lastItemOpts.sendDttm);
                                                                                                else if (s) {
                                                                                                    const e =
                                                                                                        await this.getMediaFieldsByMsgId(
                                                                                                            s
                                                                                                        );
                                                                                                    e &&
                                                                                                        ((r.cliMsgId =
                                                                                                            e.cliMsgId),
                                                                                                        (r.sendDttm =
                                                                                                            e.sendDttm));
                                                                                                }
                                                                                                const a =
                                                                                                        this.getMediaRepository(
                                                                                                            e
                                                                                                        ),
                                                                                                    o =
                                                                                                        await a.getLastMediasOfConv(
                                                                                                            t,
                                                                                                            r,
                                                                                                            i
                                                                                                        );
                                                                                                return [
                                                                                                    await Promise.all(
                                                                                                        o.map((t) =>
                                                                                                            this.getMediaMapper(
                                                                                                                e
                                                                                                            ).toDTO(t)
                                                                                                        )
                                                                                                    ),
                                                                                                    null,
                                                                                                ];
                                                                                            } catch (r) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30004,
                                                                                                        r
                                                                                                    ),
                                                                                                    [null, r]
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async updateMedia(e, t, s, n) {
                                                                                            if (!Object(ql.a)()) {
                                                                                                const r = Object(i.a)(
                                                                                                    Object(i.a)({}, s),
                                                                                                    {},
                                                                                                    { msgId: t }
                                                                                                );
                                                                                                return oc.a.updateMedia(
                                                                                                    r,
                                                                                                    e,
                                                                                                    n
                                                                                                );
                                                                                            }
                                                                                            return this._updateMedia(
                                                                                                e,
                                                                                                t,
                                                                                                s,
                                                                                                n
                                                                                            );
                                                                                        }
                                                                                        loadingPendingMedias() {
                                                                                            return Object(ql.a)()
                                                                                                ? new Promise(
                                                                                                      (e, t) => {
                                                                                                          let s =
                                                                                                              le.default.getAllPendingMediaIds();
                                                                                                          if (
                                                                                                              (this._logger.zsymb(
                                                                                                                  3,
                                                                                                                  11051,
                                                                                                                  30005,
                                                                                                                  '[loadingPendingMedias]: {}',
                                                                                                                  JSON.stringify(
                                                                                                                      s
                                                                                                                  )
                                                                                                              ),
                                                                                                              s &&
                                                                                                                  He.default.mapHasItem(
                                                                                                                      s
                                                                                                                  ))
                                                                                                          ) {
                                                                                                              let t =
                                                                                                                  {};
                                                                                                              for (let e in s)
                                                                                                                  t[e] =
                                                                                                                      this.getMultiMedias(
                                                                                                                          e,
                                                                                                                          s[
                                                                                                                              e
                                                                                                                          ]
                                                                                                                      );
                                                                                                              He.default
                                                                                                                  .join(
                                                                                                                      t
                                                                                                                  )
                                                                                                                  .then(
                                                                                                                      e
                                                                                                                  )
                                                                                                                  .catch(
                                                                                                                      (
                                                                                                                          t
                                                                                                                      ) => {
                                                                                                                          e(
                                                                                                                              null
                                                                                                                          );
                                                                                                                      }
                                                                                                                  );
                                                                                                          } else
                                                                                                              e(null);
                                                                                                      }
                                                                                                  )
                                                                                                : oc.a.loadAllPendingMedia();
                                                                                        }
                                                                                        async countMediaOfConv(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            try {
                                                                                                t ||
                                                                                                    Promise.resolve({
                                                                                                        ok: !0,
                                                                                                        result: 0,
                                                                                                        error: null,
                                                                                                    });
                                                                                                const {
                                                                                                    from: n,
                                                                                                    to: r,
                                                                                                } = s;
                                                                                                (n.cliMsgId = n.cliMsgId
                                                                                                    ? n.cliMsgId
                                                                                                    : ''),
                                                                                                    (n.sendDttm =
                                                                                                        n.sendDttm
                                                                                                            ? n.sendDttm
                                                                                                            : 0),
                                                                                                    (n.msgId = n.msgId
                                                                                                        ? n.msgId
                                                                                                        : ''),
                                                                                                    (r.cliMsgId =
                                                                                                        r.cliMsgId
                                                                                                            ? r.cliMsgId
                                                                                                            : v
                                                                                                                  .MessageConstants
                                                                                                                  .MAX_MSG_ID),
                                                                                                    (r.sendDttm =
                                                                                                        r.sendDttm
                                                                                                            ? r.sendDttm
                                                                                                            : parseInt(
                                                                                                                  v
                                                                                                                      .MessageConstants
                                                                                                                      .MAX_SENDDTTM
                                                                                                              )),
                                                                                                    (r.msgId = r.msgId
                                                                                                        ? r.msgId
                                                                                                        : v
                                                                                                              .MessageConstants
                                                                                                              .MAX_MSG_ID);
                                                                                                const a =
                                                                                                    this.getMediaRepository(
                                                                                                        e
                                                                                                    );
                                                                                                return {
                                                                                                    ok: !0,
                                                                                                    result: await a.countMediaOfConv(
                                                                                                        t,
                                                                                                        {
                                                                                                            from: Object(
                                                                                                                i.a
                                                                                                            )({}, n),
                                                                                                            to: Object(
                                                                                                                i.a
                                                                                                            )({}, r),
                                                                                                        }
                                                                                                    ),
                                                                                                    error: null,
                                                                                                };
                                                                                            } catch (n) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30006,
                                                                                                        n
                                                                                                    ),
                                                                                                    {
                                                                                                        ok: !1,
                                                                                                        result: 0,
                                                                                                        error: n,
                                                                                                    }
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getMediaFieldsByMsgId(e) {
                                                                                            if (!e)
                                                                                                return Promise.resolve(
                                                                                                    void 0
                                                                                                );
                                                                                            const t = await P.a
                                                                                                .getInstance()
                                                                                                .Core.Message.get(e);
                                                                                            return t
                                                                                                ? {
                                                                                                      cliMsgId:
                                                                                                          'number' ==
                                                                                                          typeof t.cliMsgId
                                                                                                              ? t.cliMsgId.toString()
                                                                                                              : t.cliMsgId,
                                                                                                      fromUid:
                                                                                                          t.fromUid,
                                                                                                      toUid: t.toUid,
                                                                                                      sendDttm:
                                                                                                          'string' ==
                                                                                                          typeof t.sendDttm
                                                                                                              ? parseInt(
                                                                                                                    t.sendDttm
                                                                                                                )
                                                                                                              : t.sendDttm,
                                                                                                  }
                                                                                                : Promise.resolve(
                                                                                                      void 0
                                                                                                  );
                                                                                        }
                                                                                        async getAllValidPhotoAndVideosOfConv(
                                                                                            e
                                                                                        ) {
                                                                                            if (!Object(ql.a)())
                                                                                                return oc.a.getAllMediaFromConv(
                                                                                                    e
                                                                                                );
                                                                                            let t = !0,
                                                                                                s = {
                                                                                                    cliMsgId:
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                    sendDttm: parseInt(
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_SENDDTTM
                                                                                                    ),
                                                                                                    msgId: v
                                                                                                        .MessageConstants
                                                                                                        .MAX_MSG_ID,
                                                                                                },
                                                                                                i = [],
                                                                                                n = [];
                                                                                            for (; t; ) {
                                                                                                const r =
                                                                                                    await this.getValidMediasOfConv(
                                                                                                        'image',
                                                                                                        e,
                                                                                                        50,
                                                                                                        s.msgId
                                                                                                    );
                                                                                                t = r.length >= 50;
                                                                                                let a = s;
                                                                                                if (r.length) {
                                                                                                    if (
                                                                                                        (r.forEach(
                                                                                                            (e) => {
                                                                                                                e &&
                                                                                                                e.subType ==
                                                                                                                    v.MSG_SUBTYPE_MEDIA_VIDEO
                                                                                                                    ? i.push(
                                                                                                                          e
                                                                                                                      )
                                                                                                                    : !e ||
                                                                                                                      (e.subType !=
                                                                                                                          v.MSG_SUBTYPE_PHOTO &&
                                                                                                                          e.subType !==
                                                                                                                              v.MSG_SUBTYPE_MEDIA_DOODLE) ||
                                                                                                                      n.push(
                                                                                                                          e
                                                                                                                      );
                                                                                                            }
                                                                                                        ),
                                                                                                        (a = {
                                                                                                            cliMsgId:
                                                                                                                r[
                                                                                                                    r.length -
                                                                                                                        1
                                                                                                                ]
                                                                                                                    .cliMsgId,
                                                                                                            sendDttm:
                                                                                                                r[
                                                                                                                    r.length -
                                                                                                                        1
                                                                                                                ]
                                                                                                                    .sendDttm,
                                                                                                            msgId: r[
                                                                                                                r.length -
                                                                                                                    1
                                                                                                            ].msgId,
                                                                                                        }),
                                                                                                        a.msgId ==
                                                                                                            s.msgId)
                                                                                                    )
                                                                                                        break;
                                                                                                    s = a;
                                                                                                }
                                                                                            }
                                                                                            return {
                                                                                                photos: n,
                                                                                                videos: i,
                                                                                            };
                                                                                        }
                                                                                        async getImageMessagesForPhotoViewer(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            i,
                                                                                            n,
                                                                                            r
                                                                                        ) {
                                                                                            if (!Object(ql.a)())
                                                                                                return le.default.getImagesForPhotoViewer(
                                                                                                    { userId: e },
                                                                                                    t,
                                                                                                    s,
                                                                                                    i,
                                                                                                    n,
                                                                                                    r
                                                                                                );
                                                                                            try {
                                                                                                var a;
                                                                                                if (!e || !t)
                                                                                                    throw Error(
                                                                                                        'convId or lastMsgId is undefined!'
                                                                                                    );
                                                                                                const o =
                                                                                                    await this.getMediaFieldsByMsgId(
                                                                                                        t
                                                                                                    );
                                                                                                return await (null ===
                                                                                                    (a =
                                                                                                        d.ModuleContainer.resolve(
                                                                                                            ll
                                                                                                        )) ||
                                                                                                void 0 === a
                                                                                                    ? void 0
                                                                                                    : a.getImageMessagesForPhotoViewer(
                                                                                                          e,
                                                                                                          s,
                                                                                                          {
                                                                                                              sendDttm:
                                                                                                                  (null ==
                                                                                                                  o
                                                                                                                      ? void 0
                                                                                                                      : o.sendDttm) ||
                                                                                                                  parseInt(
                                                                                                                      v
                                                                                                                          .MessageConstants
                                                                                                                          .MAX_SENDDTTM
                                                                                                                  ),
                                                                                                              cliMsgId:
                                                                                                                  (null ==
                                                                                                                  o
                                                                                                                      ? void 0
                                                                                                                      : o.cliMsgId) ||
                                                                                                                  v
                                                                                                                      .MessageConstants
                                                                                                                      .MAX_MSG_ID,
                                                                                                              msgId: t,
                                                                                                          },
                                                                                                          i,
                                                                                                          n,
                                                                                                          r
                                                                                                      ));
                                                                                            } catch (o) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30007,
                                                                                                        o
                                                                                                    ),
                                                                                                    []
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getLastestAddedFiles(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            if (
                                                                                                (void 0 === t &&
                                                                                                    (t = 40),
                                                                                                !Object(ql.a)())
                                                                                            )
                                                                                                return le.default.getLatestFiles(
                                                                                                    e,
                                                                                                    t
                                                                                                );
                                                                                            try {
                                                                                                if (!e) {
                                                                                                    e = Date.now();
                                                                                                    let t =
                                                                                                        ii.a.getTimeNow();
                                                                                                    e = e > t ? e : t;
                                                                                                }
                                                                                                const s =
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_CONVERSATION_ID,
                                                                                                    i = parseInt(
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID
                                                                                                    ),
                                                                                                    n =
                                                                                                        d.ModuleContainer.resolve(
                                                                                                            gl
                                                                                                        ),
                                                                                                    r =
                                                                                                        await n.getLastestAddedFiles(
                                                                                                            {
                                                                                                                convId: s,
                                                                                                                sendDttm:
                                                                                                                    e,
                                                                                                                cliMsgId:
                                                                                                                    i,
                                                                                                            },
                                                                                                            t
                                                                                                        );
                                                                                                if (r.length > 0) {
                                                                                                    const e =
                                                                                                        this.getMediaMapper(
                                                                                                            'file'
                                                                                                        );
                                                                                                    return await Promise.all(
                                                                                                        r.map((t) =>
                                                                                                            e.toDTO(t)
                                                                                                        )
                                                                                                    );
                                                                                                }
                                                                                                return [];
                                                                                            } catch (s) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30008,
                                                                                                        '[getLastestAddedFiles] - err: ',
                                                                                                        s
                                                                                                    ),
                                                                                                    Promise.resolve([])
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getMultiMedias(e, t) {
                                                                                            if (!Object(ql.a)())
                                                                                                return le.default.getMediaByIds(
                                                                                                    e,
                                                                                                    t
                                                                                                );
                                                                                            try {
                                                                                                if (!t || t.length < 0)
                                                                                                    throw Error(
                                                                                                        'msgIds is undefined or empty!'
                                                                                                    );
                                                                                                const s = [],
                                                                                                    i = t.map((e) =>
                                                                                                        this.getMediaFieldsByMsgId(
                                                                                                            e
                                                                                                        ).then(
                                                                                                            async (
                                                                                                                t
                                                                                                            ) => {
                                                                                                                s.push({
                                                                                                                    newId: t
                                                                                                                        ? `${t.cliMsgId}_${t.fromUid}_${t.toUid}`
                                                                                                                        : '',
                                                                                                                    oldId: e,
                                                                                                                    getFrom:
                                                                                                                        (await this._isMigrationDone())
                                                                                                                            ? Wd.NEW
                                                                                                                            : Wd.UNKNOWN,
                                                                                                                });
                                                                                                            }
                                                                                                        )
                                                                                                    );
                                                                                                if (
                                                                                                    (await Promise.all(
                                                                                                        i
                                                                                                    ),
                                                                                                    !s.length)
                                                                                                )
                                                                                                    return [];
                                                                                                const n = (
                                                                                                    await this.getMediaRepository(
                                                                                                        e
                                                                                                    ).getMultiMedias(s)
                                                                                                ).filter(Boolean);
                                                                                                return n.length > 0
                                                                                                    ? await Promise.all(
                                                                                                          n.map((t) =>
                                                                                                              this.getMediaMapper(
                                                                                                                  e
                                                                                                              ).toDTO(t)
                                                                                                          )
                                                                                                      )
                                                                                                    : [];
                                                                                            } catch (s) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30009,
                                                                                                        '[getMultiMedias] - err: ',
                                                                                                        s
                                                                                                    ),
                                                                                                    []
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async getMediaById(e, t) {
                                                                                            try {
                                                                                                if (!t)
                                                                                                    throw Error(
                                                                                                        'mediaId is undefined!'
                                                                                                    );
                                                                                                const s =
                                                                                                        await this.getMediaFieldsByMsgId(
                                                                                                            t
                                                                                                        ),
                                                                                                    i =
                                                                                                        this.getMediaRepository(
                                                                                                            e
                                                                                                        ),
                                                                                                    n =
                                                                                                        await i.getMedia(
                                                                                                            {
                                                                                                                newId: s
                                                                                                                    ? `${s.cliMsgId}_${s.fromUid}_${s.toUid}`
                                                                                                                    : '',
                                                                                                                oldId: t,
                                                                                                            },
                                                                                                            void 0,
                                                                                                            (await this._isMigrationDone())
                                                                                                                ? Wd.NEW
                                                                                                                : Wd.UNKNOWN
                                                                                                        );
                                                                                                return n
                                                                                                    ? await this.getMediaMapper(
                                                                                                          e
                                                                                                      ).toDTO(n)
                                                                                                    : void 0;
                                                                                            } catch (s) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30010,
                                                                                                        '[getMediaById] - err: ',
                                                                                                        s
                                                                                                    ),
                                                                                                    Promise.resolve(
                                                                                                        void 0
                                                                                                    )
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async _updateMedia(e, t, s, i) {
                                                                                            try {
                                                                                                if (!t)
                                                                                                    throw Error(
                                                                                                        "mediaId isn't valid!"
                                                                                                    );
                                                                                                if (!s)
                                                                                                    throw Error(
                                                                                                        "mediaValue isn't valid!"
                                                                                                    );
                                                                                                const i =
                                                                                                        this.getMediaRepository(
                                                                                                            e
                                                                                                        ),
                                                                                                    n =
                                                                                                        await this._mediaPrimaryKeyConvertor.toMediaPKFromMessagePK(
                                                                                                            t
                                                                                                        ),
                                                                                                    r =
                                                                                                        this.getMediaMapper(
                                                                                                            e
                                                                                                        ).toNewEAttsFromDTOAtts(
                                                                                                            s
                                                                                                        );
                                                                                                return await i.updateMedia(
                                                                                                    {
                                                                                                        newId: n,
                                                                                                        oldId: t,
                                                                                                    },
                                                                                                    {
                                                                                                        attributes:
                                                                                                            Object.keys(
                                                                                                                r
                                                                                                            ),
                                                                                                        value: r,
                                                                                                        ignoreNotFound:
                                                                                                            !0,
                                                                                                    },
                                                                                                    (await this._isMigrationDone())
                                                                                                        ? $d.NEW
                                                                                                        : $d.UNKNOWN
                                                                                                );
                                                                                            } catch (n) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        21,
                                                                                                        11051,
                                                                                                        30011,
                                                                                                        '[_updateMedia] - err: {}',
                                                                                                        n.message
                                                                                                    ),
                                                                                                    !1
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async _addMediasWhenTransferMessageOldFlow(
                                                                                            e
                                                                                        ) {
                                                                                            try {
                                                                                                const t = [],
                                                                                                    s = [],
                                                                                                    i = [];
                                                                                                for (
                                                                                                    let r = 0;
                                                                                                    r < e.length;
                                                                                                    r++
                                                                                                ) {
                                                                                                    const n = e[r],
                                                                                                        a = n.msgType;
                                                                                                    switch (a) {
                                                                                                        case v.MSG_PHOTO:
                                                                                                        case v.MSG_PHOTO_2:
                                                                                                        case v.MSG_DOODLE:
                                                                                                            a ==
                                                                                                                v.MSG_DOODLE &&
                                                                                                                n.message &&
                                                                                                                (n.message.thumbUrl =
                                                                                                                    n.message.oriUrl),
                                                                                                                He.default.isPhotoStickerMessage(
                                                                                                                    n
                                                                                                                ) ||
                                                                                                                    s.push(
                                                                                                                        {
                                                                                                                            msgId: n.msgId,
                                                                                                                            userId: n.toUid,
                                                                                                                            message:
                                                                                                                                n.message,
                                                                                                                            sendDttm:
                                                                                                                                n.sendDttm,
                                                                                                                            fromUid:
                                                                                                                                n.fromUid,
                                                                                                                            subType:
                                                                                                                                v.MSG_SUBTYPE_PHOTO,
                                                                                                                            type: 'image',
                                                                                                                            ttl: n.ttl,
                                                                                                                            cliMsgId:
                                                                                                                                n.cliMsgId,
                                                                                                                        }
                                                                                                                    );
                                                                                                            break;
                                                                                                        case v.MSG_FILE:
                                                                                                            t.push({
                                                                                                                msgId: n.msgId,
                                                                                                                userId: n.toUid,
                                                                                                                message:
                                                                                                                    n.message,
                                                                                                                sendDttm:
                                                                                                                    n.sendDttm,
                                                                                                                fromUid:
                                                                                                                    n.fromUid,
                                                                                                                type: 'file',
                                                                                                                ttl: n.ttl,
                                                                                                                cliMsgId:
                                                                                                                    n.cliMsgId,
                                                                                                            });
                                                                                                            break;
                                                                                                        case v.MSG_CONTACT:
                                                                                                            'recommened.link' ===
                                                                                                                n
                                                                                                                    .message
                                                                                                                    .action &&
                                                                                                                i.push({
                                                                                                                    msgId: n.msgId,
                                                                                                                    userId: n.toUid,
                                                                                                                    message:
                                                                                                                        n.message,
                                                                                                                    sendDttm:
                                                                                                                        n.sendDttm,
                                                                                                                    fromUid:
                                                                                                                        n.fromUid,
                                                                                                                    type: 'link',
                                                                                                                    ttl: n.ttl,
                                                                                                                    cliMsgId:
                                                                                                                        n.cliMsgId,
                                                                                                                });
                                                                                                            break;
                                                                                                        case v.MSG_VIDEO:
                                                                                                            s.push({
                                                                                                                msgId: n.msgId,
                                                                                                                userId: n.toUid,
                                                                                                                message:
                                                                                                                    n.message,
                                                                                                                sendDttm:
                                                                                                                    n.sendDttm,
                                                                                                                fromUid:
                                                                                                                    n.fromUid,
                                                                                                                subType:
                                                                                                                    v.MSG_SUBTYPE_MEDIA_VIDEO,
                                                                                                                type: 'image',
                                                                                                                ttl: n.ttl,
                                                                                                                cliMsgId:
                                                                                                                    n.cliMsgId,
                                                                                                            });
                                                                                                    }
                                                                                                }
                                                                                                let n = [];
                                                                                                return (
                                                                                                    s.length > 0 &&
                                                                                                        n.push(
                                                                                                            P.a
                                                                                                                .getInstance()
                                                                                                                .Core.Image.insertMulti(
                                                                                                                    s
                                                                                                                )
                                                                                                        ),
                                                                                                    i.length > 0 &&
                                                                                                        n.push(
                                                                                                            P.a
                                                                                                                .getInstance()
                                                                                                                .Core.Link.insertMulti(
                                                                                                                    i
                                                                                                                )
                                                                                                        ),
                                                                                                    t.length > 0 &&
                                                                                                        n.push(
                                                                                                            P.a
                                                                                                                .getInstance()
                                                                                                                .Core.File.insertMulti(
                                                                                                                    t
                                                                                                                )
                                                                                                        ),
                                                                                                    await Promise.all(n)
                                                                                                );
                                                                                            } catch (t) {
                                                                                                this._logger.zsymb(
                                                                                                    18,
                                                                                                    11051,
                                                                                                    30012,
                                                                                                    '[_addMediasWhenTransferMessageOldFlow] - err: ',
                                                                                                    t.message
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async _addMediasFromMessages(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            try {
                                                                                                if (!e || !e.length)
                                                                                                    return;
                                                                                                t =
                                                                                                    t ||
                                                                                                    `${Ad.c.UNKNOWN}${Ad.d.FROM_MSG}`;
                                                                                                const s = [],
                                                                                                    i = [],
                                                                                                    n = [],
                                                                                                    r =
                                                                                                        this.getMediaMapper(
                                                                                                            'image'
                                                                                                        ),
                                                                                                    a =
                                                                                                        this.getMediaMapper(
                                                                                                            'file'
                                                                                                        ),
                                                                                                    o =
                                                                                                        this.getMediaMapper(
                                                                                                            'link'
                                                                                                        );
                                                                                                e.forEach((e) => {
                                                                                                    const d = e.msgType;
                                                                                                    switch (d) {
                                                                                                        case v.MSG_PHOTO:
                                                                                                        case v.MSG_PHOTO_2:
                                                                                                        case v.MSG_DOODLE:
                                                                                                            d ===
                                                                                                            v.MSG_DOODLE
                                                                                                                ? (e.message &&
                                                                                                                      (e.message.thumbUrl =
                                                                                                                          e.message.oriUrl),
                                                                                                                  s.push(
                                                                                                                      r.toDomainFromTMessage(
                                                                                                                          e,
                                                                                                                          v.MSG_SUBTYPE_MEDIA_DOODLE,
                                                                                                                          t
                                                                                                                      )
                                                                                                                  ))
                                                                                                                : He.default.isPhotoStickerMessage(
                                                                                                                      e
                                                                                                                  ) ||
                                                                                                                  s.push(
                                                                                                                      r.toDomainFromTMessage(
                                                                                                                          e,
                                                                                                                          v.MSG_SUBTYPE_PHOTO,
                                                                                                                          t
                                                                                                                      )
                                                                                                                  );
                                                                                                            break;
                                                                                                        case v.MSG_FILE:
                                                                                                            i.push(
                                                                                                                a.toDomainFromMessage(
                                                                                                                    e,
                                                                                                                    t
                                                                                                                )
                                                                                                            );
                                                                                                            break;
                                                                                                        case v.MSG_CONTACT:
                                                                                                            'recommened.link' ===
                                                                                                                e
                                                                                                                    .message
                                                                                                                    .action &&
                                                                                                                n.push(
                                                                                                                    o.toDomainFromMessage(
                                                                                                                        e,
                                                                                                                        t
                                                                                                                    )
                                                                                                                );
                                                                                                            break;
                                                                                                        case v.MSG_VIDEO:
                                                                                                            s.push(
                                                                                                                r.toDomainFromTMessage(
                                                                                                                    e,
                                                                                                                    v.MSG_SUBTYPE_MEDIA_VIDEO,
                                                                                                                    t
                                                                                                                )
                                                                                                            );
                                                                                                    }
                                                                                                });
                                                                                                let d = [];
                                                                                                return (
                                                                                                    s.length > 0 &&
                                                                                                        d.push(
                                                                                                            this.getMediaRepository(
                                                                                                                'image'
                                                                                                            )
                                                                                                                .insertMulti(
                                                                                                                    s
                                                                                                                )
                                                                                                                .then(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) => {
                                                                                                                        if (
                                                                                                                            e
                                                                                                                                .success
                                                                                                                                .length
                                                                                                                        ) {
                                                                                                                            const t =
                                                                                                                                e.success.map(
                                                                                                                                    (
                                                                                                                                        e
                                                                                                                                    ) =>
                                                                                                                                        this.getMediaMapper(
                                                                                                                                            'image'
                                                                                                                                        ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                            e
                                                                                                                                        )
                                                                                                                                );
                                                                                                                            this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                                t
                                                                                                                            );
                                                                                                                        }
                                                                                                                    }
                                                                                                                )
                                                                                                        ),
                                                                                                    i.length > 0 &&
                                                                                                        d.push(
                                                                                                            this.getMediaRepository(
                                                                                                                'file'
                                                                                                            )
                                                                                                                .insertMulti(
                                                                                                                    i
                                                                                                                )
                                                                                                                .then(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) => {
                                                                                                                        if (
                                                                                                                            e
                                                                                                                                .success
                                                                                                                                .length
                                                                                                                        ) {
                                                                                                                            const t =
                                                                                                                                e.success.map(
                                                                                                                                    (
                                                                                                                                        e
                                                                                                                                    ) =>
                                                                                                                                        this.getMediaMapper(
                                                                                                                                            'file'
                                                                                                                                        ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                            e
                                                                                                                                        )
                                                                                                                                );
                                                                                                                            this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                                t
                                                                                                                            );
                                                                                                                        }
                                                                                                                    }
                                                                                                                )
                                                                                                        ),
                                                                                                    n.length > 0 &&
                                                                                                        d.push(
                                                                                                            this.getMediaRepository(
                                                                                                                'link'
                                                                                                            )
                                                                                                                .insertMulti(
                                                                                                                    n
                                                                                                                )
                                                                                                                .then(
                                                                                                                    (
                                                                                                                        e
                                                                                                                    ) => {
                                                                                                                        if (
                                                                                                                            e
                                                                                                                                .success
                                                                                                                                .length
                                                                                                                        ) {
                                                                                                                            const t =
                                                                                                                                e.success.map(
                                                                                                                                    (
                                                                                                                                        e
                                                                                                                                    ) =>
                                                                                                                                        this.getMediaMapper(
                                                                                                                                            'link'
                                                                                                                                        ).toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                                                            e
                                                                                                                                        )
                                                                                                                                );
                                                                                                                            this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                                                t
                                                                                                                            );
                                                                                                                        }
                                                                                                                    }
                                                                                                                )
                                                                                                        ),
                                                                                                    await Promise.all(d)
                                                                                                );
                                                                                            } catch (s) {
                                                                                                this._logger.zsymb(
                                                                                                    21,
                                                                                                    11051,
                                                                                                    30013,
                                                                                                    '[addMediasFromMessages] - err: {}',
                                                                                                    JSON.stringify(s)
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async _addMediasAtExportImportFlowOldFlow(
                                                                                            e
                                                                                        ) {
                                                                                            if (!e || !e.length) return;
                                                                                            const t = [],
                                                                                                s = [],
                                                                                                i = [];
                                                                                            e.forEach((e) => {
                                                                                                if (
                                                                                                    e.msgType ===
                                                                                                    v.MSG_FILE
                                                                                                )
                                                                                                    s.push({
                                                                                                        msgId: e.msgId,
                                                                                                        userId: e.toUid,
                                                                                                        message:
                                                                                                            e.message,
                                                                                                        sendDttm:
                                                                                                            e.sendDttm,
                                                                                                        localPath:
                                                                                                            e.localPath,
                                                                                                        fromUid:
                                                                                                            e.fromUid,
                                                                                                        type: 'file',
                                                                                                        ttl: e.ttl,
                                                                                                    });
                                                                                                else if (
                                                                                                    e.msgType ===
                                                                                                    v.MSG_CONTACT
                                                                                                )
                                                                                                    'recommened.link' ===
                                                                                                        e.message
                                                                                                            .action &&
                                                                                                        i.push({
                                                                                                            msgId: e.msgId,
                                                                                                            userId: e.toUid,
                                                                                                            message:
                                                                                                                e.message,
                                                                                                            sendDttm:
                                                                                                                e.sendDttm,
                                                                                                            fromUid:
                                                                                                                e.fromUid,
                                                                                                            type: 'link',
                                                                                                            ttl: e.ttl,
                                                                                                        });
                                                                                                else if (
                                                                                                    (e.msgType !==
                                                                                                        v.MSG_PHOTO &&
                                                                                                        e.msgType !==
                                                                                                            v.MSG_PHOTO_2 &&
                                                                                                        e.msgType !==
                                                                                                            v.MSG_DOODLE) ||
                                                                                                    He.default.isPhotoStickerMessage(
                                                                                                        e
                                                                                                    )
                                                                                                )
                                                                                                    e.msgType ===
                                                                                                        v.MSG_VIDEO &&
                                                                                                        t.push({
                                                                                                            msgId: e.msgId,
                                                                                                            userId: e.toUid,
                                                                                                            message:
                                                                                                                e.message,
                                                                                                            sendDttm:
                                                                                                                e.sendDttm,
                                                                                                            fromUid:
                                                                                                                e.fromUid,
                                                                                                            type: 'image',
                                                                                                            subType:
                                                                                                                v.MSG_SUBTYPE_MEDIA_VIDEO,
                                                                                                            ttl: e.ttl,
                                                                                                        });
                                                                                                else {
                                                                                                    const s = {
                                                                                                        msgId: e.msgId,
                                                                                                        userId: e.toUid,
                                                                                                        message:
                                                                                                            e.message,
                                                                                                        sendDttm:
                                                                                                            e.sendDttm,
                                                                                                        fromUid:
                                                                                                            e.fromUid,
                                                                                                        type: 'image',
                                                                                                        subType:
                                                                                                            v.MSG_SUBTYPE_PHOTO,
                                                                                                        ttl: e.ttl,
                                                                                                    };
                                                                                                    e.msgType ===
                                                                                                        v.MSG_DOODLE &&
                                                                                                        ((s.subType =
                                                                                                            v.MSG_SUBTYPE_MEDIA_DOODLE),
                                                                                                        (s.message.thumbUrl =
                                                                                                            s.message.oriUrl)),
                                                                                                        t.push(s);
                                                                                                }
                                                                                            }),
                                                                                                s.length &&
                                                                                                    le.default.addFilesToConversation(
                                                                                                        s
                                                                                                    ),
                                                                                                i.length &&
                                                                                                    le.default.addLinksToConversation(
                                                                                                        i
                                                                                                    ),
                                                                                                t.length &&
                                                                                                    le.default.addOrUpdateImagesToConversation(
                                                                                                        t
                                                                                                    );
                                                                                        }
                                                                                        async _addMediasFromMessagesWhenBackupOldFlow(
                                                                                            e
                                                                                        ) {
                                                                                            if (!e || !e.length) return;
                                                                                            const t = [],
                                                                                                s = [],
                                                                                                i = [];
                                                                                            e.forEach((e) => {
                                                                                                e.msgType === v.MSG_FILE
                                                                                                    ? s.push({
                                                                                                          msgId: e.msgId,
                                                                                                          userId: e.toUid,
                                                                                                          message:
                                                                                                              e.message,
                                                                                                          sendDttm:
                                                                                                              e.sendDttm,
                                                                                                          localPath:
                                                                                                              e.localPath,
                                                                                                          fromUid:
                                                                                                              e.fromUid,
                                                                                                          ttl: e.ttl,
                                                                                                      })
                                                                                                    : e.msgType ===
                                                                                                          v.MSG_CONTACT &&
                                                                                                      'recommened.link' ===
                                                                                                          e.message
                                                                                                              .action
                                                                                                    ? i.push({
                                                                                                          msgId: e.msgId,
                                                                                                          userId: e.toUid,
                                                                                                          message:
                                                                                                              e.message,
                                                                                                          sendDttm:
                                                                                                              e.sendDttm,
                                                                                                          fromUid:
                                                                                                              e.fromUid,
                                                                                                          ttl: e.ttl,
                                                                                                      })
                                                                                                    : (e.msgType !==
                                                                                                          v.MSG_PHOTO &&
                                                                                                          e.msgType !==
                                                                                                              v.MSG_PHOTO_2 &&
                                                                                                          e.msgType !==
                                                                                                              v.MSG_DOODLE) ||
                                                                                                      He.default.isPhotoStickerMessage(
                                                                                                          e
                                                                                                      ) ||
                                                                                                      t.push({
                                                                                                          msgId: e.msgId,
                                                                                                          userId: e.toUid,
                                                                                                          message:
                                                                                                              e.message,
                                                                                                          sendDttm:
                                                                                                              e.sendDttm,
                                                                                                          fromUid:
                                                                                                              e.fromUid,
                                                                                                          ttl: e.ttl,
                                                                                                      });
                                                                                            }),
                                                                                                s.length &&
                                                                                                    le.default.addFilesToConversation(
                                                                                                        s
                                                                                                    ),
                                                                                                i.length &&
                                                                                                    le.default.addLinksToConversation(
                                                                                                        i
                                                                                                    ),
                                                                                                t.length &&
                                                                                                    le.default.addOrUpdateImagesToConversation(
                                                                                                        t
                                                                                                    );
                                                                                        }
                                                                                        async _emptyOldMediaStore(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            const s = {
                                                                                                    from: [t, 0, ''],
                                                                                                    to: [
                                                                                                        t,
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID
                                                                                                            .length,
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                    ],
                                                                                                    excludeFrom: !1,
                                                                                                    excludeTo: !1,
                                                                                                },
                                                                                                i = {
                                                                                                    index: 'userId_sendDttm_msgId',
                                                                                                    direction:
                                                                                                        qd
                                                                                                            .CursorDirection
                                                                                                            .PREV,
                                                                                                },
                                                                                                n = await e.getAllKey(
                                                                                                    s,
                                                                                                    i
                                                                                                );
                                                                                            null != n &&
                                                                                                n.length &&
                                                                                                (await e.deleteMulti(
                                                                                                    n
                                                                                                ));
                                                                                        }
                                                                                        async _emptyNewMediaStore(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            const s = {
                                                                                                    from: [t, 0, ''],
                                                                                                    to: [
                                                                                                        t,
                                                                                                        parseInt(
                                                                                                            v
                                                                                                                .MessageConstants
                                                                                                                .MAX_SENDDTTM
                                                                                                        ),
                                                                                                        v
                                                                                                            .MessageConstants
                                                                                                            .MAX_MSG_ID,
                                                                                                    ],
                                                                                                    excludeFrom: !1,
                                                                                                    excludeTo: !1,
                                                                                                },
                                                                                                i = {
                                                                                                    index: 'convId_sendDttm_cliMsgId',
                                                                                                    direction:
                                                                                                        qd
                                                                                                            .CursorDirection
                                                                                                            .PREV,
                                                                                                },
                                                                                                n = await e.getAllKey(
                                                                                                    s,
                                                                                                    i
                                                                                                );
                                                                                            null != n &&
                                                                                                n.length &&
                                                                                                (await e.deleteMulti(
                                                                                                    n
                                                                                                ));
                                                                                        }
                                                                                        async updateFile(e, t, s) {
                                                                                            return Object(ql.a)()
                                                                                                ? this._updateMedia(
                                                                                                      'file',
                                                                                                      e,
                                                                                                      t,
                                                                                                      s
                                                                                                  )
                                                                                                : !!(await le.default.updateFile(
                                                                                                      e,
                                                                                                      t,
                                                                                                      s
                                                                                                  ));
                                                                                        }
                                                                                        async getMediaFromConversationWhenDownloadOldMedia(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            i
                                                                                        ) {
                                                                                            if (!Object(ql.a)())
                                                                                                return oc.a.getMediaFromConversation(
                                                                                                    { userId: e },
                                                                                                    i,
                                                                                                    t,
                                                                                                    s
                                                                                                );
                                                                                            const n = i.substring(
                                                                                                    0,
                                                                                                    i.length - 1
                                                                                                ),
                                                                                                r =
                                                                                                    await this.getValidMediasOfConv(
                                                                                                        n,
                                                                                                        e,
                                                                                                        t,
                                                                                                        s,
                                                                                                        null
                                                                                                    );
                                                                                            return r.length > 0
                                                                                                ? r.map((e) => ({
                                                                                                      userId: e.userId,
                                                                                                      sendDttm:
                                                                                                          e.sendDttm,
                                                                                                      msgId: e.msgId,
                                                                                                      message: {
                                                                                                          href: e
                                                                                                              .message
                                                                                                              .href,
                                                                                                          params:
                                                                                                              e.message
                                                                                                                  .params ||
                                                                                                              '',
                                                                                                      },
                                                                                                      type: e.type,
                                                                                                      subType:
                                                                                                          'image' ===
                                                                                                          e.type
                                                                                                              ? e.subType
                                                                                                              : -1,
                                                                                                  }))
                                                                                                : [];
                                                                                        }
                                                                                        getMediaFromConversation(
                                                                                            e,
                                                                                            t,
                                                                                            s,
                                                                                            i,
                                                                                            n
                                                                                        ) {
                                                                                            if (!Object(ql.a)())
                                                                                                return oc.a.getMediaFromConversation(
                                                                                                    { userId: t },
                                                                                                    e,
                                                                                                    s,
                                                                                                    i,
                                                                                                    n
                                                                                                );
                                                                                            const r = e.substring(
                                                                                                0,
                                                                                                e.length - 1
                                                                                            );
                                                                                            return this.getValidMediasOfConv(
                                                                                                r,
                                                                                                t,
                                                                                                s,
                                                                                                i,
                                                                                                n
                                                                                            );
                                                                                        }
                                                                                        async deleteMediaWhenDeleteMsg(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            if (!Object(ql.a)())
                                                                                                return void le.default.deleteMediaItem(
                                                                                                    e
                                                                                                );
                                                                                            let s = '';
                                                                                            if (
                                                                                                null != t &&
                                                                                                t.mediaIdKeys
                                                                                            ) {
                                                                                                const {
                                                                                                    cliMsgId: e,
                                                                                                    fromUid: i,
                                                                                                    convId: n,
                                                                                                } = t.mediaIdKeys;
                                                                                                s = `${e}_${i}_${n}`;
                                                                                            } else
                                                                                                s =
                                                                                                    await this._mediaPrimaryKeyConvertor.toMediaPKFromMessagePK(
                                                                                                        e
                                                                                                    );
                                                                                            this.deleteMediasById('', {
                                                                                                newId: s,
                                                                                                oldId: e,
                                                                                            });
                                                                                        }
                                                                                        async deleteMediaItems(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            if (!t) return [];
                                                                                            if (!Object(ql.a)())
                                                                                                return oc.a.deleteMediaItem(
                                                                                                    t,
                                                                                                    e
                                                                                                );
                                                                                            let i = [];
                                                                                            i =
                                                                                                null != s &&
                                                                                                s.mediaIdKeysArr &&
                                                                                                s.mediaIdKeysArr.length
                                                                                                    ? s.mediaIdKeysArr.map(
                                                                                                          (e) =>
                                                                                                              `${e.cliMsgId}_${e.fromUid}_${e.convId}`
                                                                                                      )
                                                                                                    : await Promise.all(
                                                                                                          t.map((e) =>
                                                                                                              this._mediaPrimaryKeyConvertor.toMediaPKFromMessagePK(
                                                                                                                  e
                                                                                                              )
                                                                                                          )
                                                                                                      );
                                                                                            const n = t.map((e, t) => ({
                                                                                                oldId: e,
                                                                                                newId: i[t],
                                                                                            }));
                                                                                            return this.deleteMediasById(
                                                                                                e,
                                                                                                n
                                                                                            );
                                                                                        }
                                                                                        async addLinksToConversation(
                                                                                            e
                                                                                        ) {
                                                                                            Object(ql.a)()
                                                                                                ? this.addMedias(
                                                                                                      'link',
                                                                                                      e
                                                                                                  )
                                                                                                : le.default.addLinksToConversation(
                                                                                                      e
                                                                                                  );
                                                                                        }
                                                                                        async getFilesFromConversation(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            return Object(ql.a)()
                                                                                                ? this.getValidMediasOfConv(
                                                                                                      'file',
                                                                                                      e,
                                                                                                      t,
                                                                                                      s,
                                                                                                      null
                                                                                                  )
                                                                                                : le.default.getFilesFromConversation(
                                                                                                      { userId: e },
                                                                                                      t,
                                                                                                      s
                                                                                                  );
                                                                                        }
                                                                                        async addMediasWhenTransferMessage(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            return s
                                                                                                ? this._addMediasFromMessages(
                                                                                                      e,
                                                                                                      t
                                                                                                  )
                                                                                                : this._addMediasWhenTransferMessageOldFlow(
                                                                                                      e
                                                                                                  );
                                                                                        }
                                                                                        async addMediasAtExportImportFlow(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            return Object(ql.a)()
                                                                                                ? this._addMediasFromMessages(
                                                                                                      e,
                                                                                                      t
                                                                                                  )
                                                                                                : this._addMediasAtExportImportFlowOldFlow(
                                                                                                      e
                                                                                                  );
                                                                                        }
                                                                                        async addMediasFromMessagesWhenBackup(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            return Object(ql.a)()
                                                                                                ? this._addMediasFromMessages(
                                                                                                      e,
                                                                                                      t
                                                                                                  )
                                                                                                : this._addMediasFromMessagesWhenBackupOldFlow(
                                                                                                      e
                                                                                                  );
                                                                                        }
                                                                                        async deleteImageByMsgId(e, t) {
                                                                                            if (!Object(ql.a)())
                                                                                                return le.default.deleteImageByMsgId(
                                                                                                    e
                                                                                                );
                                                                                            let s = '';
                                                                                            return (
                                                                                                (s =
                                                                                                    null != t &&
                                                                                                    t.mediaIdKeys
                                                                                                        ? `${t.mediaIdKeys.cliMsgId}_${t.mediaIdKeys.fromUid}_${t.mediaIdKeys.convId}`
                                                                                                        : await this._mediaPrimaryKeyConvertor.toMediaPKFromMessagePK(
                                                                                                              e
                                                                                                          )),
                                                                                                await this.deleteMediasById(
                                                                                                    'image',
                                                                                                    {
                                                                                                        newId: s,
                                                                                                        oldId: e,
                                                                                                    }
                                                                                                ),
                                                                                                !0
                                                                                            );
                                                                                        }
                                                                                        async doAddMediaToConversation(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            return Object(ql.a)()
                                                                                                ? this.addMedias(e, t)
                                                                                                : oc.a.doAddMediaToConversation(
                                                                                                      t,
                                                                                                      e
                                                                                                  );
                                                                                        }
                                                                                        async updateMsgIdForRelativeMedia(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            const {
                                                                                                imageStore: i,
                                                                                                fileStore: n,
                                                                                                linkStore: r,
                                                                                            } = e;
                                                                                            if (Object(ql.a)()) {
                                                                                                const e = (e, t, s) => {
                                                                                                    this.getMediaById(
                                                                                                        e,
                                                                                                        s
                                                                                                    ).then((i) => {
                                                                                                        i &&
                                                                                                            ((i.msgId =
                                                                                                                t),
                                                                                                            this.deleteMediasById(
                                                                                                                e,
                                                                                                                {
                                                                                                                    newId: void 0,
                                                                                                                    oldId: s,
                                                                                                                }
                                                                                                            ).then(
                                                                                                                () => {
                                                                                                                    this.addMedias(
                                                                                                                        e,
                                                                                                                        [
                                                                                                                            i,
                                                                                                                        ]
                                                                                                                    );
                                                                                                                }
                                                                                                            ));
                                                                                                    });
                                                                                                };
                                                                                                e('file', t, s),
                                                                                                    e('image', t, s),
                                                                                                    e('link', t, s);
                                                                                            } else {
                                                                                                const e = (e, t, s) => {
                                                                                                    e.get(s).then(
                                                                                                        (i) => {
                                                                                                            i &&
                                                                                                                ((i.msgId =
                                                                                                                    t),
                                                                                                                e
                                                                                                                    .delete(
                                                                                                                        s
                                                                                                                    )
                                                                                                                    .then(
                                                                                                                        () => {
                                                                                                                            e.insert(
                                                                                                                                i
                                                                                                                            );
                                                                                                                        }
                                                                                                                    ));
                                                                                                        }
                                                                                                    );
                                                                                                };
                                                                                                n && e(n, t, s),
                                                                                                    i && e(i, t, s),
                                                                                                    r && e(r, t, s);
                                                                                            }
                                                                                        }
                                                                                        async emptyMediaStores(e, t) {
                                                                                            e &&
                                                                                                t &&
                                                                                                t.length &&
                                                                                                (Object(ql.a)()
                                                                                                    ? t.forEach((t) => {
                                                                                                          'file' === t
                                                                                                              ? this._emptyNewMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Media
                                                                                                                        .File,
                                                                                                                    e
                                                                                                                )
                                                                                                              : 'image' ===
                                                                                                                t
                                                                                                              ? this._emptyNewMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Media
                                                                                                                        .Image,
                                                                                                                    e
                                                                                                                )
                                                                                                              : 'link' ===
                                                                                                                    t &&
                                                                                                                this._emptyNewMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Media
                                                                                                                        .Link,
                                                                                                                    e
                                                                                                                );
                                                                                                      })
                                                                                                    : t.forEach((t) => {
                                                                                                          'file' === t
                                                                                                              ? this._emptyOldMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Core
                                                                                                                        .File,
                                                                                                                    e
                                                                                                                )
                                                                                                              : 'image' ===
                                                                                                                t
                                                                                                              ? this._emptyOldMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Core
                                                                                                                        .Image,
                                                                                                                    e
                                                                                                                )
                                                                                                              : 'link' ===
                                                                                                                    t &&
                                                                                                                this._emptyOldMediaStore(
                                                                                                                    P.a.getInstance()
                                                                                                                        .Core
                                                                                                                        .Link,
                                                                                                                    e
                                                                                                                );
                                                                                                      }));
                                                                                        }
                                                                                        async addMediasFromOldDB(e, t) {
                                                                                            if (!t || !t.length)
                                                                                                return [];
                                                                                            const s =
                                                                                                    this.getMediaRepository(
                                                                                                        e
                                                                                                    ),
                                                                                                i =
                                                                                                    oc.a.getAllDeleteConv();
                                                                                            let n = t,
                                                                                                r = t.map(
                                                                                                    (e) => e.msgId
                                                                                                );
                                                                                            if (i) {
                                                                                                const s = t.reduce(
                                                                                                    (t, s) => {
                                                                                                        var n;
                                                                                                        const {
                                                                                                            userId: r,
                                                                                                        } = s;
                                                                                                        if (
                                                                                                            null !==
                                                                                                                (n =
                                                                                                                    i[
                                                                                                                        r
                                                                                                                    ]) &&
                                                                                                            void 0 !==
                                                                                                                n &&
                                                                                                            n[e]
                                                                                                        ) {
                                                                                                            const n =
                                                                                                                    s.msgId,
                                                                                                                a =
                                                                                                                    i[
                                                                                                                        r
                                                                                                                    ][e]
                                                                                                                        .lastId;
                                                                                                            a &&
                                                                                                                n &&
                                                                                                                a < n &&
                                                                                                                t.oldMediaEntitiesShouldAddToNewDB.push(
                                                                                                                    s
                                                                                                                );
                                                                                                        } else
                                                                                                            t.oldMediaEntitiesShouldAddToNewDB.push(
                                                                                                                s
                                                                                                            );
                                                                                                        return (
                                                                                                            t.oldMediaIdsShouldDeleteFromOldDB.push(
                                                                                                                s.msgId
                                                                                                            ),
                                                                                                            t
                                                                                                        );
                                                                                                    },
                                                                                                    {
                                                                                                        oldMediaEntitiesShouldAddToNewDB:
                                                                                                            [],
                                                                                                        oldMediaIdsShouldDeleteFromOldDB:
                                                                                                            [],
                                                                                                    }
                                                                                                );
                                                                                                (n =
                                                                                                    s.oldMediaEntitiesShouldAddToNewDB),
                                                                                                    (r =
                                                                                                        s.oldMediaIdsShouldDeleteFromOldDB);
                                                                                            }
                                                                                            const a =
                                                                                                    await s.correctMediasInOldDB(
                                                                                                        n,
                                                                                                        { saveBack: !1 }
                                                                                                    ),
                                                                                                o =
                                                                                                    this.getMediaMapper(
                                                                                                        e
                                                                                                    ),
                                                                                                d = a.map((e) =>
                                                                                                    o.toDomainFromOldDomain(
                                                                                                        e
                                                                                                    )
                                                                                                ),
                                                                                                l = await s.insertMulti(
                                                                                                    d
                                                                                                );
                                                                                            if (l.success.length) {
                                                                                                const e = l.success.map(
                                                                                                    (e) =>
                                                                                                        o.toMediaToCreateOrUpdateUtilsMediaDTOFromDomain(
                                                                                                            e
                                                                                                        )
                                                                                                );
                                                                                                return (
                                                                                                    this._utilsMediaManager.createOrUpdateFromMedias(
                                                                                                        e
                                                                                                    ),
                                                                                                    r
                                                                                                );
                                                                                            }
                                                                                            return [];
                                                                                        }
                                                                                        async getMediasFromOldDB(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            if (
                                                                                                await this._isMigrationDone()
                                                                                            )
                                                                                                return [];
                                                                                            const i = {
                                                                                                    from: '',
                                                                                                    to: s,
                                                                                                    excludeFrom: !0,
                                                                                                    excludeTo: !0,
                                                                                                },
                                                                                                n = {
                                                                                                    index: 'primary',
                                                                                                    direction:
                                                                                                        qd
                                                                                                            .CursorDirection
                                                                                                            .PREV,
                                                                                                    limit: t,
                                                                                                };
                                                                                            return this.getMediaRepository(
                                                                                                e
                                                                                            )
                                                                                                .getOldDBTable()
                                                                                                .getAll(i, n);
                                                                                        }
                                                                                        async deleteMediasFromOldDB(
                                                                                            e,
                                                                                            t
                                                                                        ) {
                                                                                            const s =
                                                                                                this.getMediaRepository(
                                                                                                    e
                                                                                                );
                                                                                            return (
                                                                                                await s
                                                                                                    .getOldDBTable()
                                                                                                    .deleteMulti(t)
                                                                                            ).success;
                                                                                        }
                                                                                        async deleteMediasFromOldDBByRange(
                                                                                            e,
                                                                                            t,
                                                                                            s
                                                                                        ) {
                                                                                            const i = {
                                                                                                    from: '',
                                                                                                    to: s,
                                                                                                    excludeFrom: !0,
                                                                                                    excludeTo: !0,
                                                                                                },
                                                                                                n = {
                                                                                                    index: 'primary',
                                                                                                    direction:
                                                                                                        qd
                                                                                                            .CursorDirection
                                                                                                            .PREV,
                                                                                                    limit: t,
                                                                                                },
                                                                                                r =
                                                                                                    this.getMediaRepository(
                                                                                                        e
                                                                                                    ),
                                                                                                a = await r
                                                                                                    .getOldDBTable()
                                                                                                    .getAllKey(i, n);
                                                                                            return (
                                                                                                await r
                                                                                                    .getOldDBTable()
                                                                                                    .deleteMulti(a)
                                                                                            ).success;
                                                                                        }
                                                                                        async countTotalMediaInOldDB(
                                                                                            e
                                                                                        ) {
                                                                                            try {
                                                                                                return this.getMediaRepository(
                                                                                                    e
                                                                                                )
                                                                                                    .getOldDBTable()
                                                                                                    .count();
                                                                                            } catch (t) {
                                                                                                return (
                                                                                                    this._logger.zsymb(
                                                                                                        18,
                                                                                                        11051,
                                                                                                        30014,
                                                                                                        '[countTotalMediaInOldDB] - err: ',
                                                                                                        t
                                                                                                    ),
                                                                                                    0
                                                                                                );
                                                                                            }
                                                                                        }
                                                                                        async _testAddMedias(e, t) {
                                                                                            void 0 === t && (t = 50);
                                                                                            let s = [];
                                                                                            const i =
                                                                                                    2 * Date.now() +
                                                                                                    Math.round(
                                                                                                        1e5 *
                                                                                                            Math.random()
                                                                                                    ) +
                                                                                                    1e3,
                                                                                                n =
                                                                                                    5 * Date.now() +
                                                                                                    Math.round(
                                                                                                        1e7 *
                                                                                                            Math.random()
                                                                                                    ) +
                                                                                                    1e3,
                                                                                                r = [
                                                                                                    '0',
                                                                                                    '123456123111111456',
                                                                                                    '12345111111345',
                                                                                                    '111111111111111',
                                                                                                    '12345111111167890',
                                                                                                    '2121212121112222121',
                                                                                                    '1231231231232222123',
                                                                                                    '22222222222222222',
                                                                                                    '2111111111111222111',
                                                                                                    '322222222222222222',
                                                                                                    '12341234212341123',
                                                                                                    '9753434346787646',
                                                                                                    '1234123412341234',
                                                                                                    '987651235545454545',
                                                                                                    '123123455432123432',
                                                                                                    '21212123443434545',
                                                                                                    '5454544531321323',
                                                                                                    '98909087567564545645',
                                                                                                ],
                                                                                                a = [
                                                                                                    '4037840159631073270',
                                                                                                    ...JSON.parse(
                                                                                                        '["101598415","124139871","147333052","169079931","194945127","200868372","225822710","276214855","355712826","361879215","910825795994501468","g100588026","g112969450","g1149397433596350988","g1352476194718464059","g147262698","g149205131","g158719108","g158754949","g160924468","g164283274","g175572981","g194334627","g230291933","g2426404535463764819","g245533229","g25193586","g257364624","g263690118","g285979907","g285992315","g28757702","g288999008","g289367881","g293290840","g301757910","g302249930","g302577276","g309222362","g312505929","g317894641","g318028102","g320951866","g321466298","g322706780","g325920125","g325933426","g328827910","g331912501","g34509241","g47431271","g5355130437069108654","g55402697","g6911969691454201107","g85951308"]'
                                                                                                    ),
                                                                                                ];
                                                                                            switch (e) {
                                                                                                case 'image':
                                                                                                    for (
                                                                                                        let e = 0;
                                                                                                        e < t;
                                                                                                        e++
                                                                                                    ) {
                                                                                                        const t =
                                                                                                                r[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (r.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            o =
                                                                                                                a[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (a.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            d = i + e,
                                                                                                            l = n + e;
                                                                                                        s.push({
                                                                                                            userId: o,
                                                                                                            cliMsgId: d,
                                                                                                            fromUid: t,
                                                                                                            msgId: l.toString(),
                                                                                                            message: {
                                                                                                                hdUrl: 'https://b-f62-zpg-r.zdn.vn/8236607293085145247/0d5e94a8fc3726697f26.jpg?e2esession=QIqxr2vdpiBkZh0yizDjKzJIO2LACOAaSb+KBDlUkbwlil6lySe5/p1RncUJJLfTJj1Co/AkPZAOh6ln',
                                                                                                                oriUrl: 'https://b-f62-zpg-r.zdn.vn/8236607293085145247/0d5e94a8fc3726697f26.jpg?e2esession=QIqxr2vdpiBkZh0yizDjKzJIO2LACOAaSb+KBDlUkbwlil6lySe5/p1RncUJJLfTJj1Co/AkPZAOh6ln',
                                                                                                                params: '{"width":800,"height":800,"hd":"https://b-f62-zpg-r.zdn.vn/8236607293085145247/0d5e94a8fc3726697f26.jpg?e2esession=QIqxr2vdpiBkZh0yizDjKzJIO2LACOAaSb+KBDlUkbwlil6lySe5/p1RncUJJLfTJj1Co/AkPZAOh6ln","rawThumbUrl":"https://b-f62-zpg-r.zdn.vn/8236607293085145247/0d5e94a8fc3726697f26.jpg"}',
                                                                                                                thumbUrl:
                                                                                                                    'https://f62-zpg-r.zdn.vn/1518777612491889561/5571c987a1187b462209.jpg?e2esession=YBl+XgC1U90bnMk4yPcU519rhnRW4KoItoeNXLpRsl/secNpaT3Nxkal57Nj3UZhy2rUFgxhf8Pcjwah',
                                                                                                                title: void 0,
                                                                                                            },
                                                                                                            type: 'image',
                                                                                                            isExpired:
                                                                                                                !1,
                                                                                                            isExpiredAll:
                                                                                                                !1,
                                                                                                            subType:
                                                                                                                Math.round(
                                                                                                                    Math.random()
                                                                                                                )
                                                                                                                    ? v.MSG_SUBTYPE_PHOTO
                                                                                                                    : v.MSG_SUBTYPE_MEDIA_VIDEO,
                                                                                                            sendDttm:
                                                                                                                Date.now() +
                                                                                                                e,
                                                                                                            ttl: 0,
                                                                                                            localPath:
                                                                                                                null,
                                                                                                            previewThumb:
                                                                                                                void 0,
                                                                                                            updateTime:
                                                                                                                Date.now(),
                                                                                                            width: 0,
                                                                                                            height: 0,
                                                                                                        });
                                                                                                    }
                                                                                                    break;
                                                                                                case 'file':
                                                                                                    for (
                                                                                                        let e = 0;
                                                                                                        e < t;
                                                                                                        e++
                                                                                                    ) {
                                                                                                        const t =
                                                                                                                r[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (r.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            o =
                                                                                                                a[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (a.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            d = i + e,
                                                                                                            l = n + e;
                                                                                                        s.push({
                                                                                                            userId: o,
                                                                                                            cliMsgId: d,
                                                                                                            fromUid: t,
                                                                                                            msgId: l.toString(),
                                                                                                            message: {
                                                                                                                href: 'https://f27-group-zfr.zdn.vn/7f8b522a54e0babee3f1/117090926800068678?e2esession=RSHmz0Kj28vN9gMz6oFilBjFxVFqisUPnj3XpjlolXXpTo3bwJ0hqlUl5uR6Sr/wtHrtcyXqXj/mLYl3',
                                                                                                                params: '{"fileSize":8178,"checksum":"78c2c03eeab27abbdf28b0fe25088e30","checksumSha":"","fileExt":"xlsx","fdata":"{}","fType":1}',
                                                                                                                title: 'program_matrix_laP5chSikftFYc_LmERud.xlsx',
                                                                                                            },
                                                                                                            type: 'file',
                                                                                                            fileType:
                                                                                                                -1,
                                                                                                            extType: '',
                                                                                                            sendDttm:
                                                                                                                Date.now() +
                                                                                                                e,
                                                                                                            ttl: 0,
                                                                                                            updateTime:
                                                                                                                Date.now(),
                                                                                                            localPath:
                                                                                                                null,
                                                                                                            folderPath:
                                                                                                                null,
                                                                                                            previewThumb:
                                                                                                                '',
                                                                                                            dimension:
                                                                                                                null,
                                                                                                            downloadError:
                                                                                                                !1,
                                                                                                            isExpired:
                                                                                                                !1,
                                                                                                            isExpiredAll:
                                                                                                                !1,
                                                                                                        });
                                                                                                    }
                                                                                                    break;
                                                                                                case 'link':
                                                                                                    for (
                                                                                                        let e = 0;
                                                                                                        e < t;
                                                                                                        e++
                                                                                                    ) {
                                                                                                        const t =
                                                                                                                r[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (r.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            o =
                                                                                                                a[
                                                                                                                    Math.round(
                                                                                                                        Math.random() *
                                                                                                                            (a.length -
                                                                                                                                1)
                                                                                                                    )
                                                                                                                ],
                                                                                                            d = i + e,
                                                                                                            l = n + e;
                                                                                                        s.push({
                                                                                                            userId: o,
                                                                                                            cliMsgId: d,
                                                                                                            fromUid: t,
                                                                                                            msgId: l.toString(),
                                                                                                            message: {
                                                                                                                action: 'recommened.link',
                                                                                                                childnumber: 0,
                                                                                                                description:
                                                                                                                    'http://tinhte.vn',
                                                                                                                href: 'http://tinhte.vn',
                                                                                                                oriUrl: 'http://tinhte.vn',
                                                                                                                params: '{"mediaTitle":"http://tinhte.vn","artist":"","src":"tinhte.vn","stream_icon":"","streamUrl":"","type":0,"subType":3}',
                                                                                                                thumb: '',
                                                                                                                thumbUrl:
                                                                                                                    '',
                                                                                                                title: 'tinhte.vn',
                                                                                                                type: '',
                                                                                                            },
                                                                                                            type: 'link',
                                                                                                            sendDttm:
                                                                                                                Date.now() +
                                                                                                                e,
                                                                                                            ttl: 0,
                                                                                                            updateTime:
                                                                                                                Date.now(),
                                                                                                            previewThumb:
                                                                                                                '',
                                                                                                        });
                                                                                                    }
                                                                                            }
                                                                                            const o = this._getMediaDB(
                                                                                                e,
                                                                                                !1
                                                                                            );
                                                                                            await (null == o
                                                                                                ? void 0
                                                                                                : o.insertMulti(s));
                                                                                        }
                                                                                        _getMediaDB(e, t) {
                                                                                            const s = P.a.getInstance();
                                                                                            switch (e) {
                                                                                                case 'image':
                                                                                                    return t
                                                                                                        ? s.Media.Image
                                                                                                        : s.Core.Image;
                                                                                                case 'file':
                                                                                                    return t
                                                                                                        ? s.Media.File
                                                                                                        : s.Core.File;
                                                                                                case 'link':
                                                                                                    return t
                                                                                                        ? s.Media.Link
                                                                                                        : s.Core.Link;
                                                                                            }
                                                                                        }
                                                                                    })
                                                                                ) || ac)
                                                                        ) || ac)
                                                                ) || ac)
                                                        ) || ac)
                                                ) || ac)
                                        ) || ac)
                                ) || ac)
                        ) || ac)
                );
                var dc,
                    lc = s('lT2C'),
                    cc = s('C8zZ'),
                    hc = s('wmCV'),
                    uc = s('xdZB');
                let gc =
                    Object(pt.b)(cc.GroupPollManager)(
                        (dc =
                            (function (e, t) {
                                return d.ModuleContainer.inject(ut.b)(e, void 0, 0);
                            })(
                                (dc =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (dc =
                                            Reflect.metadata('design:paramtypes', [void 0 === ut.b ? Object : ut.b])(
                                                (dc = class {
                                                    constructor(e) {
                                                        (this.convDataManager = e),
                                                            (this._Logger = void 0),
                                                            (this.pollCache = void 0),
                                                            (this.pollCache = new O.default({ maxSize: 1e4 })),
                                                            this.setUpEvent();
                                                    }
                                                    get Logger() {
                                                        return (
                                                            this._Logger ||
                                                                (this._Logger = d.ModuleContainer.resolve(
                                                                    N.ZLoggerFactory
                                                                ).createZLogger(kt.b.pollV3, [kt.b.groupPollManager])),
                                                            this._Logger
                                                        );
                                                    }
                                                    updatePollCache(e, t) {
                                                        this.pollCache.set(e, t);
                                                    }
                                                    removePollCacheBelongsToConv(e) {
                                                        Array.from(this.pollCache.entriesAscending()).forEach((t) => {
                                                            let [s, i] = t;
                                                            i.group_id === He.default.getGroupIdFromConversationId(e) &&
                                                                this.pollCache.delete(s);
                                                        });
                                                    }
                                                    setUpEvent() {
                                                        this.convDataManager.addEventListener(It.b.DeleteConv, (e) => {
                                                            this.removePollCacheBelongsToConv(e.convId);
                                                        }),
                                                            this.convDataManager.addEventListener(
                                                                It.b.EmptyConv,
                                                                (e) => {
                                                                    this.removePollCacheBelongsToConv(e.convId);
                                                                }
                                                            ),
                                                            this.convDataManager.addEventListener(
                                                                It.b.LeaveGroup,
                                                                (e) => {
                                                                    this.removePollCacheBelongsToConv(e.convId);
                                                                }
                                                            );
                                                    }
                                                    isAdmin(e, t) {
                                                        var s;
                                                        const i = jt.default.getGroupByIdSync(e);
                                                        if (!i) return !1;
                                                        if (t === i.creatorId) return !0;
                                                        let n = !1;
                                                        return (
                                                            null === (s = i.topMember) ||
                                                                void 0 === s ||
                                                                s.forEach((e) => {
                                                                    e.id === t && e.isAdmin && (n = !0);
                                                                }),
                                                            n
                                                        );
                                                    }
                                                    isAllowSetTopic(e) {
                                                        var t;
                                                        const s = jt.default.getGroupByIdSync(e);
                                                        return (
                                                            !!s &&
                                                            !(
                                                                !We.default.group_topics.enable ||
                                                                (null !== (t = s.setting) &&
                                                                    void 0 !== t &&
                                                                    t.setTopicOnly)
                                                            )
                                                        );
                                                    }
                                                    isEnablePin(e) {
                                                        return (
                                                            this.isAdmin(e, rt.default.getUidMe()) ||
                                                            this.isAllowSetTopic(e)
                                                        );
                                                    }
                                                    isEnableClose(e, t) {
                                                        const s = rt.default.getUidMe();
                                                        return this.isAdmin(e, s) || s === t;
                                                    }
                                                    createPollRequestData(e) {
                                                        const { pollData: t, groupId: s, src: i } = e,
                                                            n = {
                                                                question: t.question,
                                                                options: t.options,
                                                                expired_time: t.expiredTime,
                                                                pinAct: t.pinAct,
                                                                allow_multi_choices: t.allowMultiChoices,
                                                                allow_add_new_option: t.allowAddNewOption,
                                                                is_hide_vote_preview: t.isHideVotePreview,
                                                                is_anonymous: t.isAnonymous,
                                                                poll_type: t.pollType,
                                                            };
                                                        return {
                                                            groupId: He.default.getGroupIdFromConversationId(s),
                                                            pollData: n,
                                                            src: i,
                                                        };
                                                    }
                                                    async createPoll(e) {
                                                        const t = e.pollData.pinAct,
                                                            {
                                                                groupId: s,
                                                                pollData: i,
                                                                src: n,
                                                            } = this.createPollRequestData(e);
                                                        try {
                                                            const r = await qe.default.createPoll(s, i, n);
                                                            t && this.pinPoll(r.poll_id, e.groupId, r.question);
                                                        } catch (r) {
                                                            throw (this.Logger.zsymb(18, 10716, 3e4, r), r);
                                                        }
                                                    }
                                                    getPollDetailSync(e) {
                                                        return this.pollCache.get(e);
                                                    }
                                                    async getPollDetail(e, t) {
                                                        let s = this.getPollDetailSync(e);
                                                        if (s) return s;
                                                        if (((s = await le.default.getPollInfo(e)), !s)) {
                                                            if (t) return this.getPollDetailFromServer(e);
                                                            throw Error("Poll isn't existed in DB");
                                                        }
                                                        return this.pollCache.set(e, s), s;
                                                    }
                                                    async getPollDetailFromServer(e, t) {
                                                        const s = await qe.default.getPollDetail(t, e, !1);
                                                        if (!s) throw Error("Poll isn't existed in Server");
                                                        return this.pollCache.set(e, s), s;
                                                    }
                                                    async pinPoll(e, t, s) {
                                                        let i = s;
                                                        if (!i) {
                                                            let t = this.getPollDetailSync(e);
                                                            if ((t || (t = await this.getPollDetail(e)), !t))
                                                                throw Error("Poll isn't existed");
                                                            i = t.question;
                                                        }
                                                        hc.a.pinFromBoard(
                                                            { userId: t },
                                                            { poll_id: e, isPoll: !0, question: i },
                                                            null,
                                                            null,
                                                            uc.a.getWinIdByConvId(t)
                                                        );
                                                    }
                                                    unpinPoll(e, t) {
                                                        hc.a.unpinFromBoard(t, { poll_id: e, isPoll: !0 });
                                                    }
                                                    async lockPoll(e) {
                                                        const t = this.getPollDetailSync(e);
                                                        if (!t || !t.closed)
                                                            try {
                                                                qe.default.lockPoll(e);
                                                            } catch (s) {
                                                                this.Logger.zsymb(
                                                                    18,
                                                                    10716,
                                                                    30001,
                                                                    '[lockPoll] ',
                                                                    e,
                                                                    s
                                                                );
                                                            }
                                                    }
                                                    async sharePollInGroup(e) {
                                                        try {
                                                            qe.default.sharePoll(e);
                                                        } catch (t) {
                                                            this.Logger.zsymb(
                                                                18,
                                                                10716,
                                                                30002,
                                                                '[sharePollInGroup] ',
                                                                e,
                                                                t
                                                            );
                                                        }
                                                    }
                                                    async votePoll(e) {
                                                        const { newOptions: t, pollId: s, votedOptionIds: i } = e,
                                                            n = He.default.getGroupIdFromConversationId(e.groupId);
                                                        try {
                                                            t.length > 0
                                                                ? await qe.default.addNewOptionPoll(
                                                                      n,
                                                                      s,
                                                                      JSON.stringify(t),
                                                                      i
                                                                  )
                                                                : await qe.default.vote(n, s, i);
                                                        } catch (r) {
                                                            throw (
                                                                (this.Logger.zsymb(
                                                                    18,
                                                                    10716,
                                                                    30003,
                                                                    '[votePoll] ',
                                                                    r,
                                                                    s
                                                                ),
                                                                r)
                                                            );
                                                        }
                                                    }
                                                })
                                            ) || dc)
                                    ) || dc)
                            ) || dc)
                    ) || dc;
                var mc,
                    pc = s('ILDi');
                let fc =
                    Object(pt.b)(cc.GroupPollInfoManager)(
                        (mc =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (mc =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (mc = class {
                                            constructor() {
                                                (this.updateEmitter = void 0),
                                                    (this.viewedMoreFromMsgIds = void 0),
                                                    (this.updateEmitter = new Cr.a()),
                                                    (this.viewedMoreFromMsgIds = new Set());
                                            }
                                            getPollParams(e) {
                                                let t = null;
                                                try {
                                                    var s;
                                                    t = JSON.parse(
                                                        null == e || null === (s = e.message) || void 0 === s
                                                            ? void 0
                                                            : s.params
                                                    );
                                                } catch (i) {
                                                    t = {};
                                                }
                                                return t;
                                            }
                                            getLastMessagePoll(e, t, s) {
                                                let i = t;
                                                return (
                                                    s.forEach((s) => {
                                                        s.msgType !== t.msgType ||
                                                            this.getPollParams(s).pollId !== e ||
                                                            (i = s);
                                                    }),
                                                    i
                                                );
                                            }
                                            getContinuosPollInfoSection(e, t) {
                                                const s = [];
                                                let i = 0;
                                                return (
                                                    t.forEach((t) => {
                                                        var n;
                                                        t.msgType === v.MSG_POLL && this.getPollParams(t).pollId === e
                                                            ? (s[i] || (s[i] = []), s[i].push(t))
                                                            : null !== (n = s[i]) && void 0 !== n && n[0] && (i += 1);
                                                    }),
                                                    s.filter(
                                                        (e) => e.length > We.default.groupPoll.max_info_msg_display
                                                    )
                                                );
                                            }
                                            isShowPollCard(e, t, s) {
                                                const i = this.getLastMessagePoll(e, t, s);
                                                return ci.b.isSameMsg(t, i);
                                            }
                                            getPollInfoShowStatus(e, t, s) {
                                                const i = this.getContinuosPollInfoSection(e, s);
                                                for (const n of i)
                                                    for (let e = n.length - 1; e >= 0; e--)
                                                        if (ci.b.isSameMsg(t, n[e]))
                                                            return e !== n.length - 1
                                                                ? 'HIDE'
                                                                : n[e - 1] &&
                                                                  this.viewedMoreFromMsgIds.has(n[e - 1].msgId)
                                                                ? 'SHOW'
                                                                : 'SHOW_VIEW_MORE';
                                                return 'SHOW';
                                            }
                                            viewMore(e, t, s) {
                                                let i = [];
                                                const n = this.getContinuosPollInfoSection(e, s);
                                                for (const r of n)
                                                    if (r[r.length - 1].msgId === t) {
                                                        i = r.map((e) => e.msgId);
                                                        break;
                                                    }
                                                this.updateEmitter.emit('EXPAND_MSG_INFO', { msgIds: i }),
                                                    this.viewedMoreFromMsgIds.add(t);
                                            }
                                            clearViewedMoreHistory(e) {
                                                this.viewedMoreFromMsgIds.delete(e);
                                            }
                                        })
                                    ) || mc)
                            ) || mc)
                    ) || mc;
                d.ModuleContainer.registerSingleton(lc.a, gc), d.ModuleContainer.registerSingleton(pc.a, fc);
                var vc,
                    bc = s('tw7i');
                let yc =
                    Object(d.injectable)()(
                        (vc =
                            (function (e, t) {
                                return Object(d.inject)(bc.d)(e, void 0, 0);
                            })(
                                (vc =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (vc =
                                            Reflect.metadata('design:paramtypes', [Object])(
                                                (vc = class {
                                                    constructor(e) {
                                                        this.queue = e;
                                                    }
                                                    push(e, t) {
                                                        const s = { msgId: e, action: t };
                                                        this.queue.push(s);
                                                    }
                                                })
                                            ) || vc)
                                    ) || vc)
                            ) || vc)
                    ) || vc;
                class Ic extends Error {
                    constructor(e) {
                        let { message: t, name: s, options: i } = e;
                        super(t),
                            (this.code = void 0),
                            (this.name = void 0),
                            (this.name = s),
                            i && i.code && (this.code = i.code),
                            i && i.stack && (this.stack = new Error().stack),
                            Object.setPrototypeOf(this, Ic.prototype);
                    }
                }
                var _c = (e, t) => {
                    const s = { code: e.code, stack: t };
                    return new Ic({ name: e.name, options: s, message: e.message });
                };
                const Mc = {
                        name: 'CANNOT_GET_MSG_FROM_DB',
                        code: 1,
                        message: 'Cannot get message from Message Core database',
                    },
                    Cc = { name: 'QUEUE_TASK_EMPTY', code: 2, message: 'Action log info queue is empty' },
                    Tc = {
                        name: 'TASK_IS_RUNNING',
                        code: 3,
                        message: 'Media action log info queue has task is running',
                    };
                var Oc = s('JJxn'),
                    Ec = s('tmLI'),
                    Sc = s('UQla'),
                    wc = s('n4Tl');
                var Dc = s('HPXo');
                class Lc {
                    constructor() {
                        (this.msg = void 0),
                            (this.subType = void 0),
                            (this.entryPoint = void 0),
                            (this.convType = void 0),
                            (this.mediaStatus = void 0),
                            (this.forceStatus = void 0);
                    }
                    withMessage(e) {
                        return (this.msg = e), this;
                    }
                    withSubType(e) {
                        return (this.subType = e), this;
                    }
                    withEntryPoint(e) {
                        return (this.entryPoint = e), this;
                    }
                    withStatus(e) {
                        return (
                            (this.mediaStatus =
                                e &&
                                (function (e) {
                                    let t = '';
                                    return (
                                        null != e && e.isExpired && (t = Sc.s.Expired),
                                        null != e && e.isExpiredSoon && (t = Sc.s.ExpiredSoon),
                                        null != e && e.autoDownloadPath && (t = Sc.s.DownloadedAuto),
                                        ((null != e && e.localPath) || (null != e && e.folderPath)) &&
                                            (t = Sc.s.DownloadedManual),
                                        t
                                    );
                                })(e)),
                            this
                        );
                    }
                    withForceStatus(e) {
                        return void 0 === e && (e = ''), (this.forceStatus = e), this;
                    }
                    build() {
                        var e, t, s, i;
                        const n = (function (e) {
                                const t = Object(Ec.n)(null == e ? void 0 : e.params) || '';
                                return t ? (null == t ? void 0 : t.fileSize) && +t.fileSize / 1024 : -1;
                            })(this.msg.message),
                            r =
                                (null === (e = this.msg) || void 0 === e ? void 0 : e.toUid) &&
                                ((a = null === (t = this.msg) || void 0 === t ? void 0 : t.toUid),
                                He.default.isOAType(rt.default.getProfileFriendSync(a))
                                    ? Oc.a.OA
                                    : He.default.getConversationType(a));
                        var a;
                        const o =
                                r === Oc.a.GROUP &&
                                (function (e) {
                                    let t;
                                    const s = jt.default.getGroupByIdSync(e);
                                    return (
                                        null != s &&
                                            s.topMember &&
                                            (null == s ? void 0 : s.topMember.length) > 0 &&
                                            (t = null == s ? void 0 : s.topMember.length),
                                        t
                                    );
                                })(this.msg.toUid),
                            d =
                                this.msg.msgType === v.MSG_VIDEO
                                    ? (function (e) {
                                          let t = e;
                                          return t || (t = wc.a.Success), t;
                                      })(this.mediaStatus)
                                    : r === Oc.a.CLOUD
                                    ? (function (e, t) {
                                          let s = e;
                                          return (
                                              e !== Sc.q.DownloadedAuto &&
                                                  e !== Sc.q.DownloadedManual &&
                                                  t <= We.default.mediaStatus.cloud.limitBigFile &&
                                                  (s = Sc.q.CloudSaved),
                                              s
                                          );
                                      })(this.mediaStatus, n)
                                    : this.mediaStatus,
                            l = {
                                msg_type: Oc.l[this.msg.msgType],
                                entry_point: this.entryPoint,
                                size: n,
                                sent_time: this.msg.sendDttm,
                                is_e2ee:
                                    ((h = null === (s = this.msg) || void 0 === s ? void 0 : s.e2eeStatus),
                                    h === v.MSG_E2EE ? Oc.e.YES : Oc.e.NO),
                                is_sender:
                                    ((c = null === (i = this.msg) || void 0 === i ? void 0 : i.fromUid),
                                    '0' != c ? Oc.f.RECEIVER : Oc.f.SENDER),
                                conv_type: Oc.j[r],
                                sync_source: Oc.k[this.msg.src],
                                msg_id: this.msg.msgId,
                            };
                        var c, h;
                        switch ((o && (l.group_size = o), this.subType)) {
                            case Oc.o.MediaExpiredWhenAction:
                                l.original_status = Dc.a.get(this.msg.msgId);
                                break;
                            case Oc.o.MediaStatusInView:
                                this.msg.msgType === v.MSG_PHOTO || this.msg.msgType === v.MSG_PHOTO_2
                                    ? (l.file_status = null == this ? void 0 : this.forceStatus)
                                    : (l.file_status = d);
                        }
                        return l;
                    }
                }
                var Fc = class {
                        verify(e) {
                            return (
                                !!Object.values(Oc.e).includes(e.is_e2ee) &&
                                !!Object.values(Oc.f).includes(e.is_sender) &&
                                !!Object.values(Oc.f).includes(e.is_sender) &&
                                !!Object.values(Oc.j).includes(e.conv_type) &&
                                !!Object.values(Oc.k).includes(e.sync_source) &&
                                !!Object.values(Oc.l).includes(e.msg_type)
                            );
                        }
                    },
                    Rc = s('a4lh'),
                    Ac = s('o1u6'),
                    Pc = s('lJL2');
                const Nc = [v.MSG_FILE, v.MSG_VIDEO, v.MSG_VOICE];
                var jc;
                let Uc =
                    Object(d.injectable)()(
                        (jc =
                            (function (e, t) {
                                return Object(d.inject)(bc.d)(e, void 0, 0);
                            })(
                                (jc =
                                    (function (e, t) {
                                        return Object(d.inject)(N.ZLoggerFactory)(e, void 0, 1);
                                    })(
                                        (jc =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (jc =
                                                    Reflect.metadata('design:paramtypes', [
                                                        Object,
                                                        void 0 === N.ZLoggerFactory ? Object : N.ZLoggerFactory,
                                                    ])(
                                                        (jc = class {
                                                            constructor(e, t) {
                                                                (this.queue = e),
                                                                    (this.logger = void 0),
                                                                    (this.DB = void 0),
                                                                    (this.isRunning = void 0),
                                                                    (this.logger = t.createZLogger(kt.b.mediaStatus, [
                                                                        'action-log-consumer',
                                                                    ])),
                                                                    (this.DB = P.a.getInstance()),
                                                                    (this.isRunning = !1);
                                                            }
                                                            async run() {
                                                                if (!(this.queue.length <= 0)) {
                                                                    if (this.isRunning) return _c(Tc);
                                                                    (this.isRunning = !0),
                                                                        requestAnimationFrame(async () => {
                                                                            try {
                                                                                const e = this.queue.pop();
                                                                                if (!e) return _c(Cc);
                                                                                const t = e.msgId,
                                                                                    s = e.action,
                                                                                    i = await this.DB.Core.Message.get(
                                                                                        t
                                                                                    );
                                                                                if (!i) return _c(Mc);
                                                                                const n =
                                                                                        Nc.includes(i.msgType) &&
                                                                                        (Pc.a.get(t) ||
                                                                                            (await Ac.a.status(t, []))),
                                                                                    r = new Lc()
                                                                                        .withEntryPoint(s.entryPoint)
                                                                                        .withSubType(s.subType)
                                                                                        .withMessage(i)
                                                                                        .withStatus(n)
                                                                                        .withForceStatus(
                                                                                            (null == s
                                                                                                ? void 0
                                                                                                : s.forceStatus) || ''
                                                                                        )
                                                                                        .build();
                                                                                new Fc().verify(r) &&
                                                                                    Rc.a.LogActionInfo(s.subType, r);
                                                                            } catch (e) {
                                                                                this.logger.zsymb(
                                                                                    3,
                                                                                    10591,
                                                                                    3e4,
                                                                                    'error {}',
                                                                                    JSON.stringify(e)
                                                                                );
                                                                            } finally {
                                                                                (this.isRunning = !1), this.run();
                                                                            }
                                                                        });
                                                                }
                                                            }
                                                        })
                                                    ) || jc)
                                            ) || jc)
                                    ) || jc)
                            ) || jc)
                    ) || jc;
                var Bc;
                let kc =
                    Object(d.injectable)()(
                        (Bc =
                            (function (e, t) {
                                return Object(d.inject)(bc.c)(e, void 0, 0);
                            })(
                                (Bc =
                                    (function (e, t) {
                                        return Object(d.inject)(bc.a)(e, void 0, 1);
                                    })(
                                        (Bc =
                                            Reflect.metadata(
                                                'design:type',
                                                Function
                                            )(
                                                (Bc =
                                                    Reflect.metadata('design:paramtypes', [Object, Object])(
                                                        (Bc = class {
                                                            constructor(e, t) {
                                                                (this.producer = e), (this.consumer = t);
                                                            }
                                                            run(e, t) {
                                                                this.producer.push(e, t), this.consumer.run();
                                                            }
                                                        })
                                                    ) || Bc)
                                            ) || Bc)
                                    ) || Bc)
                            ) || Bc)
                    ) || Bc;
                d.ModuleContainer.registerSingleton(
                    bc.d,
                    class {
                        constructor() {
                            (this.queue = void 0), (this.queue = []);
                        }
                        push(e) {
                            this.queue.push(e);
                        }
                        pop() {
                            return this.queue.pop();
                        }
                        get length() {
                            return this.queue.length;
                        }
                    }
                ),
                    d.ModuleContainer.registerSingleton(bc.c, yc),
                    d.ModuleContainer.registerSingleton(bc.a, Uc),
                    d.ModuleContainer.registerSingleton(bc.b, kc);
                var Gc = s('imbw'),
                    xc = s('1EWQ');
                const zc = 1,
                    Vc = 2,
                    $c = 3;
                let Wc, Kc, qc, Hc, Qc, Jc, Zc;
                var Xc;
                !(function (e) {
                    (e[(e.TEXT = 0)] = 'TEXT'),
                        (e[(e.STICKER = 1)] = 'STICKER'),
                        (e[(e.PHOTO = 2)] = 'PHOTO'),
                        (e[(e.LINK = 3)] = 'LINK'),
                        (e[(e.FILE = 4)] = 'FILE'),
                        (e[(e.GIF = 5)] = 'GIF'),
                        (e[(e.CONTACT = 6)] = 'CONTACT');
                })(Wc || (Wc = {})),
                    (function (e) {
                        (e[(e.CHAT_11 = 1)] = 'CHAT_11'),
                            (e[(e.CHAT_GROUP = 2)] = 'CHAT_GROUP'),
                            (e[(e.MY_CLOUD = 3)] = 'MY_CLOUD');
                    })(Kc || (Kc = {})),
                    (function (e) {
                        (e[(e.SINGLE = 0)] = 'SINGLE'), (e[(e.GROUP = 1)] = 'GROUP');
                    })(qc || (qc = {})),
                    (function (e) {
                        (e[(e.CONTEXT_MENU = 0)] = 'CONTEXT_MENU'), (e[(e.BUBBLE = 1)] = 'BUBBLE');
                    })(Hc || (Hc = {})),
                    (function (e) {
                        (e[(e.RESEND = 1)] = 'RESEND'), (e[(e.DELETE = 2)] = 'DELETE');
                    })(Qc || (Qc = {})),
                    (function (e) {
                        (e[(e.NO_RESEND = 1)] = 'NO_RESEND'),
                            (e[(e.RESEND_SINGLE = 2)] = 'RESEND_SINGLE'),
                            (e[(e.RESEND_ALL = 3)] = 'RESEND_ALL');
                    })(Jc || (Jc = {})),
                    (function (e) {
                        (e[(e.NO_DELETE = 1)] = 'NO_DELETE'),
                            (e[(e.DELETE_SINGLE = 2)] = 'DELETE_SINGLE'),
                            (e[(e.DELETE_ALL = 3)] = 'DELETE_ALL');
                    })(Zc || (Zc = {}));
                let Yc =
                    Object(pt.b)(Gc.a)(
                        (Xc =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (Xc =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (Xc = class {
                                            constructor() {
                                                (this.lastNetworkBannerAppearTime = void 0),
                                                    (this.logger = void 0),
                                                    (this.lastNetworkBannerAppearTime = null);
                                            }
                                            get Logger() {
                                                return (
                                                    this.logger ||
                                                        (this.logger = d.ModuleContainer.resolve(
                                                            N.ZLoggerFactory
                                                        ).createZLogger('auto-retry', ['action-log'])),
                                                    this.logger
                                                );
                                            }
                                            logAction999(e) {
                                                const { type: t, payload: s } = e;
                                                let i;
                                                switch (t) {
                                                    case 'ShowManualRetry':
                                                        i = zc;
                                                        break;
                                                    case 'InteractManualRetry':
                                                        i = Vc;
                                                        break;
                                                    case 'ShowBannerNetwork':
                                                        i = $c;
                                                }
                                                vt.e.logActionInfoV2(vt.b.AutoRetry, i, s);
                                            }
                                            getChatTypeFromConvId(e) {
                                                return He.default.isGroup(e)
                                                    ? Kc.CHAT_GROUP
                                                    : xc.a.isSendToMe(e)
                                                    ? Kc.MY_CLOUD
                                                    : Kc.CHAT_11;
                                            }
                                            getRetryMsgType(e) {
                                                switch (e) {
                                                    case v.MSG_TEXT:
                                                        return Wc.TEXT;
                                                    case v.MSG_GIF:
                                                        return Wc.GIF;
                                                    case v.MSG_FILE:
                                                    case v.MSG_VIDEO:
                                                        return Wc.FILE;
                                                    case v.MSG_PHOTO:
                                                    case v.MSG_PHOTO_GROUP:
                                                        return Wc.PHOTO;
                                                    case v.MSG_CONTACT:
                                                        return Wc.CONTACT;
                                                    case v.MSG_STICKER:
                                                    case v.MSG_STICKER_GROUP:
                                                    case v.MSG_STICKER_2:
                                                        return Wc.STICKER;
                                                    case v.MSG_LINK_CLIENT:
                                                        return Wc.LINK;
                                                    default:
                                                        return;
                                                }
                                            }
                                            getMsgCombineType(e) {
                                                return [v.MSG_PHOTO_GROUP, v.MSG_STICKER_GROUP].includes(e)
                                                    ? qc.GROUP
                                                    : qc.SINGLE;
                                            }
                                            showManualRetryReport(e) {
                                                const t = this.getRetryMsgType(e.msgType);
                                                void 0 !== t &&
                                                    this.logAction999({
                                                        type: 'ShowManualRetry',
                                                        payload: {
                                                            msg_type: t,
                                                            chat_type: this.getChatTypeFromConvId(e.conversationId),
                                                            error_id: e.errorCode,
                                                            is_groupping: this.getMsgCombineType(e.msgType),
                                                        },
                                                    });
                                            }
                                            networkBannerAppearCapture() {
                                                this.lastNetworkBannerAppearTime = ii.a.getTimeNow();
                                            }
                                            networkBannerDisappearReport() {
                                                const e = ii.a.getTimeNow();
                                                if (null === this.lastNetworkBannerAppearTime) return;
                                                const t = e - this.lastNetworkBannerAppearTime;
                                                t <= 0 ||
                                                    (this.logAction999({
                                                        type: 'ShowBannerNetwork',
                                                        payload: {
                                                            showed_time: this.lastNetworkBannerAppearTime,
                                                            off_time: e,
                                                            duration: t,
                                                        },
                                                    }),
                                                    (this.lastNetworkBannerAppearTime = null));
                                            }
                                            resendErrorMessageReport(e) {
                                                const t = this.getRetryMsgType(e.msgType);
                                                void 0 !== t &&
                                                    this.logAction999({
                                                        type: 'InteractManualRetry',
                                                        payload: {
                                                            msg_type: t,
                                                            chat_type: this.getChatTypeFromConvId(e.conversationId),
                                                            is_groupping: this.getMsgCombineType(e.msgType),
                                                            is_entrypoint: Hc[e.source],
                                                            is_resend:
                                                                this.getMsgCombineType(e.msgType) === qc.GROUP
                                                                    ? Jc.RESEND_ALL
                                                                    : Jc.RESEND_SINGLE,
                                                            is_deleted: Zc.NO_DELETE,
                                                            action_type: Qc.RESEND,
                                                        },
                                                    });
                                            }
                                            deleteErrorMessageReport(e) {
                                                const t = this.getRetryMsgType(e.msgType);
                                                void 0 !== t &&
                                                    this.logAction999({
                                                        type: 'InteractManualRetry',
                                                        payload: {
                                                            msg_type: t,
                                                            chat_type: this.getChatTypeFromConvId(e.conversationId),
                                                            is_groupping: this.getMsgCombineType(e.msgType),
                                                            is_entrypoint: Hc[e.source],
                                                            is_resend: Jc.NO_RESEND,
                                                            is_deleted:
                                                                this.getMsgCombineType(e.msgType) === qc.GROUP
                                                                    ? Zc.DELETE_ALL
                                                                    : Zc.DELETE_SINGLE,
                                                            action_type: Qc.DELETE,
                                                        },
                                                    });
                                            }
                                        })
                                    ) || Xc)
                            ) || Xc)
                    ) || Xc;
                d.ModuleContainer.registerSingleton(Gc.a, Yc);
                var eh,
                    th = s('Z1oQ'),
                    sh = s('QbTC'),
                    ih = s('xtzN'),
                    nh = s('n32m'),
                    rh = s('hKna');
                let ah =
                    Object(pt.b)(nh.RetryErrorController)(
                        (eh =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (eh =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (eh = class {
                                            constructor() {
                                                (this.logger = void 0),
                                                    (this.errNetworkCounterMap = void 0),
                                                    (this.errNetworkCounterMap = new Map());
                                            }
                                            get Logger() {
                                                return (
                                                    this.logger ||
                                                        (this.logger = d.ModuleContainer.resolve(
                                                            N.ZLoggerFactory
                                                        ).createZLogger(kt.b.autoRetry, ['retry-error-controller'])),
                                                    this.logger
                                                );
                                            }
                                            getErrNetworkRetryCount(e) {
                                                if (!e) return 0;
                                                const t = this.errNetworkCounterMap.get(e);
                                                if (void 0 !== t)
                                                    return 0 === t ? (this.errNetworkCounterMap.delete(e), 0) : t;
                                                const s = We.default.retryConfig.max_err_network_retry_count;
                                                return this.errNetworkCounterMap.set(e, s), s;
                                            }
                                            decreaseErrNetworkRetryCount(e) {
                                                if (!e) return;
                                                const t = this.getErrNetworkRetryCount(e);
                                                t > 0
                                                    ? this.errNetworkCounterMap.set(e, t - 1)
                                                    : this.errNetworkCounterMap.delete(e);
                                            }
                                            deleteErrNetworkRetryCountItem(e) {
                                                e && this.errNetworkCounterMap.delete(e);
                                            }
                                            logRetryError(e, t) {
                                                this.Logger.zsymb(18, 11217, 3e4, e, t);
                                            }
                                            shouldRetry(e, t, s) {
                                                if (!e || rh.a.includes(e.code)) return !1;
                                                if (!rh.c.includes(e.code)) return !1;
                                                const i = rh.d.NO_NETWORK_ERROR_CODE.includes(e.code);
                                                if (
                                                    i &&
                                                    (!We.default.retry_err_no_network ||
                                                        (en.b.getStateNetwork() !== en.a.CHECKING &&
                                                            en.b.getStateNetwork() !== en.a.DISCONNECT))
                                                )
                                                    return !1;
                                                const n = this.getRetryErrorCodeGroupName(e.code);
                                                if (n && this.getRetryErrorCodeMapping()[n].off) return !1;
                                                const r = i && this.getErrNetworkRetryCount(s) > 0;
                                                if (0 === t.count && !r) return !1;
                                                const a = this.getRetryTimeout(t);
                                                return (
                                                    !!(a && ii.a.getTimeNow() - t.timestamp < a) &&
                                                    (t.count && !i && t.count--,
                                                    i && this.decreaseErrNetworkRetryCount(s),
                                                    !0)
                                                );
                                            }
                                            getRetryTimeout(e) {
                                                let t = 0;
                                                return (
                                                    We.default.retryConfig &&
                                                        We.default.retryConfig.setting_feature &&
                                                        e.timestamp &&
                                                        e.timeout &&
                                                        (e.timeout === v.RETRY_MSG_TIMEOUT_DEFAULT
                                                            ? (t = We.default.retryConfig.time_retry_default)
                                                            : e.timeout === v.RETRY_MSG_TIMEOUT_LONG &&
                                                              (t = We.default.retryConfig.time_retry_long)),
                                                    t
                                                );
                                            }
                                            getRetryErrorCodeGroupName(e) {
                                                return Object.keys(rh.d).find((t) => rh.d[t].includes(e));
                                            }
                                            getNoRetryErrorCodeGroupName(e) {
                                                return Object.keys(rh.b).find((t) => rh.b[t].includes(e));
                                            }
                                            getRetryErrorCodeMapping() {
                                                return We.default.retryConfig.retry_strategy &&
                                                    'object' == typeof We.default.retryConfig.retry_strategy
                                                    ? Object.keys(We.default.retryConfig.retry_strategy).reduce(
                                                          (e, t) => (
                                                              (e[t.toUpperCase()] =
                                                                  We.default.retryConfig.retry_strategy[t]),
                                                              e
                                                          ),
                                                          {}
                                                      )
                                                    : rh.e;
                                            }
                                        })
                                    ) || eh)
                            ) || eh)
                    ) || eh;
                var oh,
                    dh = s('yoj5');
                let lh =
                    Object(pt.b)(sh.a)(
                        (oh =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (oh =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (oh = class {
                                            constructor() {
                                                (this.logger = void 0),
                                                    (this.waitingSocketOpenQueue = void 0),
                                                    (this.retryCountMapping = void 0),
                                                    (this.isDoneOffline = void 0),
                                                    (this.handleWaitingConnectionRetry = () => {
                                                        const e = [...this.waitingSocketOpenQueue];
                                                        this.waitingSocketOpenQueue = [];
                                                        for (const t of e) {
                                                            const e = dh.getGapTime();
                                                            window.requestIdleCallback(
                                                                () => {
                                                                    t();
                                                                },
                                                                { timeout: e }
                                                            );
                                                        }
                                                    }),
                                                    (this.unlockProcessOffline = () => {
                                                        (this.isDoneOffline = !0),
                                                            Es.default.getSocketState() === rh.g.OPEN &&
                                                                this.handleWaitingConnectionRetry();
                                                    }),
                                                    (this.waitingSocketOpenQueue = []),
                                                    (this.retryCountMapping = new Map()),
                                                    (this.isDoneOffline = !1),
                                                    Je.default.subscribe((e, t) => {
                                                        if (e === Ze.WebsocketActions.CONNECTION_STATE_CHANGE) {
                                                            const { state: e, prevState: s } = t;
                                                            void 0 !== s &&
                                                                e === rh.g.OPEN &&
                                                                this.isDoneOffline &&
                                                                this.handleWaitingConnectionRetry();
                                                        }
                                                    }),
                                                    Es.default.subcribe(
                                                        Es.CallbackID.ON_DONE_OFFLINE,
                                                        this.unlockProcessOffline
                                                    );
                                            }
                                            get Logger() {
                                                return (
                                                    this.logger ||
                                                        (this.logger = d.ModuleContainer.resolve(
                                                            N.ZLoggerFactory
                                                        ).createZLogger('auto-retry-socket', [
                                                            'retry-error-controller',
                                                        ])),
                                                    this.logger
                                                );
                                            }
                                            getRetryTimeout(e) {
                                                let t = 0;
                                                return (
                                                    We.default.retryConfig &&
                                                        We.default.retryConfig.setting_feature &&
                                                        e.timestamp &&
                                                        e.timeout &&
                                                        (e.timeout === v.RETRY_MSG_TIMEOUT_DEFAULT
                                                            ? (t = We.default.retryConfig.time_retry_default)
                                                            : e.timeout === v.RETRY_MSG_TIMEOUT_LONG &&
                                                              (t = We.default.retryConfig.time_retry_long)),
                                                    t
                                                );
                                            }
                                            getErrorCode(e) {
                                                let t = e.code;
                                                return (
                                                    e.code === rh.f.ERR_CONNECTION_TIMED_OUT &&
                                                        en.b.getStateNetwork() !== en.a.CONNECTED &&
                                                        (t = rh.f.ERR_NO_NETWORK),
                                                    t
                                                );
                                            }
                                            shouldRetry(e, t, s) {
                                                if (!e || !t || !s || s.count <= 0) return !1;
                                                let i = this.getErrorCode(e);
                                                if (
                                                    i === rh.f.ERR_CONNECTION_TIMED_OUT ||
                                                    i === rh.f.ERR_SOCKET_CLOSED ||
                                                    i === rh.f.ERR_NO_NETWORK
                                                ) {
                                                    var n;
                                                    const e =
                                                        null !== (n = this.retryCountMapping.get(t)) && void 0 !== n
                                                            ? n
                                                            : 0;
                                                    let r = We.default.retryConfig.max_retry_count;
                                                    if (
                                                        (i === rh.f.ERR_SOCKET_CLOSED &&
                                                            (r = We.default.retryConfig.max_err_network_retry_count),
                                                        void 0 !== e && e < r)
                                                    ) {
                                                        const e = this.getRetryTimeout(s);
                                                        return (
                                                            !!(e && ii.a.getTimeNow() - s.timestamp < e) &&
                                                            (s.count && s.count--, !0)
                                                        );
                                                    }
                                                    return !1;
                                                }
                                                return !1;
                                            }
                                            pushToRetryQueue(e, t, s) {
                                                const i = d.ModuleContainer.resolve(th.a).getRetryErrorCodeMapping();
                                                this.logRetryError(e.code, s);
                                                const n = this.getErrorCode(e);
                                                if (n !== rh.f.ERR_CONNECTION_TIMED_OUT) {
                                                    var r;
                                                    if (n === rh.f.ERR_SOCKET_CLOSED || n === rh.f.ERR_NO_NETWORK)
                                                        return (
                                                            this.retryCountMapping.set(
                                                                s,
                                                                null !== (r = this.retryCountMapping.get(s)) &&
                                                                    void 0 !== r
                                                                    ? r
                                                                    : 1
                                                            ),
                                                            void this.waitingSocketOpenQueue.push(t)
                                                        );
                                                } else {
                                                    var a, o;
                                                    const e =
                                                            (null !== (a = this.retryCountMapping.get(s)) &&
                                                            void 0 !== a
                                                                ? a
                                                                : 0) + 1,
                                                        n =
                                                            (null !== (o = i.CONNECTION_TIMED_OUT_ERROR_CODE.delay) &&
                                                            void 0 !== o
                                                                ? o
                                                                : 3e4) *
                                                                e +
                                                            dh.getGapTime();
                                                    setTimeout(() => {
                                                        this.retryCountMapping.set(s, e), t();
                                                    }, n);
                                                }
                                            }
                                            logRetryError(e, t) {
                                                this.Logger.zsymb(18, 11216, 3e4, e, t);
                                            }
                                            cleanUpItemQueue(e) {
                                                this.retryCountMapping.delete(e);
                                            }
                                        })
                                    ) || oh)
                            ) || oh)
                    ) || oh;
                d.ModuleContainer.registerSingleton(th.a, ah),
                    d.ModuleContainer.registerSingleton(sh.a, lh),
                    d.ModuleContainer.registerSingleton(
                        ih.a,
                        class {
                            constructor() {
                                (this.waitingNetworkQueue = void 0),
                                    (this.waitingCheckStatusQueue = void 0),
                                    (this.waitingTimeout = void 0),
                                    (this.onConnectionBack = () => {
                                        const e = [...this.waitingNetworkQueue];
                                        this.waitingNetworkQueue = [];
                                        for (const t of e) {
                                            const e = dh.getGapTime();
                                            window.requestIdleCallback(
                                                () => {
                                                    t();
                                                },
                                                { timeout: e }
                                            );
                                        }
                                    }),
                                    (this.clearWaitingStatusTimeout = () => {
                                        null !== this.waitingTimeout &&
                                            (window.clearTimeout(this.waitingTimeout), (this.waitingTimeout = null));
                                    }),
                                    (this.moveWaitingCheckStatusToWaitingConnection = () => {
                                        this.clearWaitingStatusTimeout(),
                                            this.waitingNetworkQueue.push(...this.waitingCheckStatusQueue),
                                            (this.waitingCheckStatusQueue = []);
                                    }),
                                    (this.processWaitingCheckStatus = () => {
                                        this.clearWaitingStatusTimeout();
                                        const e = [...this.waitingCheckStatusQueue];
                                        this.waitingCheckStatusQueue = [];
                                        for (const t of e) {
                                            const e = dh.getGapTime();
                                            window.requestIdleCallback(
                                                () => {
                                                    t();
                                                },
                                                { timeout: e }
                                            );
                                        }
                                    }),
                                    (this.waitingNetworkQueue = []),
                                    (this.waitingCheckStatusQueue = []),
                                    (this.waitingTimeout = null),
                                    wt.p.listenEvent(wt.j, (e) => {
                                        e === en.a.CONNECTED
                                            ? (this.processWaitingCheckStatus(), this.onConnectionBack())
                                            : e === en.a.DISCONNECT && this.moveWaitingCheckStatusToWaitingConnection();
                                    });
                            }
                            pushToRetryQueue(e) {
                                en.b.getStateNetwork() === en.a.CONNECTED
                                    ? (this.waitingCheckStatusQueue.push(e),
                                      null === this.waitingTimeout &&
                                          (this.waitingTimeout = window.setTimeout(() => {
                                              (this.waitingTimeout = null), this.processWaitingCheckStatus();
                                          }, We.default.retryConfig.max_waiting_check_status_time)))
                                    : this.waitingNetworkQueue.push(e);
                            }
                        }
                    );
                var ch = s('dhS6'),
                    hh = s('WzIS'),
                    uh = s('sLvT');
                let gh;
                !(function (e) {
                    (e[(e.ONE = 0)] = 'ONE'), (e[(e.MULTI = 1)] = 'MULTI');
                })(gh || (gh = {}));
                const mh = (e) =>
                    new Promise((t, s) => {
                        setTimeout(() => {
                            t(e || 3e3);
                        }, e || 3e3);
                    });
                var ph;
                let fh =
                    Object(pt.b)(ch.a)(
                        (ph =
                            Reflect.metadata(
                                'design:type',
                                Function
                            )(
                                (ph =
                                    Reflect.metadata(
                                        'design:paramtypes',
                                        []
                                    )(
                                        (ph = class {
                                            get Logger() {
                                                return (
                                                    this._Logger ||
                                                        (this._Logger = d.ModuleContainer.resolve(
                                                            N.ZLoggerFactory
                                                        ).createZLogger(kt.b.uiBannerController, [kt.b.uiBannerQueue])),
                                                    this._Logger
                                                );
                                            }
                                            constructor() {
                                                (this.type = void 0),
                                                    (this.name = void 0),
                                                    (this.key = void 0),
                                                    (this.queue = void 0),
                                                    (this.uiState = new Map()),
                                                    (this.isFirtTriggerShowOnQueueCycle = void 0),
                                                    (this._Logger = void 0),
                                                    (this.name = ch.b),
                                                    (this.key = 'convId'),
                                                    (this.queue = []),
                                                    (this.isFirtTriggerShowOnQueueCycle = !0);
                                            }
                                            enBannerQueue(e, t) {
                                                const s = this.queryBannerQueueItem(e.key);
                                                switch ((s && this.removeBannerQueueItem(s.key), t)) {
                                                    case hh.a.NORMAL:
                                                        this.queue.push(e);
                                                        break;
                                                    case hh.a.HIGH:
                                                        this.queue.unshift(e);
                                                }
                                            }
                                            isEmptySyncSourceQueue() {
                                                return 0 === this.queue.length;
                                            }
                                            deBannerQueue() {
                                                return this.queue.shift();
                                            }
                                            removeBannerQueueItem(e) {
                                                this.queue = [...this.queue].filter((t) => t.key !== e);
                                            }
                                            queryBannerQueueItem(e) {
                                                return this.queue.find((t) => t.key === e);
                                            }
                                            handleShowUIBanner(e, t) {
                                                uh.a.isEnableSingleUIBanner()
                                                    ? this.showSingleUI(e, t)
                                                    : this.showMultiUI(e, t);
                                            }
                                            isExistingShow() {
                                                try {
                                                    const e = Object.fromEntries(this.uiState);
                                                    for (const t in e) if (e[t]) return t;
                                                    return null;
                                                } catch (e) {
                                                    return null;
                                                }
                                            }
                                            async showSingleUI(e, t) {
                                                let s;
                                                this.enBannerQueue({ key: e, priority: t }, t);
                                                const i = this.isExistingShow();
                                                if (
                                                    (i && (s = this.queryBannerQueueItem(i)),
                                                    uh.a.isEnableForceCloseNormalBanner() && i && t === hh.a.HIGH && s)
                                                )
                                                    return (
                                                        this.removeBannerQueueItem(s.key),
                                                        this.uiState.set(s.key, !1),
                                                        Object(Pe.g)(this.name, s.key),
                                                        this.uiState.set(e, !0),
                                                        void Object(Pe.g)(this.name, e)
                                                    );
                                                !i &&
                                                    this.isFirtTriggerShowOnQueueCycle &&
                                                    (this.uiState.set(e, !0),
                                                    Object(Pe.g)(this.name, e),
                                                    this.Logger.zsymb(
                                                        0,
                                                        10714,
                                                        3e4,
                                                        '[showSingleUI] Dont have displaying banner so show: ' +
                                                            e +
                                                            ', current queue = ' +
                                                            JSON.stringify(this.queue)
                                                    ));
                                            }
                                            showMultiUI(e, t) {
                                                this.enBannerQueue({ key: e, priority: t }, t),
                                                    this.uiState.set(e, !0),
                                                    Object(Pe.g)(this.name, e);
                                            }
                                            handleHideUIBanner(e) {
                                                uh.a.isEnableSingleUIBanner()
                                                    ? this.hideSingleUI(e)
                                                    : this.hideMultiUI(e);
                                            }
                                            hideSingleUI(e) {
                                                if ((this.removeBannerQueueItem(e), this.uiState.get(e))) {
                                                    this.uiState.set(e, !1), Object(Pe.g)(this.name, e);
                                                    Boolean(this.queue[0])
                                                        ? setTimeout(() => {
                                                              const e = this.queue[0];
                                                              e && !this.isExistingShow()
                                                                  ? (this.uiState.set(e.key, !0),
                                                                    Object(Pe.g)(this.name, e.key),
                                                                    this.Logger.zsymb(
                                                                        0,
                                                                        10714,
                                                                        30001,
                                                                        '[hideSingleUI] Pop next banner to show: ' +
                                                                            e.key +
                                                                            ', current queue = ' +
                                                                            JSON.stringify(this.queue)
                                                                    ))
                                                                  : (this.isFirtTriggerShowOnQueueCycle = !0);
                                                          }, uh.a.getTimeDelayOnNextBanner())
                                                        : (this.isFirtTriggerShowOnQueueCycle = !0);
                                                }
                                            }
                                            hideMultiUI(e) {
                                                this.removeBannerQueueItem(e),
                                                    this.uiState.set(e, !1),
                                                    Object(Pe.g)(this.name, e);
                                            }
                                            async onShowBanner(e, t, s) {
                                                s && (await mh(s));
                                                const i = uh.a.getTimeDelayOnStartApp();
                                                this.isFirtTriggerShowOnQueueCycle && i
                                                    ? (await mh(i), this.handleShowUIBanner(e, t))
                                                    : this.handleShowUIBanner(e, t),
                                                    (this.isFirtTriggerShowOnQueueCycle = !1);
                                            }
                                            async onHideBanner(e, t) {
                                                t && (await mh(t)), this.handleHideUIBanner(e);
                                            }
                                            init(e) {
                                                throw new Error('Method not implemented.');
                                            }
                                            getItem(e, t) {
                                                return this.uiState.get(e.key);
                                            }
                                            getList(e, t) {
                                                throw new Error('Method not implemented.');
                                            }
                                            onGetItemFailure(e, t) {
                                                throw new Error('Method not implemented.');
                                            }
                                            onGetListFailure(e, t) {
                                                throw new Error('Method not implemented.');
                                            }
                                            getDefaultItem() {
                                                throw new Error('Method not implemented.');
                                            }
                                            getDefaultList() {
                                                throw new Error('Method not implemented.');
                                            }
                                        })
                                    ) || ph)
                            ) || ph)
                    ) || ph;
                d.ModuleContainer.registerSingleton(ch.a, fh);
                var vh = s('+eUS');
                const bh =
                    'render' !== __ZaBUNDLENAME__ &&
                    'WEB' !== __ZaBUNDLENAME__ &&
                    'shared-worker' !== __ZaBUNDLENAME__ &&
                    'main' !== __ZaBUNDLENAME__;
                setTimeout(async function () {
                    if (bh) return;
                    const e = d.ModuleContainer.resolve(N.ZLoggerFactory).createZLogger('bootstrap', ['shared']);
                    e.zsymb(3, 8152, 3e4, 'running application bootstrap');
                    try {
                        const t = d.ModuleContainer.resolve(L.a);
                        await t.start();
                        let s = (() => {
                            switch (__ZaBUNDLENAME__) {
                                case 'WEB':
                                    return qd.RunMode.Browser;
                                case 'render':
                                    return qd.RunMode.Host;
                                case 'shared-worker':
                                    return qd.RunMode.Client;
                                case 'main':
                                    return qd.RunMode.Background;
                                default:
                                    return qd.RunMode.Unknown;
                            }
                        })();
                        Object(vh.a)(s),
                            s === qd.RunMode.Browser &&
                                (function () {
                                    const e = Object(m.a)();
                                    g.a.includes(e) || d.ModuleContainer.resolve(se).setupWriters();
                                })(),
                            'shared-worker' === __ZaBUNDLENAME__ && (await t.init()),
                            e.zsymb(3, 8152, 30001, 'application bootstrap success');
                    } catch (t) {
                        e.zsymb(0, 8152, 30002, () => ['application bootstrap fail', { reason: t }]);
                    }
                }, 0);
            },
            rhBN: function (e, t, s) {
                'use strict';
                var i,
                    n = s('jDHv'),
                    r = s('UK4g'),
                    a = s('YEoC'),
                    o = s('DI/x'),
                    d = s('tHMN'),
                    l = s('LzQZ');
                let c =
                    n.ModuleContainer.injectable()(
                        (i =
                            (function (e, t) {
                                return n.ModuleContainer.inject(d.b)(e, void 0, 0);
                            })(
                                (i =
                                    Reflect.metadata(
                                        'design:type',
                                        Function
                                    )(
                                        (i =
                                            Reflect.metadata('design:paramtypes', [void 0 === d.b ? Object : d.b])(
                                                (i = class {
                                                    constructor(e) {
                                                        (this.engine = e),
                                                            (this.currentId = 1),
                                                            (this.transactions = void 0),
                                                            (this.transactions = new Map());
                                                    }
                                                    get(e) {
                                                        const t = this.transactions.get(e);
                                                        if (!t) throw new o.h('The transaction has already committed!');
                                                        return t;
                                                    }
                                                    async beginTransaction(e, t, s) {
                                                        const i = this.currentId++,
                                                            n = new Error(),
                                                            o = await this.engine.do({
                                                                type: a.d.BeginTransaction,
                                                                database: e,
                                                                table: t[0],
                                                                transaction: i,
                                                                priority: a.c.BLOCKING,
                                                                retry: r.i,
                                                                timing: {},
                                                                meta: { step: -1, timeout: r.k, error: n },
                                                                params: { tables: t, mode: s },
                                                                trace: () => {},
                                                            });
                                                        return this.transactions.set(i, o), o;
                                                    }
                                                    commitTransaction(e) {
                                                        const t = this.transactions.get(e);
                                                        return !t || t.closed
                                                            ? (t && this.transactions.delete(e), Promise.resolve())
                                                            : new Promise((s, i) => {
                                                                  t.onClose(() => {
                                                                      this.transactions.delete(e),
                                                                          t.error ? i(t.error) : s();
                                                                  });
                                                              });
                                                    }
                                                })
                                            ) || i)
                                    ) || i)
                            ) || i)
                    ) || i;
                n.ModuleContainer.registerSingleton(l.a, c);
            },
            zpw2: function (e, t, s) {
                'use strict';
                (function (e) {
                    s.d(t, 'a', function () {
                        return h;
                    });
                    var i = s('jDHv'),
                        n = s('Uzj0'),
                        r = s('wH4e'),
                        a = s('SGbk'),
                        o = s('d951'),
                        d = s('TTNl'),
                        l = s('JMlY'),
                        c = s('ipeT');
                    class h {
                        constructor(e, t, s) {
                            (this.databaseName = e),
                                (this.databaseSchema = t),
                                (this.numOfActiveQueries = 0),
                                (this.pendingQueries = []),
                                (this.pending = !1),
                                (this.idleListeners = []),
                                (this._engine = null);
                            const i = n.c.map(
                                t,
                                (t, i) => new c.a(e, i, r.NO_TRANSACTION_ID, this.doQuery.bind(this), s)
                            );
                            Object.entries(i).forEach((e) => {
                                let [t, s] = e;
                                Object.defineProperty(this, t, { value: s, writable: !1 });
                            }),
                                Object.defineProperty(this, 'runTransaction', {
                                    value: this.runTransaction.bind(this, this.databaseName, this.databaseSchema),
                                }),
                                (this.closeThisDatabase = Object(a.a)(this.closeThisDatabase.bind(this))),
                                (this.deleteThisDatabase = Object(a.a)(this.deleteThisDatabase.bind(this)));
                        }
                        get engine() {
                            return this._engine || (this._engine = i.ModuleContainer.resolve(d.a)), this._engine;
                        }
                        get isIdle() {
                            return 0 === this.numOfActiveQueries;
                        }
                        dispatchIdleEvent() {
                            this.idleListeners.forEach((e) => e()), (this.idleListeners = []);
                        }
                        addIdleListenerOnce(e) {
                            this.isIdle ? e() : this.idleListeners.push(e);
                        }
                        stop() {
                            this.pending = !0;
                        }
                        resume() {
                            this.pendingQueries.forEach((e) => {
                                e.execute();
                            }),
                                (this.pendingQueries = []),
                                (this.pending = !1);
                        }
                        waitUntilIdle() {
                            return new Promise((e) => {
                                this.addIdleListenerOnce(() => e());
                            });
                        }
                        trapIdleTracking(e) {
                            return (
                                (this.numOfActiveQueries += 1),
                                e.finally(() => {
                                    (this.numOfActiveQueries -= 1), this.isIdle && this.dispatchIdleEvent();
                                })
                            );
                        }
                        doQuery(e) {
                            const t = () => this.trapIdleTracking(this.engine.do(e));
                            if (this.pending) {
                                const e = () => t(),
                                    s = new o.a(e);
                                return this.pendingQueries.push(s), s.getResult();
                            }
                            return t();
                        }
                        async closeThisDatabase() {
                            this.stop(), await this.waitUntilIdle();
                            const e = i.ModuleContainer.resolve(d.a);
                            await e.closeDatabase(this.databaseName), this.resume();
                        }
                        async deleteThisDatabase() {
                            this.stop(), await this.waitUntilIdle();
                            const e = i.ModuleContainer.resolve(d.a);
                            await e.deleteDatabase(this.databaseName), this.resume();
                        }
                        runTransaction(t, s, n, a, o) {
                            void 0 === o && (o = r.TransactionMode.READWRITE);
                            const d = i.ModuleContainer.resolve(l.a),
                                h = this.doQuery.bind(this);
                            return new Promise((i, l) => {
                                try {
                                    !(async function (i, l) {
                                        const u = n.map((e) => ('string' == typeof e ? e : e.name)),
                                            g = await d.beginTransaction(t, u, o),
                                            m = u.map((e) => {
                                                if (!s[e]) throw new r.MissingTableConfigError(e);
                                                const i = s[e];
                                                return new c.a(t, i, g.id, h);
                                            });
                                        await a(m),
                                            e(() => {
                                                d.commitTransaction(g.id).then(i).catch(l);
                                            });
                                    })(i, l);
                                } catch (u) {
                                    l(u);
                                }
                            });
                        }
                    }
                }).call(this, s('NWH6').setImmediate);
            },
        },
    ]);
//# sourceMappingURL=../sourcemaps/lazy/web-startup.1f1a7f7984e26a3f3546.js.map
